/*
Copyright 2016 The Archon Authors.
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package cluster

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg2_api "k8s.io/kubernetes/pkg/api"
	pkg1_unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	pkg3_types "k8s.io/kubernetes/pkg/types"
	"reflect"
	"runtime"
	time "time"
)

const (
	// ----- content types ----
	codecSelferC_UTF81234 = 1
	codecSelferC_RAW1234  = 0
	// ----- value types used ----
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey1234    = 2
	codecSelfer_containerMapValue1234  = 3
	codecSelfer_containerMapEnd1234    = 4
	codecSelfer_containerArrayElem1234 = 6
	codecSelfer_containerArrayEnd1234  = 7
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg2_api.ObjectMeta
		var v1 pkg1_unversioned.TypeMeta
		var v2 pkg3_types.UID
		var v3 time.Time
		_, _, _, _ = v0, v1, v2, v3
	}
}

func (x *LocalObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [1]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Name != ""
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(1)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LocalObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym6 := z.DecBinary()
	_ = yym6
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct7 := r.ContainerType()
		if yyct7 == codecSelferValueTypeMap1234 {
			yyl7 := r.ReadMapStart()
			if yyl7 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl7, d)
			}
		} else if yyct7 == codecSelferValueTypeArray1234 {
			yyl7 := r.ReadArrayStart()
			if yyl7 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl7, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LocalObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys8Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys8Slc
	var yyhl8 bool = l >= 0
	for yyj8 := 0; ; yyj8++ {
		if yyhl8 {
			if yyj8 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys8Slc = r.DecodeBytes(yys8Slc, true, true)
		yys8 := string(yys8Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys8 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys8)
		} // end switch yys8
	} // end for yyj8
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LocalObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj10 int
	var yyb10 bool
	var yyhl10 bool = l >= 0
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	for {
		yyj10++
		if yyhl10 {
			yyb10 = yyj10 > l
		} else {
			yyb10 = r.CheckBreak()
		}
		if yyb10 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj10-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym12 := z.EncBinary()
		_ = yym12
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep13 := !z.EncBinary()
			yy2arr13 := z.EncBasicHandle().StructToArray
			var yyq13 [2]bool
			_, _, _ = yysep13, yyq13, yy2arr13
			const yyr13 bool = false
			yyq13[0] = x.Name != ""
			yyq13[1] = len(x.Data) != 0
			var yynn13 int
			if yyr13 || yy2arr13 {
				r.EncodeArrayStart(2)
			} else {
				yynn13 = 0
				for _, b := range yyq13 {
					if b {
						yynn13++
					}
				}
				r.EncodeMapStart(yynn13)
				yynn13 = 0
			}
			if yyr13 || yy2arr13 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq13[0] {
					yym15 := z.EncBinary()
					_ = yym15
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq13[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr13 || yy2arr13 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq13[1] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym18 := z.EncBinary()
						_ = yym18
						if false {
						} else {
							z.F.EncMapStringStringV(x.Data, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq13[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym19 := z.EncBinary()
						_ = yym19
						if false {
						} else {
							z.F.EncMapStringStringV(x.Data, false, e)
						}
					}
				}
			}
			if yyr13 || yy2arr13 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym20 := z.DecBinary()
	_ = yym20
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct21 := r.ContainerType()
		if yyct21 == codecSelferValueTypeMap1234 {
			yyl21 := r.ReadMapStart()
			if yyl21 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl21, d)
			}
		} else if yyct21 == codecSelferValueTypeArray1234 {
			yyl21 := r.ReadArrayStart()
			if yyl21 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl21, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys22Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys22Slc
	var yyhl22 bool = l >= 0
	for yyj22 := 0; ; yyj22++ {
		if yyhl22 {
			if yyj22 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys22Slc = r.DecodeBytes(yys22Slc, true, true)
		yys22 := string(yys22Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys22 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv24 := &x.Data
				yym25 := z.DecBinary()
				_ = yym25
				if false {
				} else {
					z.F.DecMapStringStringX(yyv24, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys22)
		} // end switch yys22
	} // end for yyj22
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj26 int
	var yyb26 bool
	var yyhl26 bool = l >= 0
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv28 := &x.Data
		yym29 := z.DecBinary()
		_ = yym29
		if false {
		} else {
			z.F.DecMapStringStringX(yyv28, false, d)
		}
	}
	for {
		yyj26++
		if yyhl26 {
			yyb26 = yyj26 > l
		} else {
			yyb26 = r.CheckBreak()
		}
		if yyb26 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj26-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *UserSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym30 := z.EncBinary()
		_ = yym30
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep31 := !z.EncBinary()
			yy2arr31 := z.EncBasicHandle().StructToArray
			var yyq31 [3]bool
			_, _, _ = yysep31, yyq31, yy2arr31
			const yyr31 bool = false
			var yynn31 int
			if yyr31 || yy2arr31 {
				r.EncodeArrayStart(3)
			} else {
				yynn31 = 3
				for _, b := range yyq31 {
					if b {
						yynn31++
					}
				}
				r.EncodeMapStart(yynn31)
				yynn31 = 0
			}
			if yyr31 || yy2arr31 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym33 := z.EncBinary()
				_ = yym33
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym34 := z.EncBinary()
				_ = yym34
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr31 || yy2arr31 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym36 := z.EncBinary()
				_ = yym36
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PasswordHash))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("PasswordHash"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym37 := z.EncBinary()
				_ = yym37
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PasswordHash))
				}
			}
			if yyr31 || yy2arr31 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.SSHAuthorizedKeys == nil {
					r.EncodeNil()
				} else {
					yym39 := z.EncBinary()
					_ = yym39
					if false {
					} else {
						z.F.EncSliceStringV(x.SSHAuthorizedKeys, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("SSHAuthorizedKeys"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.SSHAuthorizedKeys == nil {
					r.EncodeNil()
				} else {
					yym40 := z.EncBinary()
					_ = yym40
					if false {
					} else {
						z.F.EncSliceStringV(x.SSHAuthorizedKeys, false, e)
					}
				}
			}
			if yyr31 || yy2arr31 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *UserSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym41 := z.DecBinary()
	_ = yym41
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct42 := r.ContainerType()
		if yyct42 == codecSelferValueTypeMap1234 {
			yyl42 := r.ReadMapStart()
			if yyl42 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl42, d)
			}
		} else if yyct42 == codecSelferValueTypeArray1234 {
			yyl42 := r.ReadArrayStart()
			if yyl42 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl42, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *UserSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys43Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys43Slc
	var yyhl43 bool = l >= 0
	for yyj43 := 0; ; yyj43++ {
		if yyhl43 {
			if yyj43 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys43Slc = r.DecodeBytes(yys43Slc, true, true)
		yys43 := string(yys43Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys43 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "PasswordHash":
			if r.TryDecodeAsNil() {
				x.PasswordHash = ""
			} else {
				x.PasswordHash = string(r.DecodeString())
			}
		case "SSHAuthorizedKeys":
			if r.TryDecodeAsNil() {
				x.SSHAuthorizedKeys = nil
			} else {
				yyv46 := &x.SSHAuthorizedKeys
				yym47 := z.DecBinary()
				_ = yym47
				if false {
				} else {
					z.F.DecSliceStringX(yyv46, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys43)
		} // end switch yys43
	} // end for yyj43
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *UserSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj48 int
	var yyb48 bool
	var yyhl48 bool = l >= 0
	yyj48++
	if yyhl48 {
		yyb48 = yyj48 > l
	} else {
		yyb48 = r.CheckBreak()
	}
	if yyb48 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj48++
	if yyhl48 {
		yyb48 = yyj48 > l
	} else {
		yyb48 = r.CheckBreak()
	}
	if yyb48 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PasswordHash = ""
	} else {
		x.PasswordHash = string(r.DecodeString())
	}
	yyj48++
	if yyhl48 {
		yyb48 = yyj48 > l
	} else {
		yyb48 = r.CheckBreak()
	}
	if yyb48 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SSHAuthorizedKeys = nil
	} else {
		yyv51 := &x.SSHAuthorizedKeys
		yym52 := z.DecBinary()
		_ = yym52
		if false {
		} else {
			z.F.DecSliceStringX(yyv51, false, d)
		}
	}
	for {
		yyj48++
		if yyhl48 {
			yyb48 = yyj48 > l
		} else {
			yyb48 = r.CheckBreak()
		}
		if yyb48 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj48-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *User) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym53 := z.EncBinary()
		_ = yym53
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep54 := !z.EncBinary()
			yy2arr54 := z.EncBasicHandle().StructToArray
			var yyq54 [4]bool
			_, _, _ = yysep54, yyq54, yy2arr54
			const yyr54 bool = false
			yyq54[0] = x.Kind != ""
			yyq54[1] = x.APIVersion != ""
			var yynn54 int
			if yyr54 || yy2arr54 {
				r.EncodeArrayStart(4)
			} else {
				yynn54 = 2
				for _, b := range yyq54 {
					if b {
						yynn54++
					}
				}
				r.EncodeMapStart(yynn54)
				yynn54 = 0
			}
			if yyr54 || yy2arr54 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq54[0] {
					yym56 := z.EncBinary()
					_ = yym56
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq54[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym57 := z.EncBinary()
					_ = yym57
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr54 || yy2arr54 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq54[1] {
					yym59 := z.EncBinary()
					_ = yym59
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq54[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym60 := z.EncBinary()
					_ = yym60
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr54 || yy2arr54 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy62 := &x.ObjectMeta
				yy62.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("metadata"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy63 := &x.ObjectMeta
				yy63.CodecEncodeSelf(e)
			}
			if yyr54 || yy2arr54 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy65 := &x.Spec
				yy65.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Spec"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy66 := &x.Spec
				yy66.CodecEncodeSelf(e)
			}
			if yyr54 || yy2arr54 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *User) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym67 := z.DecBinary()
	_ = yym67
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct68 := r.ContainerType()
		if yyct68 == codecSelferValueTypeMap1234 {
			yyl68 := r.ReadMapStart()
			if yyl68 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl68, d)
			}
		} else if yyct68 == codecSelferValueTypeArray1234 {
			yyl68 := r.ReadArrayStart()
			if yyl68 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl68, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *User) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys69Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys69Slc
	var yyhl69 bool = l >= 0
	for yyj69 := 0; ; yyj69++ {
		if yyhl69 {
			if yyj69 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys69Slc = r.DecodeBytes(yys69Slc, true, true)
		yys69 := string(yys69Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys69 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv72 := &x.ObjectMeta
				yyv72.CodecDecodeSelf(d)
			}
		case "Spec":
			if r.TryDecodeAsNil() {
				x.Spec = UserSpec{}
			} else {
				yyv73 := &x.Spec
				yyv73.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys69)
		} // end switch yys69
	} // end for yyj69
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *User) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj74 int
	var yyb74 bool
	var yyhl74 bool = l >= 0
	yyj74++
	if yyhl74 {
		yyb74 = yyj74 > l
	} else {
		yyb74 = r.CheckBreak()
	}
	if yyb74 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj74++
	if yyhl74 {
		yyb74 = yyj74 > l
	} else {
		yyb74 = r.CheckBreak()
	}
	if yyb74 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj74++
	if yyhl74 {
		yyb74 = yyj74 > l
	} else {
		yyb74 = r.CheckBreak()
	}
	if yyb74 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv77 := &x.ObjectMeta
		yyv77.CodecDecodeSelf(d)
	}
	yyj74++
	if yyhl74 {
		yyb74 = yyj74 > l
	} else {
		yyb74 = r.CheckBreak()
	}
	if yyb74 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = UserSpec{}
	} else {
		yyv78 := &x.Spec
		yyv78.CodecDecodeSelf(d)
	}
	for {
		yyj74++
		if yyhl74 {
			yyb74 = yyj74 > l
		} else {
			yyb74 = r.CheckBreak()
		}
		if yyb74 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj74-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *UserList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym79 := z.EncBinary()
		_ = yym79
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep80 := !z.EncBinary()
			yy2arr80 := z.EncBasicHandle().StructToArray
			var yyq80 [4]bool
			_, _, _ = yysep80, yyq80, yy2arr80
			const yyr80 bool = false
			yyq80[0] = x.Kind != ""
			yyq80[1] = x.APIVersion != ""
			var yynn80 int
			if yyr80 || yy2arr80 {
				r.EncodeArrayStart(4)
			} else {
				yynn80 = 2
				for _, b := range yyq80 {
					if b {
						yynn80++
					}
				}
				r.EncodeMapStart(yynn80)
				yynn80 = 0
			}
			if yyr80 || yy2arr80 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq80[0] {
					yym82 := z.EncBinary()
					_ = yym82
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq80[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym83 := z.EncBinary()
					_ = yym83
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr80 || yy2arr80 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq80[1] {
					yym85 := z.EncBinary()
					_ = yym85
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq80[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym86 := z.EncBinary()
					_ = yym86
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr80 || yy2arr80 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy88 := &x.ListMeta
				yym89 := z.EncBinary()
				_ = yym89
				if false {
				} else if z.HasExtensions() && z.EncExt(yy88) {
				} else {
					z.EncFallback(yy88)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("metadata"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy90 := &x.ListMeta
				yym91 := z.EncBinary()
				_ = yym91
				if false {
				} else if z.HasExtensions() && z.EncExt(yy90) {
				} else {
					z.EncFallback(yy90)
				}
			}
			if yyr80 || yy2arr80 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym93 := z.EncBinary()
					_ = yym93
					if false {
					} else {
						h.encSlicePtrtoUser(([]*User)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym94 := z.EncBinary()
					_ = yym94
					if false {
					} else {
						h.encSlicePtrtoUser(([]*User)(x.Items), e)
					}
				}
			}
			if yyr80 || yy2arr80 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *UserList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym95 := z.DecBinary()
	_ = yym95
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct96 := r.ContainerType()
		if yyct96 == codecSelferValueTypeMap1234 {
			yyl96 := r.ReadMapStart()
			if yyl96 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl96, d)
			}
		} else if yyct96 == codecSelferValueTypeArray1234 {
			yyl96 := r.ReadArrayStart()
			if yyl96 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl96, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *UserList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys97Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys97Slc
	var yyhl97 bool = l >= 0
	for yyj97 := 0; ; yyj97++ {
		if yyhl97 {
			if yyj97 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys97Slc = r.DecodeBytes(yys97Slc, true, true)
		yys97 := string(yys97Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys97 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv100 := &x.ListMeta
				yym101 := z.DecBinary()
				_ = yym101
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv100) {
				} else {
					z.DecFallback(yyv100, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv102 := &x.Items
				yym103 := z.DecBinary()
				_ = yym103
				if false {
				} else {
					h.decSlicePtrtoUser((*[]*User)(yyv102), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys97)
		} // end switch yys97
	} // end for yyj97
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *UserList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj104 int
	var yyb104 bool
	var yyhl104 bool = l >= 0
	yyj104++
	if yyhl104 {
		yyb104 = yyj104 > l
	} else {
		yyb104 = r.CheckBreak()
	}
	if yyb104 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj104++
	if yyhl104 {
		yyb104 = yyj104 > l
	} else {
		yyb104 = r.CheckBreak()
	}
	if yyb104 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj104++
	if yyhl104 {
		yyb104 = yyj104 > l
	} else {
		yyb104 = r.CheckBreak()
	}
	if yyb104 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv107 := &x.ListMeta
		yym108 := z.DecBinary()
		_ = yym108
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv107) {
		} else {
			z.DecFallback(yyv107, false)
		}
	}
	yyj104++
	if yyhl104 {
		yyb104 = yyj104 > l
	} else {
		yyb104 = r.CheckBreak()
	}
	if yyb104 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv109 := &x.Items
		yym110 := z.DecBinary()
		_ = yym110
		if false {
		} else {
			h.decSlicePtrtoUser((*[]*User)(yyv109), d)
		}
	}
	for {
		yyj104++
		if yyhl104 {
			yyb104 = yyj104 > l
		} else {
			yyb104 = r.CheckBreak()
		}
		if yyb104 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj104-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NetworkSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym111 := z.EncBinary()
		_ = yym111
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep112 := !z.EncBinary()
			yy2arr112 := z.EncBasicHandle().StructToArray
			var yyq112 [3]bool
			_, _, _ = yysep112, yyq112, yy2arr112
			const yyr112 bool = false
			yyq112[0] = x.Region != ""
			yyq112[1] = x.Zone != ""
			yyq112[2] = x.Subnet != ""
			var yynn112 int
			if yyr112 || yy2arr112 {
				r.EncodeArrayStart(3)
			} else {
				yynn112 = 0
				for _, b := range yyq112 {
					if b {
						yynn112++
					}
				}
				r.EncodeMapStart(yynn112)
				yynn112 = 0
			}
			if yyr112 || yy2arr112 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq112[0] {
					yym114 := z.EncBinary()
					_ = yym114
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Region))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq112[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("region"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym115 := z.EncBinary()
					_ = yym115
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Region))
					}
				}
			}
			if yyr112 || yy2arr112 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq112[1] {
					yym117 := z.EncBinary()
					_ = yym117
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Zone))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq112[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("zone"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym118 := z.EncBinary()
					_ = yym118
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Zone))
					}
				}
			}
			if yyr112 || yy2arr112 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq112[2] {
					yym120 := z.EncBinary()
					_ = yym120
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subnet))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq112[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("subnet"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym121 := z.EncBinary()
					_ = yym121
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subnet))
					}
				}
			}
			if yyr112 || yy2arr112 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NetworkSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym122 := z.DecBinary()
	_ = yym122
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct123 := r.ContainerType()
		if yyct123 == codecSelferValueTypeMap1234 {
			yyl123 := r.ReadMapStart()
			if yyl123 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl123, d)
			}
		} else if yyct123 == codecSelferValueTypeArray1234 {
			yyl123 := r.ReadArrayStart()
			if yyl123 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl123, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NetworkSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys124Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys124Slc
	var yyhl124 bool = l >= 0
	for yyj124 := 0; ; yyj124++ {
		if yyhl124 {
			if yyj124 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys124Slc = r.DecodeBytes(yys124Slc, true, true)
		yys124 := string(yys124Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys124 {
		case "region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				x.Region = string(r.DecodeString())
			}
		case "zone":
			if r.TryDecodeAsNil() {
				x.Zone = ""
			} else {
				x.Zone = string(r.DecodeString())
			}
		case "subnet":
			if r.TryDecodeAsNil() {
				x.Subnet = ""
			} else {
				x.Subnet = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys124)
		} // end switch yys124
	} // end for yyj124
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NetworkSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj128 int
	var yyb128 bool
	var yyhl128 bool = l >= 0
	yyj128++
	if yyhl128 {
		yyb128 = yyj128 > l
	} else {
		yyb128 = r.CheckBreak()
	}
	if yyb128 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		x.Region = string(r.DecodeString())
	}
	yyj128++
	if yyhl128 {
		yyb128 = yyj128 > l
	} else {
		yyb128 = r.CheckBreak()
	}
	if yyb128 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Zone = ""
	} else {
		x.Zone = string(r.DecodeString())
	}
	yyj128++
	if yyhl128 {
		yyb128 = yyj128 > l
	} else {
		yyb128 = r.CheckBreak()
	}
	if yyb128 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subnet = ""
	} else {
		x.Subnet = string(r.DecodeString())
	}
	for {
		yyj128++
		if yyhl128 {
			yyb128 = yyj128 > l
		} else {
			yyb128 = r.CheckBreak()
		}
		if yyb128 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj128-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NetworkStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym132 := z.EncBinary()
		_ = yym132
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep133 := !z.EncBinary()
			yy2arr133 := z.EncBasicHandle().StructToArray
			var yyq133 [1]bool
			_, _, _ = yysep133, yyq133, yy2arr133
			const yyr133 bool = false
			yyq133[0] = x.Phase != ""
			var yynn133 int
			if yyr133 || yy2arr133 {
				r.EncodeArrayStart(1)
			} else {
				yynn133 = 0
				for _, b := range yyq133 {
					if b {
						yynn133++
					}
				}
				r.EncodeMapStart(yynn133)
				yynn133 = 0
			}
			if yyr133 || yy2arr133 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq133[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq133[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr133 || yy2arr133 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NetworkStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym135 := z.DecBinary()
	_ = yym135
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct136 := r.ContainerType()
		if yyct136 == codecSelferValueTypeMap1234 {
			yyl136 := r.ReadMapStart()
			if yyl136 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl136, d)
			}
		} else if yyct136 == codecSelferValueTypeArray1234 {
			yyl136 := r.ReadArrayStart()
			if yyl136 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl136, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NetworkStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys137Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys137Slc
	var yyhl137 bool = l >= 0
	for yyj137 := 0; ; yyj137++ {
		if yyhl137 {
			if yyj137 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys137Slc = r.DecodeBytes(yys137Slc, true, true)
		yys137 := string(yys137Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys137 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NetworkPhase(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys137)
		} // end switch yys137
	} // end for yyj137
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NetworkStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj139 int
	var yyb139 bool
	var yyhl139 bool = l >= 0
	yyj139++
	if yyhl139 {
		yyb139 = yyj139 > l
	} else {
		yyb139 = r.CheckBreak()
	}
	if yyb139 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NetworkPhase(r.DecodeString())
	}
	for {
		yyj139++
		if yyhl139 {
			yyb139 = yyj139 > l
		} else {
			yyb139 = r.CheckBreak()
		}
		if yyb139 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj139-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NetworkPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym141 := z.EncBinary()
	_ = yym141
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NetworkPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym142 := z.DecBinary()
	_ = yym142
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Network) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym143 := z.EncBinary()
		_ = yym143
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep144 := !z.EncBinary()
			yy2arr144 := z.EncBasicHandle().StructToArray
			var yyq144 [5]bool
			_, _, _ = yysep144, yyq144, yy2arr144
			const yyr144 bool = false
			yyq144[0] = x.Kind != ""
			yyq144[1] = x.APIVersion != ""
			yyq144[3] = true
			yyq144[4] = true
			var yynn144 int
			if yyr144 || yy2arr144 {
				r.EncodeArrayStart(5)
			} else {
				yynn144 = 1
				for _, b := range yyq144 {
					if b {
						yynn144++
					}
				}
				r.EncodeMapStart(yynn144)
				yynn144 = 0
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[0] {
					yym146 := z.EncBinary()
					_ = yym146
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq144[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym147 := z.EncBinary()
					_ = yym147
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[1] {
					yym149 := z.EncBinary()
					_ = yym149
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq144[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym150 := z.EncBinary()
					_ = yym150
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy152 := &x.ObjectMeta
				yy152.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("metadata"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy153 := &x.ObjectMeta
				yy153.CodecEncodeSelf(e)
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[3] {
					yy155 := &x.Spec
					yy155.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy156 := &x.Spec
					yy156.CodecEncodeSelf(e)
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[4] {
					yy158 := &x.Status
					yy158.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy159 := &x.Status
					yy159.CodecEncodeSelf(e)
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Network) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym160 := z.DecBinary()
	_ = yym160
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct161 := r.ContainerType()
		if yyct161 == codecSelferValueTypeMap1234 {
			yyl161 := r.ReadMapStart()
			if yyl161 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl161, d)
			}
		} else if yyct161 == codecSelferValueTypeArray1234 {
			yyl161 := r.ReadArrayStart()
			if yyl161 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl161, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Network) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys162Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys162Slc
	var yyhl162 bool = l >= 0
	for yyj162 := 0; ; yyj162++ {
		if yyhl162 {
			if yyj162 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys162Slc = r.DecodeBytes(yys162Slc, true, true)
		yys162 := string(yys162Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys162 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv165 := &x.ObjectMeta
				yyv165.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NetworkSpec{}
			} else {
				yyv166 := &x.Spec
				yyv166.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NetworkStatus{}
			} else {
				yyv167 := &x.Status
				yyv167.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys162)
		} // end switch yys162
	} // end for yyj162
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Network) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj168 int
	var yyb168 bool
	var yyhl168 bool = l >= 0
	yyj168++
	if yyhl168 {
		yyb168 = yyj168 > l
	} else {
		yyb168 = r.CheckBreak()
	}
	if yyb168 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj168++
	if yyhl168 {
		yyb168 = yyj168 > l
	} else {
		yyb168 = r.CheckBreak()
	}
	if yyb168 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj168++
	if yyhl168 {
		yyb168 = yyj168 > l
	} else {
		yyb168 = r.CheckBreak()
	}
	if yyb168 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv171 := &x.ObjectMeta
		yyv171.CodecDecodeSelf(d)
	}
	yyj168++
	if yyhl168 {
		yyb168 = yyj168 > l
	} else {
		yyb168 = r.CheckBreak()
	}
	if yyb168 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NetworkSpec{}
	} else {
		yyv172 := &x.Spec
		yyv172.CodecDecodeSelf(d)
	}
	yyj168++
	if yyhl168 {
		yyb168 = yyj168 > l
	} else {
		yyb168 = r.CheckBreak()
	}
	if yyb168 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NetworkStatus{}
	} else {
		yyv173 := &x.Status
		yyv173.CodecDecodeSelf(d)
	}
	for {
		yyj168++
		if yyhl168 {
			yyb168 = yyj168 > l
		} else {
			yyb168 = r.CheckBreak()
		}
		if yyb168 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj168-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NetworkList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym174 := z.EncBinary()
		_ = yym174
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep175 := !z.EncBinary()
			yy2arr175 := z.EncBasicHandle().StructToArray
			var yyq175 [4]bool
			_, _, _ = yysep175, yyq175, yy2arr175
			const yyr175 bool = false
			yyq175[0] = x.Kind != ""
			yyq175[1] = x.APIVersion != ""
			var yynn175 int
			if yyr175 || yy2arr175 {
				r.EncodeArrayStart(4)
			} else {
				yynn175 = 2
				for _, b := range yyq175 {
					if b {
						yynn175++
					}
				}
				r.EncodeMapStart(yynn175)
				yynn175 = 0
			}
			if yyr175 || yy2arr175 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq175[0] {
					yym177 := z.EncBinary()
					_ = yym177
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq175[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym178 := z.EncBinary()
					_ = yym178
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr175 || yy2arr175 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq175[1] {
					yym180 := z.EncBinary()
					_ = yym180
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq175[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym181 := z.EncBinary()
					_ = yym181
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr175 || yy2arr175 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy183 := &x.ListMeta
				yym184 := z.EncBinary()
				_ = yym184
				if false {
				} else if z.HasExtensions() && z.EncExt(yy183) {
				} else {
					z.EncFallback(yy183)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("metadata"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy185 := &x.ListMeta
				yym186 := z.EncBinary()
				_ = yym186
				if false {
				} else if z.HasExtensions() && z.EncExt(yy185) {
				} else {
					z.EncFallback(yy185)
				}
			}
			if yyr175 || yy2arr175 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym188 := z.EncBinary()
					_ = yym188
					if false {
					} else {
						h.encSlicePtrtoNetwork(([]*Network)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym189 := z.EncBinary()
					_ = yym189
					if false {
					} else {
						h.encSlicePtrtoNetwork(([]*Network)(x.Items), e)
					}
				}
			}
			if yyr175 || yy2arr175 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NetworkList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym190 := z.DecBinary()
	_ = yym190
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct191 := r.ContainerType()
		if yyct191 == codecSelferValueTypeMap1234 {
			yyl191 := r.ReadMapStart()
			if yyl191 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl191, d)
			}
		} else if yyct191 == codecSelferValueTypeArray1234 {
			yyl191 := r.ReadArrayStart()
			if yyl191 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl191, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NetworkList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys192Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys192Slc
	var yyhl192 bool = l >= 0
	for yyj192 := 0; ; yyj192++ {
		if yyhl192 {
			if yyj192 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys192Slc = r.DecodeBytes(yys192Slc, true, true)
		yys192 := string(yys192Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys192 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv195 := &x.ListMeta
				yym196 := z.DecBinary()
				_ = yym196
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv195) {
				} else {
					z.DecFallback(yyv195, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv197 := &x.Items
				yym198 := z.DecBinary()
				_ = yym198
				if false {
				} else {
					h.decSlicePtrtoNetwork((*[]*Network)(yyv197), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys192)
		} // end switch yys192
	} // end for yyj192
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NetworkList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj199 int
	var yyb199 bool
	var yyhl199 bool = l >= 0
	yyj199++
	if yyhl199 {
		yyb199 = yyj199 > l
	} else {
		yyb199 = r.CheckBreak()
	}
	if yyb199 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj199++
	if yyhl199 {
		yyb199 = yyj199 > l
	} else {
		yyb199 = r.CheckBreak()
	}
	if yyb199 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj199++
	if yyhl199 {
		yyb199 = yyj199 > l
	} else {
		yyb199 = r.CheckBreak()
	}
	if yyb199 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv202 := &x.ListMeta
		yym203 := z.DecBinary()
		_ = yym203
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv202) {
		} else {
			z.DecFallback(yyv202, false)
		}
	}
	yyj199++
	if yyhl199 {
		yyb199 = yyj199 > l
	} else {
		yyb199 = r.CheckBreak()
	}
	if yyb199 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv204 := &x.Items
		yym205 := z.DecBinary()
		_ = yym205
		if false {
		} else {
			h.decSlicePtrtoNetwork((*[]*Network)(yyv204), d)
		}
	}
	for {
		yyj199++
		if yyhl199 {
			yyb199 = yyj199 > l
		} else {
			yyb199 = r.CheckBreak()
		}
		if yyb199 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj199-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *InstanceGroup) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym206 := z.EncBinary()
		_ = yym206
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep207 := !z.EncBinary()
			yy2arr207 := z.EncBasicHandle().StructToArray
			var yyq207 [5]bool
			_, _, _ = yysep207, yyq207, yy2arr207
			const yyr207 bool = false
			yyq207[0] = x.Kind != ""
			yyq207[1] = x.APIVersion != ""
			yyq207[3] = true
			yyq207[4] = true
			var yynn207 int
			if yyr207 || yy2arr207 {
				r.EncodeArrayStart(5)
			} else {
				yynn207 = 1
				for _, b := range yyq207 {
					if b {
						yynn207++
					}
				}
				r.EncodeMapStart(yynn207)
				yynn207 = 0
			}
			if yyr207 || yy2arr207 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq207[0] {
					yym209 := z.EncBinary()
					_ = yym209
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq207[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym210 := z.EncBinary()
					_ = yym210
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr207 || yy2arr207 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq207[1] {
					yym212 := z.EncBinary()
					_ = yym212
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq207[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym213 := z.EncBinary()
					_ = yym213
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr207 || yy2arr207 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy215 := &x.ObjectMeta
				yy215.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("metadata"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy216 := &x.ObjectMeta
				yy216.CodecEncodeSelf(e)
			}
			if yyr207 || yy2arr207 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq207[3] {
					yy218 := &x.Spec
					yy218.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq207[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy219 := &x.Spec
					yy219.CodecEncodeSelf(e)
				}
			}
			if yyr207 || yy2arr207 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq207[4] {
					yy221 := &x.Status
					yy221.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq207[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy222 := &x.Status
					yy222.CodecEncodeSelf(e)
				}
			}
			if yyr207 || yy2arr207 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *InstanceGroup) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym223 := z.DecBinary()
	_ = yym223
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct224 := r.ContainerType()
		if yyct224 == codecSelferValueTypeMap1234 {
			yyl224 := r.ReadMapStart()
			if yyl224 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl224, d)
			}
		} else if yyct224 == codecSelferValueTypeArray1234 {
			yyl224 := r.ReadArrayStart()
			if yyl224 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl224, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *InstanceGroup) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys225Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys225Slc
	var yyhl225 bool = l >= 0
	for yyj225 := 0; ; yyj225++ {
		if yyhl225 {
			if yyj225 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys225Slc = r.DecodeBytes(yys225Slc, true, true)
		yys225 := string(yys225Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys225 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv228 := &x.ObjectMeta
				yyv228.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = InstanceGroupSpec{}
			} else {
				yyv229 := &x.Spec
				yyv229.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = InstanceGroupStatus{}
			} else {
				yyv230 := &x.Status
				yyv230.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys225)
		} // end switch yys225
	} // end for yyj225
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *InstanceGroup) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj231 int
	var yyb231 bool
	var yyhl231 bool = l >= 0
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv234 := &x.ObjectMeta
		yyv234.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = InstanceGroupSpec{}
	} else {
		yyv235 := &x.Spec
		yyv235.CodecDecodeSelf(d)
	}
	yyj231++
	if yyhl231 {
		yyb231 = yyj231 > l
	} else {
		yyb231 = r.CheckBreak()
	}
	if yyb231 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = InstanceGroupStatus{}
	} else {
		yyv236 := &x.Status
		yyv236.CodecDecodeSelf(d)
	}
	for {
		yyj231++
		if yyhl231 {
			yyb231 = yyj231 > l
		} else {
			yyb231 = r.CheckBreak()
		}
		if yyb231 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj231-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *InstanceGroupSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym237 := z.EncBinary()
		_ = yym237
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep238 := !z.EncBinary()
			yy2arr238 := z.EncBasicHandle().StructToArray
			var yyq238 [4]bool
			_, _, _ = yysep238, yyq238, yy2arr238
			const yyr238 bool = false
			yyq238[0] = x.Replicas != 0
			yyq238[1] = x.MinReadySeconds != 0
			yyq238[2] = x.Selector != nil
			yyq238[3] = true
			var yynn238 int
			if yyr238 || yy2arr238 {
				r.EncodeArrayStart(4)
			} else {
				yynn238 = 0
				for _, b := range yyq238 {
					if b {
						yynn238++
					}
				}
				r.EncodeMapStart(yynn238)
				yynn238 = 0
			}
			if yyr238 || yy2arr238 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq238[0] {
					yym240 := z.EncBinary()
					_ = yym240
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq238[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym241 := z.EncBinary()
					_ = yym241
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				}
			}
			if yyr238 || yy2arr238 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq238[1] {
					yym243 := z.EncBinary()
					_ = yym243
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq238[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("minReadySeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym244 := z.EncBinary()
					_ = yym244
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				}
			}
			if yyr238 || yy2arr238 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq238[2] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym246 := z.EncBinary()
						_ = yym246
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq238[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym247 := z.EncBinary()
						_ = yym247
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				}
			}
			if yyr238 || yy2arr238 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq238[3] {
					yy249 := &x.Template
					yy249.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq238[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy250 := &x.Template
					yy250.CodecEncodeSelf(e)
				}
			}
			if yyr238 || yy2arr238 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *InstanceGroupSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym251 := z.DecBinary()
	_ = yym251
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct252 := r.ContainerType()
		if yyct252 == codecSelferValueTypeMap1234 {
			yyl252 := r.ReadMapStart()
			if yyl252 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl252, d)
			}
		} else if yyct252 == codecSelferValueTypeArray1234 {
			yyl252 := r.ReadArrayStart()
			if yyl252 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl252, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *InstanceGroupSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys253Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys253Slc
	var yyhl253 bool = l >= 0
	for yyj253 := 0; ; yyj253++ {
		if yyhl253 {
			if yyj253 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys253Slc = r.DecodeBytes(yys253Slc, true, true)
		yys253 := string(yys253Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys253 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "minReadySeconds":
			if r.TryDecodeAsNil() {
				x.MinReadySeconds = 0
			} else {
				x.MinReadySeconds = int32(r.DecodeInt(32))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(pkg1_unversioned.LabelSelector)
				}
				yym257 := z.DecBinary()
				_ = yym257
				if false {
				} else if z.HasExtensions() && z.DecExt(x.Selector) {
				} else {
					z.DecFallback(x.Selector, false)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = InstanceTemplateSpec{}
			} else {
				yyv258 := &x.Template
				yyv258.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys253)
		} // end switch yys253
	} // end for yyj253
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *InstanceGroupSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj259 int
	var yyb259 bool
	var yyhl259 bool = l >= 0
	yyj259++
	if yyhl259 {
		yyb259 = yyj259 > l
	} else {
		yyb259 = r.CheckBreak()
	}
	if yyb259 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj259++
	if yyhl259 {
		yyb259 = yyj259 > l
	} else {
		yyb259 = r.CheckBreak()
	}
	if yyb259 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MinReadySeconds = 0
	} else {
		x.MinReadySeconds = int32(r.DecodeInt(32))
	}
	yyj259++
	if yyhl259 {
		yyb259 = yyj259 > l
	} else {
		yyb259 = r.CheckBreak()
	}
	if yyb259 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(pkg1_unversioned.LabelSelector)
		}
		yym263 := z.DecBinary()
		_ = yym263
		if false {
		} else if z.HasExtensions() && z.DecExt(x.Selector) {
		} else {
			z.DecFallback(x.Selector, false)
		}
	}
	yyj259++
	if yyhl259 {
		yyb259 = yyj259 > l
	} else {
		yyb259 = r.CheckBreak()
	}
	if yyb259 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = InstanceTemplateSpec{}
	} else {
		yyv264 := &x.Template
		yyv264.CodecDecodeSelf(d)
	}
	for {
		yyj259++
		if yyhl259 {
			yyb259 = yyj259 > l
		} else {
			yyb259 = r.CheckBreak()
		}
		if yyb259 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj259-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x InstanceGroupConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym265 := z.EncBinary()
	_ = yym265
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *InstanceGroupConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym266 := z.DecBinary()
	_ = yym266
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *InstanceGroupCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym267 := z.EncBinary()
		_ = yym267
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep268 := !z.EncBinary()
			yy2arr268 := z.EncBasicHandle().StructToArray
			var yyq268 [5]bool
			_, _, _ = yysep268, yyq268, yy2arr268
			const yyr268 bool = false
			yyq268[2] = true
			yyq268[3] = x.Reason != ""
			yyq268[4] = x.Message != ""
			var yynn268 int
			if yyr268 || yy2arr268 {
				r.EncodeArrayStart(5)
			} else {
				yynn268 = 2
				for _, b := range yyq268 {
					if b {
						yynn268++
					}
				}
				r.EncodeMapStart(yynn268)
				yynn268 = 0
			}
			if yyr268 || yy2arr268 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr268 || yy2arr268 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym271 := z.EncBinary()
				_ = yym271
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Status) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Status))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym272 := z.EncBinary()
				_ = yym272
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Status) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Status))
				}
			}
			if yyr268 || yy2arr268 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq268[2] {
					yy274 := &x.LastTransitionTime
					yym275 := z.EncBinary()
					_ = yym275
					if false {
					} else if z.HasExtensions() && z.EncExt(yy274) {
					} else if yym275 {
						z.EncBinaryMarshal(yy274)
					} else if !yym275 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy274)
					} else {
						z.EncFallback(yy274)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq268[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy276 := &x.LastTransitionTime
					yym277 := z.EncBinary()
					_ = yym277
					if false {
					} else if z.HasExtensions() && z.EncExt(yy276) {
					} else if yym277 {
						z.EncBinaryMarshal(yy276)
					} else if !yym277 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy276)
					} else {
						z.EncFallback(yy276)
					}
				}
			}
			if yyr268 || yy2arr268 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq268[3] {
					yym279 := z.EncBinary()
					_ = yym279
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq268[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym280 := z.EncBinary()
					_ = yym280
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr268 || yy2arr268 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq268[4] {
					yym282 := z.EncBinary()
					_ = yym282
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq268[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym283 := z.EncBinary()
					_ = yym283
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr268 || yy2arr268 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *InstanceGroupCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym284 := z.DecBinary()
	_ = yym284
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct285 := r.ContainerType()
		if yyct285 == codecSelferValueTypeMap1234 {
			yyl285 := r.ReadMapStart()
			if yyl285 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl285, d)
			}
		} else if yyct285 == codecSelferValueTypeArray1234 {
			yyl285 := r.ReadArrayStart()
			if yyl285 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl285, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *InstanceGroupCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys286Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys286Slc
	var yyhl286 bool = l >= 0
	for yyj286 := 0; ; yyj286++ {
		if yyhl286 {
			if yyj286 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys286Slc = r.DecodeBytes(yys286Slc, true, true)
		yys286 := string(yys286Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys286 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = InstanceGroupConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = pkg2_api.ConditionStatus(r.DecodeString())
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg1_unversioned.Time{}
			} else {
				yyv289 := &x.LastTransitionTime
				yym290 := z.DecBinary()
				_ = yym290
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv289) {
				} else if yym290 {
					z.DecBinaryUnmarshal(yyv289)
				} else if !yym290 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv289)
				} else {
					z.DecFallback(yyv289, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys286)
		} // end switch yys286
	} // end for yyj286
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *InstanceGroupCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj293 int
	var yyb293 bool
	var yyhl293 bool = l >= 0
	yyj293++
	if yyhl293 {
		yyb293 = yyj293 > l
	} else {
		yyb293 = r.CheckBreak()
	}
	if yyb293 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = InstanceGroupConditionType(r.DecodeString())
	}
	yyj293++
	if yyhl293 {
		yyb293 = yyj293 > l
	} else {
		yyb293 = r.CheckBreak()
	}
	if yyb293 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = pkg2_api.ConditionStatus(r.DecodeString())
	}
	yyj293++
	if yyhl293 {
		yyb293 = yyj293 > l
	} else {
		yyb293 = r.CheckBreak()
	}
	if yyb293 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg1_unversioned.Time{}
	} else {
		yyv296 := &x.LastTransitionTime
		yym297 := z.DecBinary()
		_ = yym297
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv296) {
		} else if yym297 {
			z.DecBinaryUnmarshal(yyv296)
		} else if !yym297 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv296)
		} else {
			z.DecFallback(yyv296, false)
		}
	}
	yyj293++
	if yyhl293 {
		yyb293 = yyj293 > l
	} else {
		yyb293 = r.CheckBreak()
	}
	if yyb293 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj293++
	if yyhl293 {
		yyb293 = yyj293 > l
	} else {
		yyb293 = r.CheckBreak()
	}
	if yyb293 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj293++
		if yyhl293 {
			yyb293 = yyj293 > l
		} else {
			yyb293 = r.CheckBreak()
		}
		if yyb293 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj293-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *InstanceGroupStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym300 := z.EncBinary()
		_ = yym300
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep301 := !z.EncBinary()
			yy2arr301 := z.EncBasicHandle().StructToArray
			var yyq301 [6]bool
			_, _, _ = yysep301, yyq301, yy2arr301
			const yyr301 bool = false
			yyq301[1] = x.FullyLabeledReplicas != 0
			yyq301[2] = x.ReadyReplicas != 0
			yyq301[3] = x.AvailableReplicas != 0
			yyq301[4] = x.ObservedGeneration != 0
			yyq301[5] = len(x.Conditions) != 0
			var yynn301 int
			if yyr301 || yy2arr301 {
				r.EncodeArrayStart(6)
			} else {
				yynn301 = 1
				for _, b := range yyq301 {
					if b {
						yynn301++
					}
				}
				r.EncodeMapStart(yynn301)
				yynn301 = 0
			}
			if yyr301 || yy2arr301 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym303 := z.EncBinary()
				_ = yym303
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym304 := z.EncBinary()
				_ = yym304
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr301 || yy2arr301 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq301[1] {
					yym306 := z.EncBinary()
					_ = yym306
					if false {
					} else {
						r.EncodeInt(int64(x.FullyLabeledReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq301[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fullyLabeledReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym307 := z.EncBinary()
					_ = yym307
					if false {
					} else {
						r.EncodeInt(int64(x.FullyLabeledReplicas))
					}
				}
			}
			if yyr301 || yy2arr301 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq301[2] {
					yym309 := z.EncBinary()
					_ = yym309
					if false {
					} else {
						r.EncodeInt(int64(x.ReadyReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq301[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readyReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym310 := z.EncBinary()
					_ = yym310
					if false {
					} else {
						r.EncodeInt(int64(x.ReadyReplicas))
					}
				}
			}
			if yyr301 || yy2arr301 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq301[3] {
					yym312 := z.EncBinary()
					_ = yym312
					if false {
					} else {
						r.EncodeInt(int64(x.AvailableReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq301[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("availableReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym313 := z.EncBinary()
					_ = yym313
					if false {
					} else {
						r.EncodeInt(int64(x.AvailableReplicas))
					}
				}
			}
			if yyr301 || yy2arr301 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq301[4] {
					yym315 := z.EncBinary()
					_ = yym315
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq301[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym316 := z.EncBinary()
					_ = yym316
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				}
			}
			if yyr301 || yy2arr301 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq301[5] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym318 := z.EncBinary()
						_ = yym318
						if false {
						} else {
							h.encSliceInstanceGroupCondition(([]InstanceGroupCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq301[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym319 := z.EncBinary()
						_ = yym319
						if false {
						} else {
							h.encSliceInstanceGroupCondition(([]InstanceGroupCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr301 || yy2arr301 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *InstanceGroupStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym320 := z.DecBinary()
	_ = yym320
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct321 := r.ContainerType()
		if yyct321 == codecSelferValueTypeMap1234 {
			yyl321 := r.ReadMapStart()
			if yyl321 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl321, d)
			}
		} else if yyct321 == codecSelferValueTypeArray1234 {
			yyl321 := r.ReadArrayStart()
			if yyl321 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl321, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *InstanceGroupStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys322Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys322Slc
	var yyhl322 bool = l >= 0
	for yyj322 := 0; ; yyj322++ {
		if yyhl322 {
			if yyj322 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys322Slc = r.DecodeBytes(yys322Slc, true, true)
		yys322 := string(yys322Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys322 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "fullyLabeledReplicas":
			if r.TryDecodeAsNil() {
				x.FullyLabeledReplicas = 0
			} else {
				x.FullyLabeledReplicas = int32(r.DecodeInt(32))
			}
		case "readyReplicas":
			if r.TryDecodeAsNil() {
				x.ReadyReplicas = 0
			} else {
				x.ReadyReplicas = int32(r.DecodeInt(32))
			}
		case "availableReplicas":
			if r.TryDecodeAsNil() {
				x.AvailableReplicas = 0
			} else {
				x.AvailableReplicas = int32(r.DecodeInt(32))
			}
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				x.ObservedGeneration = 0
			} else {
				x.ObservedGeneration = int64(r.DecodeInt(64))
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv328 := &x.Conditions
				yym329 := z.DecBinary()
				_ = yym329
				if false {
				} else {
					h.decSliceInstanceGroupCondition((*[]InstanceGroupCondition)(yyv328), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys322)
		} // end switch yys322
	} // end for yyj322
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *InstanceGroupStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj330 int
	var yyb330 bool
	var yyhl330 bool = l >= 0
	yyj330++
	if yyhl330 {
		yyb330 = yyj330 > l
	} else {
		yyb330 = r.CheckBreak()
	}
	if yyb330 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj330++
	if yyhl330 {
		yyb330 = yyj330 > l
	} else {
		yyb330 = r.CheckBreak()
	}
	if yyb330 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FullyLabeledReplicas = 0
	} else {
		x.FullyLabeledReplicas = int32(r.DecodeInt(32))
	}
	yyj330++
	if yyhl330 {
		yyb330 = yyj330 > l
	} else {
		yyb330 = r.CheckBreak()
	}
	if yyb330 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadyReplicas = 0
	} else {
		x.ReadyReplicas = int32(r.DecodeInt(32))
	}
	yyj330++
	if yyhl330 {
		yyb330 = yyj330 > l
	} else {
		yyb330 = r.CheckBreak()
	}
	if yyb330 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AvailableReplicas = 0
	} else {
		x.AvailableReplicas = int32(r.DecodeInt(32))
	}
	yyj330++
	if yyhl330 {
		yyb330 = yyj330 > l
	} else {
		yyb330 = r.CheckBreak()
	}
	if yyb330 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObservedGeneration = 0
	} else {
		x.ObservedGeneration = int64(r.DecodeInt(64))
	}
	yyj330++
	if yyhl330 {
		yyb330 = yyj330 > l
	} else {
		yyb330 = r.CheckBreak()
	}
	if yyb330 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv336 := &x.Conditions
		yym337 := z.DecBinary()
		_ = yym337
		if false {
		} else {
			h.decSliceInstanceGroupCondition((*[]InstanceGroupCondition)(yyv336), d)
		}
	}
	for {
		yyj330++
		if yyhl330 {
			yyb330 = yyj330 > l
		} else {
			yyb330 = r.CheckBreak()
		}
		if yyb330 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj330-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *InstanceGroupList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym338 := z.EncBinary()
		_ = yym338
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep339 := !z.EncBinary()
			yy2arr339 := z.EncBasicHandle().StructToArray
			var yyq339 [4]bool
			_, _, _ = yysep339, yyq339, yy2arr339
			const yyr339 bool = false
			yyq339[0] = x.Kind != ""
			yyq339[1] = x.APIVersion != ""
			var yynn339 int
			if yyr339 || yy2arr339 {
				r.EncodeArrayStart(4)
			} else {
				yynn339 = 2
				for _, b := range yyq339 {
					if b {
						yynn339++
					}
				}
				r.EncodeMapStart(yynn339)
				yynn339 = 0
			}
			if yyr339 || yy2arr339 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq339[0] {
					yym341 := z.EncBinary()
					_ = yym341
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq339[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym342 := z.EncBinary()
					_ = yym342
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr339 || yy2arr339 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq339[1] {
					yym344 := z.EncBinary()
					_ = yym344
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq339[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym345 := z.EncBinary()
					_ = yym345
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr339 || yy2arr339 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy347 := &x.ListMeta
				yym348 := z.EncBinary()
				_ = yym348
				if false {
				} else if z.HasExtensions() && z.EncExt(yy347) {
				} else {
					z.EncFallback(yy347)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("metadata"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy349 := &x.ListMeta
				yym350 := z.EncBinary()
				_ = yym350
				if false {
				} else if z.HasExtensions() && z.EncExt(yy349) {
				} else {
					z.EncFallback(yy349)
				}
			}
			if yyr339 || yy2arr339 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym352 := z.EncBinary()
					_ = yym352
					if false {
					} else {
						h.encSlicePtrtoInstanceGroup(([]*InstanceGroup)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym353 := z.EncBinary()
					_ = yym353
					if false {
					} else {
						h.encSlicePtrtoInstanceGroup(([]*InstanceGroup)(x.Items), e)
					}
				}
			}
			if yyr339 || yy2arr339 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *InstanceGroupList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym354 := z.DecBinary()
	_ = yym354
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct355 := r.ContainerType()
		if yyct355 == codecSelferValueTypeMap1234 {
			yyl355 := r.ReadMapStart()
			if yyl355 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl355, d)
			}
		} else if yyct355 == codecSelferValueTypeArray1234 {
			yyl355 := r.ReadArrayStart()
			if yyl355 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl355, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *InstanceGroupList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys356Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys356Slc
	var yyhl356 bool = l >= 0
	for yyj356 := 0; ; yyj356++ {
		if yyhl356 {
			if yyj356 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys356Slc = r.DecodeBytes(yys356Slc, true, true)
		yys356 := string(yys356Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys356 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv359 := &x.ListMeta
				yym360 := z.DecBinary()
				_ = yym360
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv359) {
				} else {
					z.DecFallback(yyv359, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv361 := &x.Items
				yym362 := z.DecBinary()
				_ = yym362
				if false {
				} else {
					h.decSlicePtrtoInstanceGroup((*[]*InstanceGroup)(yyv361), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys356)
		} // end switch yys356
	} // end for yyj356
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *InstanceGroupList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj363 int
	var yyb363 bool
	var yyhl363 bool = l >= 0
	yyj363++
	if yyhl363 {
		yyb363 = yyj363 > l
	} else {
		yyb363 = r.CheckBreak()
	}
	if yyb363 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj363++
	if yyhl363 {
		yyb363 = yyj363 > l
	} else {
		yyb363 = r.CheckBreak()
	}
	if yyb363 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj363++
	if yyhl363 {
		yyb363 = yyj363 > l
	} else {
		yyb363 = r.CheckBreak()
	}
	if yyb363 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv366 := &x.ListMeta
		yym367 := z.DecBinary()
		_ = yym367
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv366) {
		} else {
			z.DecFallback(yyv366, false)
		}
	}
	yyj363++
	if yyhl363 {
		yyb363 = yyj363 > l
	} else {
		yyb363 = r.CheckBreak()
	}
	if yyb363 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv368 := &x.Items
		yym369 := z.DecBinary()
		_ = yym369
		if false {
		} else {
			h.decSlicePtrtoInstanceGroup((*[]*InstanceGroup)(yyv368), d)
		}
	}
	for {
		yyj363++
		if yyhl363 {
			yyb363 = yyj363 > l
		} else {
			yyb363 = r.CheckBreak()
		}
		if yyb363 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj363-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FileSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym370 := z.EncBinary()
		_ = yym370
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep371 := !z.EncBinary()
			yy2arr371 := z.EncBasicHandle().StructToArray
			var yyq371 [7]bool
			_, _, _ = yysep371, yyq371, yy2arr371
			const yyr371 bool = false
			yyq371[0] = x.Name != ""
			yyq371[1] = x.Encoding != ""
			yyq371[2] = x.Content != ""
			yyq371[3] = x.Template != ""
			yyq371[4] = x.Owner != ""
			yyq371[5] = x.Path != ""
			yyq371[6] = x.RawFilePermissions != ""
			var yynn371 int
			if yyr371 || yy2arr371 {
				r.EncodeArrayStart(7)
			} else {
				yynn371 = 0
				for _, b := range yyq371 {
					if b {
						yynn371++
					}
				}
				r.EncodeMapStart(yynn371)
				yynn371 = 0
			}
			if yyr371 || yy2arr371 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq371[0] {
					yym373 := z.EncBinary()
					_ = yym373
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq371[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym374 := z.EncBinary()
					_ = yym374
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr371 || yy2arr371 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq371[1] {
					yym376 := z.EncBinary()
					_ = yym376
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Encoding))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq371[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("encoding"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym377 := z.EncBinary()
					_ = yym377
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Encoding))
					}
				}
			}
			if yyr371 || yy2arr371 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq371[2] {
					yym379 := z.EncBinary()
					_ = yym379
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Content))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq371[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("content"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym380 := z.EncBinary()
					_ = yym380
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Content))
					}
				}
			}
			if yyr371 || yy2arr371 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq371[3] {
					yym382 := z.EncBinary()
					_ = yym382
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Template))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq371[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym383 := z.EncBinary()
					_ = yym383
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Template))
					}
				}
			}
			if yyr371 || yy2arr371 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq371[4] {
					yym385 := z.EncBinary()
					_ = yym385
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Owner))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq371[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("owner"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym386 := z.EncBinary()
					_ = yym386
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Owner))
					}
				}
			}
			if yyr371 || yy2arr371 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq371[5] {
					yym388 := z.EncBinary()
					_ = yym388
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq371[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym389 := z.EncBinary()
					_ = yym389
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr371 || yy2arr371 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq371[6] {
					yym391 := z.EncBinary()
					_ = yym391
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RawFilePermissions))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq371[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("permissions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym392 := z.EncBinary()
					_ = yym392
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RawFilePermissions))
					}
				}
			}
			if yyr371 || yy2arr371 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FileSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym393 := z.DecBinary()
	_ = yym393
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct394 := r.ContainerType()
		if yyct394 == codecSelferValueTypeMap1234 {
			yyl394 := r.ReadMapStart()
			if yyl394 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl394, d)
			}
		} else if yyct394 == codecSelferValueTypeArray1234 {
			yyl394 := r.ReadArrayStart()
			if yyl394 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl394, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FileSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys395Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys395Slc
	var yyhl395 bool = l >= 0
	for yyj395 := 0; ; yyj395++ {
		if yyhl395 {
			if yyj395 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys395Slc = r.DecodeBytes(yys395Slc, true, true)
		yys395 := string(yys395Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys395 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "encoding":
			if r.TryDecodeAsNil() {
				x.Encoding = ""
			} else {
				x.Encoding = string(r.DecodeString())
			}
		case "content":
			if r.TryDecodeAsNil() {
				x.Content = ""
			} else {
				x.Content = string(r.DecodeString())
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = ""
			} else {
				x.Template = string(r.DecodeString())
			}
		case "owner":
			if r.TryDecodeAsNil() {
				x.Owner = ""
			} else {
				x.Owner = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "permissions":
			if r.TryDecodeAsNil() {
				x.RawFilePermissions = ""
			} else {
				x.RawFilePermissions = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys395)
		} // end switch yys395
	} // end for yyj395
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FileSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj403 int
	var yyb403 bool
	var yyhl403 bool = l >= 0
	yyj403++
	if yyhl403 {
		yyb403 = yyj403 > l
	} else {
		yyb403 = r.CheckBreak()
	}
	if yyb403 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj403++
	if yyhl403 {
		yyb403 = yyj403 > l
	} else {
		yyb403 = r.CheckBreak()
	}
	if yyb403 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Encoding = ""
	} else {
		x.Encoding = string(r.DecodeString())
	}
	yyj403++
	if yyhl403 {
		yyb403 = yyj403 > l
	} else {
		yyb403 = r.CheckBreak()
	}
	if yyb403 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Content = ""
	} else {
		x.Content = string(r.DecodeString())
	}
	yyj403++
	if yyhl403 {
		yyb403 = yyj403 > l
	} else {
		yyb403 = r.CheckBreak()
	}
	if yyb403 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = ""
	} else {
		x.Template = string(r.DecodeString())
	}
	yyj403++
	if yyhl403 {
		yyb403 = yyj403 > l
	} else {
		yyb403 = r.CheckBreak()
	}
	if yyb403 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Owner = ""
	} else {
		x.Owner = string(r.DecodeString())
	}
	yyj403++
	if yyhl403 {
		yyb403 = yyj403 > l
	} else {
		yyb403 = r.CheckBreak()
	}
	if yyb403 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj403++
	if yyhl403 {
		yyb403 = yyj403 > l
	} else {
		yyb403 = r.CheckBreak()
	}
	if yyb403 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RawFilePermissions = ""
	} else {
		x.RawFilePermissions = string(r.DecodeString())
	}
	for {
		yyj403++
		if yyhl403 {
			yyb403 = yyj403 > l
		} else {
			yyb403 = r.CheckBreak()
		}
		if yyb403 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj403-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *InstanceTemplateSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym411 := z.EncBinary()
		_ = yym411
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep412 := !z.EncBinary()
			yy2arr412 := z.EncBasicHandle().StructToArray
			var yyq412 [3]bool
			_, _, _ = yysep412, yyq412, yy2arr412
			const yyr412 bool = false
			yyq412[1] = true
			yyq412[2] = len(x.Secrets) != 0
			var yynn412 int
			if yyr412 || yy2arr412 {
				r.EncodeArrayStart(3)
			} else {
				yynn412 = 1
				for _, b := range yyq412 {
					if b {
						yynn412++
					}
				}
				r.EncodeMapStart(yynn412)
				yynn412 = 0
			}
			if yyr412 || yy2arr412 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy414 := &x.ObjectMeta
				yy414.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("metadata"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy415 := &x.ObjectMeta
				yy415.CodecEncodeSelf(e)
			}
			if yyr412 || yy2arr412 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq412[1] {
					yy417 := &x.Spec
					yy417.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq412[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy418 := &x.Spec
					yy418.CodecEncodeSelf(e)
				}
			}
			if yyr412 || yy2arr412 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq412[2] {
					if x.Secrets == nil {
						r.EncodeNil()
					} else {
						yym420 := z.EncBinary()
						_ = yym420
						if false {
						} else {
							h.encSliceapi_Secret(([]pkg2_api.Secret)(x.Secrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq412[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Secrets == nil {
						r.EncodeNil()
					} else {
						yym421 := z.EncBinary()
						_ = yym421
						if false {
						} else {
							h.encSliceapi_Secret(([]pkg2_api.Secret)(x.Secrets), e)
						}
					}
				}
			}
			if yyr412 || yy2arr412 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *InstanceTemplateSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym422 := z.DecBinary()
	_ = yym422
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct423 := r.ContainerType()
		if yyct423 == codecSelferValueTypeMap1234 {
			yyl423 := r.ReadMapStart()
			if yyl423 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl423, d)
			}
		} else if yyct423 == codecSelferValueTypeArray1234 {
			yyl423 := r.ReadArrayStart()
			if yyl423 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl423, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *InstanceTemplateSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys424Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys424Slc
	var yyhl424 bool = l >= 0
	for yyj424 := 0; ; yyj424++ {
		if yyhl424 {
			if yyj424 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys424Slc = r.DecodeBytes(yys424Slc, true, true)
		yys424 := string(yys424Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys424 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv425 := &x.ObjectMeta
				yyv425.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = InstanceSpec{}
			} else {
				yyv426 := &x.Spec
				yyv426.CodecDecodeSelf(d)
			}
		case "secrets":
			if r.TryDecodeAsNil() {
				x.Secrets = nil
			} else {
				yyv427 := &x.Secrets
				yym428 := z.DecBinary()
				_ = yym428
				if false {
				} else {
					h.decSliceapi_Secret((*[]pkg2_api.Secret)(yyv427), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys424)
		} // end switch yys424
	} // end for yyj424
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *InstanceTemplateSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj429 int
	var yyb429 bool
	var yyhl429 bool = l >= 0
	yyj429++
	if yyhl429 {
		yyb429 = yyj429 > l
	} else {
		yyb429 = r.CheckBreak()
	}
	if yyb429 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv430 := &x.ObjectMeta
		yyv430.CodecDecodeSelf(d)
	}
	yyj429++
	if yyhl429 {
		yyb429 = yyj429 > l
	} else {
		yyb429 = r.CheckBreak()
	}
	if yyb429 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = InstanceSpec{}
	} else {
		yyv431 := &x.Spec
		yyv431.CodecDecodeSelf(d)
	}
	yyj429++
	if yyhl429 {
		yyb429 = yyj429 > l
	} else {
		yyb429 = r.CheckBreak()
	}
	if yyb429 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Secrets = nil
	} else {
		yyv432 := &x.Secrets
		yym433 := z.DecBinary()
		_ = yym433
		if false {
		} else {
			h.decSliceapi_Secret((*[]pkg2_api.Secret)(yyv432), d)
		}
	}
	for {
		yyj429++
		if yyhl429 {
			yyb429 = yyj429 > l
		} else {
			yyb429 = r.CheckBreak()
		}
		if yyb429 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj429-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *InstanceOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym434 := z.EncBinary()
		_ = yym434
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep435 := !z.EncBinary()
			yy2arr435 := z.EncBasicHandle().StructToArray
			var yyq435 [2]bool
			_, _, _ = yysep435, yyq435, yy2arr435
			const yyr435 bool = false
			var yynn435 int
			if yyr435 || yy2arr435 {
				r.EncodeArrayStart(2)
			} else {
				yynn435 = 2
				for _, b := range yyq435 {
					if b {
						yynn435++
					}
				}
				r.EncodeMapStart(yynn435)
				yynn435 = 0
			}
			if yyr435 || yy2arr435 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym437 := z.EncBinary()
				_ = yym437
				if false {
				} else {
					r.EncodeBool(bool(x.PreallocatePublicIP))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("PreallocatePublicIP"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym438 := z.EncBinary()
				_ = yym438
				if false {
				} else {
					r.EncodeBool(bool(x.PreallocatePublicIP))
				}
			}
			if yyr435 || yy2arr435 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym440 := z.EncBinary()
				_ = yym440
				if false {
				} else {
					r.EncodeBool(bool(x.PreallocatePrivateIP))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("PreallocatePrivateIP"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym441 := z.EncBinary()
				_ = yym441
				if false {
				} else {
					r.EncodeBool(bool(x.PreallocatePrivateIP))
				}
			}
			if yyr435 || yy2arr435 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *InstanceOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym442 := z.DecBinary()
	_ = yym442
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct443 := r.ContainerType()
		if yyct443 == codecSelferValueTypeMap1234 {
			yyl443 := r.ReadMapStart()
			if yyl443 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl443, d)
			}
		} else if yyct443 == codecSelferValueTypeArray1234 {
			yyl443 := r.ReadArrayStart()
			if yyl443 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl443, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *InstanceOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys444Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys444Slc
	var yyhl444 bool = l >= 0
	for yyj444 := 0; ; yyj444++ {
		if yyhl444 {
			if yyj444 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys444Slc = r.DecodeBytes(yys444Slc, true, true)
		yys444 := string(yys444Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys444 {
		case "PreallocatePublicIP":
			if r.TryDecodeAsNil() {
				x.PreallocatePublicIP = false
			} else {
				x.PreallocatePublicIP = bool(r.DecodeBool())
			}
		case "PreallocatePrivateIP":
			if r.TryDecodeAsNil() {
				x.PreallocatePrivateIP = false
			} else {
				x.PreallocatePrivateIP = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys444)
		} // end switch yys444
	} // end for yyj444
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *InstanceOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj447 int
	var yyb447 bool
	var yyhl447 bool = l >= 0
	yyj447++
	if yyhl447 {
		yyb447 = yyj447 > l
	} else {
		yyb447 = r.CheckBreak()
	}
	if yyb447 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreallocatePublicIP = false
	} else {
		x.PreallocatePublicIP = bool(r.DecodeBool())
	}
	yyj447++
	if yyhl447 {
		yyb447 = yyj447 > l
	} else {
		yyb447 = r.CheckBreak()
	}
	if yyb447 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreallocatePrivateIP = false
	} else {
		x.PreallocatePrivateIP = bool(r.DecodeBool())
	}
	for {
		yyj447++
		if yyhl447 {
			yyb447 = yyj447 > l
		} else {
			yyb447 = r.CheckBreak()
		}
		if yyb447 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj447-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *InstanceDependency) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym450 := z.EncBinary()
		_ = yym450
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep451 := !z.EncBinary()
			yy2arr451 := z.EncBasicHandle().StructToArray
			var yyq451 [3]bool
			_, _, _ = yysep451, yyq451, yy2arr451
			const yyr451 bool = false
			yyq451[0] = true
			yyq451[1] = len(x.Secrets) != 0
			yyq451[2] = len(x.Users) != 0
			var yynn451 int
			if yyr451 || yy2arr451 {
				r.EncodeArrayStart(3)
			} else {
				yynn451 = 0
				for _, b := range yyq451 {
					if b {
						yynn451++
					}
				}
				r.EncodeMapStart(yynn451)
				yynn451 = 0
			}
			if yyr451 || yy2arr451 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq451[0] {
					yy453 := &x.Network
					yy453.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq451[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("network"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy454 := &x.Network
					yy454.CodecEncodeSelf(e)
				}
			}
			if yyr451 || yy2arr451 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq451[1] {
					if x.Secrets == nil {
						r.EncodeNil()
					} else {
						yym456 := z.EncBinary()
						_ = yym456
						if false {
						} else {
							h.encSliceapi_Secret(([]pkg2_api.Secret)(x.Secrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq451[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Secrets == nil {
						r.EncodeNil()
					} else {
						yym457 := z.EncBinary()
						_ = yym457
						if false {
						} else {
							h.encSliceapi_Secret(([]pkg2_api.Secret)(x.Secrets), e)
						}
					}
				}
			}
			if yyr451 || yy2arr451 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq451[2] {
					if x.Users == nil {
						r.EncodeNil()
					} else {
						yym459 := z.EncBinary()
						_ = yym459
						if false {
						} else {
							h.encSliceUser(([]User)(x.Users), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq451[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("users"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Users == nil {
						r.EncodeNil()
					} else {
						yym460 := z.EncBinary()
						_ = yym460
						if false {
						} else {
							h.encSliceUser(([]User)(x.Users), e)
						}
					}
				}
			}
			if yyr451 || yy2arr451 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *InstanceDependency) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym461 := z.DecBinary()
	_ = yym461
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct462 := r.ContainerType()
		if yyct462 == codecSelferValueTypeMap1234 {
			yyl462 := r.ReadMapStart()
			if yyl462 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl462, d)
			}
		} else if yyct462 == codecSelferValueTypeArray1234 {
			yyl462 := r.ReadArrayStart()
			if yyl462 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl462, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *InstanceDependency) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys463Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys463Slc
	var yyhl463 bool = l >= 0
	for yyj463 := 0; ; yyj463++ {
		if yyhl463 {
			if yyj463 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys463Slc = r.DecodeBytes(yys463Slc, true, true)
		yys463 := string(yys463Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys463 {
		case "network":
			if r.TryDecodeAsNil() {
				x.Network = Network{}
			} else {
				yyv464 := &x.Network
				yyv464.CodecDecodeSelf(d)
			}
		case "secrets":
			if r.TryDecodeAsNil() {
				x.Secrets = nil
			} else {
				yyv465 := &x.Secrets
				yym466 := z.DecBinary()
				_ = yym466
				if false {
				} else {
					h.decSliceapi_Secret((*[]pkg2_api.Secret)(yyv465), d)
				}
			}
		case "users":
			if r.TryDecodeAsNil() {
				x.Users = nil
			} else {
				yyv467 := &x.Users
				yym468 := z.DecBinary()
				_ = yym468
				if false {
				} else {
					h.decSliceUser((*[]User)(yyv467), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys463)
		} // end switch yys463
	} // end for yyj463
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *InstanceDependency) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj469 int
	var yyb469 bool
	var yyhl469 bool = l >= 0
	yyj469++
	if yyhl469 {
		yyb469 = yyj469 > l
	} else {
		yyb469 = r.CheckBreak()
	}
	if yyb469 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Network = Network{}
	} else {
		yyv470 := &x.Network
		yyv470.CodecDecodeSelf(d)
	}
	yyj469++
	if yyhl469 {
		yyb469 = yyj469 > l
	} else {
		yyb469 = r.CheckBreak()
	}
	if yyb469 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Secrets = nil
	} else {
		yyv471 := &x.Secrets
		yym472 := z.DecBinary()
		_ = yym472
		if false {
		} else {
			h.decSliceapi_Secret((*[]pkg2_api.Secret)(yyv471), d)
		}
	}
	yyj469++
	if yyhl469 {
		yyb469 = yyj469 > l
	} else {
		yyb469 = r.CheckBreak()
	}
	if yyb469 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Users = nil
	} else {
		yyv473 := &x.Users
		yym474 := z.DecBinary()
		_ = yym474
		if false {
		} else {
			h.decSliceUser((*[]User)(yyv473), d)
		}
	}
	for {
		yyj469++
		if yyhl469 {
			yyb469 = yyj469 > l
		} else {
			yyb469 = r.CheckBreak()
		}
		if yyb469 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj469-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Instance) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym475 := z.EncBinary()
		_ = yym475
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep476 := !z.EncBinary()
			yy2arr476 := z.EncBasicHandle().StructToArray
			var yyq476 [5]bool
			_, _, _ = yysep476, yyq476, yy2arr476
			const yyr476 bool = false
			yyq476[0] = x.Kind != ""
			yyq476[1] = x.APIVersion != ""
			yyq476[3] = true
			yyq476[4] = true
			var yynn476 int
			if yyr476 || yy2arr476 {
				r.EncodeArrayStart(5)
			} else {
				yynn476 = 1
				for _, b := range yyq476 {
					if b {
						yynn476++
					}
				}
				r.EncodeMapStart(yynn476)
				yynn476 = 0
			}
			if yyr476 || yy2arr476 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq476[0] {
					yym478 := z.EncBinary()
					_ = yym478
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq476[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym479 := z.EncBinary()
					_ = yym479
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr476 || yy2arr476 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq476[1] {
					yym481 := z.EncBinary()
					_ = yym481
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq476[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym482 := z.EncBinary()
					_ = yym482
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr476 || yy2arr476 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy484 := &x.ObjectMeta
				yy484.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("metadata"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy485 := &x.ObjectMeta
				yy485.CodecEncodeSelf(e)
			}
			if yyr476 || yy2arr476 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq476[3] {
					yy487 := &x.Spec
					yy487.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq476[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy488 := &x.Spec
					yy488.CodecEncodeSelf(e)
				}
			}
			if yyr476 || yy2arr476 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq476[4] {
					yy490 := &x.Status
					yy490.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq476[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy491 := &x.Status
					yy491.CodecEncodeSelf(e)
				}
			}
			if yyr476 || yy2arr476 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Instance) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym492 := z.DecBinary()
	_ = yym492
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct493 := r.ContainerType()
		if yyct493 == codecSelferValueTypeMap1234 {
			yyl493 := r.ReadMapStart()
			if yyl493 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl493, d)
			}
		} else if yyct493 == codecSelferValueTypeArray1234 {
			yyl493 := r.ReadArrayStart()
			if yyl493 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl493, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Instance) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys494Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys494Slc
	var yyhl494 bool = l >= 0
	for yyj494 := 0; ; yyj494++ {
		if yyhl494 {
			if yyj494 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys494Slc = r.DecodeBytes(yys494Slc, true, true)
		yys494 := string(yys494Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys494 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv497 := &x.ObjectMeta
				yyv497.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = InstanceSpec{}
			} else {
				yyv498 := &x.Spec
				yyv498.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = InstanceStatus{}
			} else {
				yyv499 := &x.Status
				yyv499.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys494)
		} // end switch yys494
	} // end for yyj494
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Instance) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj500 int
	var yyb500 bool
	var yyhl500 bool = l >= 0
	yyj500++
	if yyhl500 {
		yyb500 = yyj500 > l
	} else {
		yyb500 = r.CheckBreak()
	}
	if yyb500 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj500++
	if yyhl500 {
		yyb500 = yyj500 > l
	} else {
		yyb500 = r.CheckBreak()
	}
	if yyb500 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj500++
	if yyhl500 {
		yyb500 = yyj500 > l
	} else {
		yyb500 = r.CheckBreak()
	}
	if yyb500 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv503 := &x.ObjectMeta
		yyv503.CodecDecodeSelf(d)
	}
	yyj500++
	if yyhl500 {
		yyb500 = yyj500 > l
	} else {
		yyb500 = r.CheckBreak()
	}
	if yyb500 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = InstanceSpec{}
	} else {
		yyv504 := &x.Spec
		yyv504.CodecDecodeSelf(d)
	}
	yyj500++
	if yyhl500 {
		yyb500 = yyj500 > l
	} else {
		yyb500 = r.CheckBreak()
	}
	if yyb500 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = InstanceStatus{}
	} else {
		yyv505 := &x.Status
		yyv505.CodecDecodeSelf(d)
	}
	for {
		yyj500++
		if yyhl500 {
			yyb500 = yyj500 > l
		} else {
			yyb500 = r.CheckBreak()
		}
		if yyb500 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj500-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *InstanceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym506 := z.EncBinary()
		_ = yym506
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep507 := !z.EncBinary()
			yy2arr507 := z.EncBasicHandle().StructToArray
			var yyq507 [8]bool
			_, _, _ = yysep507, yyq507, yy2arr507
			const yyr507 bool = false
			yyq507[0] = x.Image != ""
			yyq507[1] = x.InstanceType != ""
			yyq507[2] = x.NetworkName != ""
			yyq507[3] = len(x.Files) != 0
			yyq507[4] = len(x.Secrets) != 0
			yyq507[5] = len(x.Configs) != 0
			yyq507[6] = len(x.Users) != 0
			yyq507[7] = x.Hostname != ""
			var yynn507 int
			if yyr507 || yy2arr507 {
				r.EncodeArrayStart(8)
			} else {
				yynn507 = 0
				for _, b := range yyq507 {
					if b {
						yynn507++
					}
				}
				r.EncodeMapStart(yynn507)
				yynn507 = 0
			}
			if yyr507 || yy2arr507 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq507[0] {
					yym509 := z.EncBinary()
					_ = yym509
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Image))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq507[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("image"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym510 := z.EncBinary()
					_ = yym510
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Image))
					}
				}
			}
			if yyr507 || yy2arr507 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq507[1] {
					yym512 := z.EncBinary()
					_ = yym512
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.InstanceType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq507[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("instanceType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym513 := z.EncBinary()
					_ = yym513
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.InstanceType))
					}
				}
			}
			if yyr507 || yy2arr507 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq507[2] {
					yym515 := z.EncBinary()
					_ = yym515
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NetworkName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq507[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("networkName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym516 := z.EncBinary()
					_ = yym516
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NetworkName))
					}
				}
			}
			if yyr507 || yy2arr507 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq507[3] {
					if x.Files == nil {
						r.EncodeNil()
					} else {
						yym518 := z.EncBinary()
						_ = yym518
						if false {
						} else {
							h.encSliceFileSpec(([]FileSpec)(x.Files), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq507[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("files"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Files == nil {
						r.EncodeNil()
					} else {
						yym519 := z.EncBinary()
						_ = yym519
						if false {
						} else {
							h.encSliceFileSpec(([]FileSpec)(x.Files), e)
						}
					}
				}
			}
			if yyr507 || yy2arr507 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq507[4] {
					if x.Secrets == nil {
						r.EncodeNil()
					} else {
						yym521 := z.EncBinary()
						_ = yym521
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.Secrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq507[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Secrets == nil {
						r.EncodeNil()
					} else {
						yym522 := z.EncBinary()
						_ = yym522
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.Secrets), e)
						}
					}
				}
			}
			if yyr507 || yy2arr507 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq507[5] {
					if x.Configs == nil {
						r.EncodeNil()
					} else {
						yym524 := z.EncBinary()
						_ = yym524
						if false {
						} else {
							h.encSliceConfigSpec(([]ConfigSpec)(x.Configs), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq507[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Configs == nil {
						r.EncodeNil()
					} else {
						yym525 := z.EncBinary()
						_ = yym525
						if false {
						} else {
							h.encSliceConfigSpec(([]ConfigSpec)(x.Configs), e)
						}
					}
				}
			}
			if yyr507 || yy2arr507 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq507[6] {
					if x.Users == nil {
						r.EncodeNil()
					} else {
						yym527 := z.EncBinary()
						_ = yym527
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.Users), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq507[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("users"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Users == nil {
						r.EncodeNil()
					} else {
						yym528 := z.EncBinary()
						_ = yym528
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.Users), e)
						}
					}
				}
			}
			if yyr507 || yy2arr507 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq507[7] {
					yym530 := z.EncBinary()
					_ = yym530
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq507[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym531 := z.EncBinary()
					_ = yym531
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr507 || yy2arr507 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *InstanceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym532 := z.DecBinary()
	_ = yym532
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct533 := r.ContainerType()
		if yyct533 == codecSelferValueTypeMap1234 {
			yyl533 := r.ReadMapStart()
			if yyl533 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl533, d)
			}
		} else if yyct533 == codecSelferValueTypeArray1234 {
			yyl533 := r.ReadArrayStart()
			if yyl533 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl533, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *InstanceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys534Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys534Slc
	var yyhl534 bool = l >= 0
	for yyj534 := 0; ; yyj534++ {
		if yyhl534 {
			if yyj534 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys534Slc = r.DecodeBytes(yys534Slc, true, true)
		yys534 := string(yys534Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys534 {
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "instanceType":
			if r.TryDecodeAsNil() {
				x.InstanceType = ""
			} else {
				x.InstanceType = string(r.DecodeString())
			}
		case "networkName":
			if r.TryDecodeAsNil() {
				x.NetworkName = ""
			} else {
				x.NetworkName = string(r.DecodeString())
			}
		case "files":
			if r.TryDecodeAsNil() {
				x.Files = nil
			} else {
				yyv538 := &x.Files
				yym539 := z.DecBinary()
				_ = yym539
				if false {
				} else {
					h.decSliceFileSpec((*[]FileSpec)(yyv538), d)
				}
			}
		case "secrets":
			if r.TryDecodeAsNil() {
				x.Secrets = nil
			} else {
				yyv540 := &x.Secrets
				yym541 := z.DecBinary()
				_ = yym541
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv540), d)
				}
			}
		case "configs":
			if r.TryDecodeAsNil() {
				x.Configs = nil
			} else {
				yyv542 := &x.Configs
				yym543 := z.DecBinary()
				_ = yym543
				if false {
				} else {
					h.decSliceConfigSpec((*[]ConfigSpec)(yyv542), d)
				}
			}
		case "users":
			if r.TryDecodeAsNil() {
				x.Users = nil
			} else {
				yyv544 := &x.Users
				yym545 := z.DecBinary()
				_ = yym545
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv544), d)
				}
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys534)
		} // end switch yys534
	} // end for yyj534
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *InstanceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj547 int
	var yyb547 bool
	var yyhl547 bool = l >= 0
	yyj547++
	if yyhl547 {
		yyb547 = yyj547 > l
	} else {
		yyb547 = r.CheckBreak()
	}
	if yyb547 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj547++
	if yyhl547 {
		yyb547 = yyj547 > l
	} else {
		yyb547 = r.CheckBreak()
	}
	if yyb547 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InstanceType = ""
	} else {
		x.InstanceType = string(r.DecodeString())
	}
	yyj547++
	if yyhl547 {
		yyb547 = yyj547 > l
	} else {
		yyb547 = r.CheckBreak()
	}
	if yyb547 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NetworkName = ""
	} else {
		x.NetworkName = string(r.DecodeString())
	}
	yyj547++
	if yyhl547 {
		yyb547 = yyj547 > l
	} else {
		yyb547 = r.CheckBreak()
	}
	if yyb547 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Files = nil
	} else {
		yyv551 := &x.Files
		yym552 := z.DecBinary()
		_ = yym552
		if false {
		} else {
			h.decSliceFileSpec((*[]FileSpec)(yyv551), d)
		}
	}
	yyj547++
	if yyhl547 {
		yyb547 = yyj547 > l
	} else {
		yyb547 = r.CheckBreak()
	}
	if yyb547 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Secrets = nil
	} else {
		yyv553 := &x.Secrets
		yym554 := z.DecBinary()
		_ = yym554
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv553), d)
		}
	}
	yyj547++
	if yyhl547 {
		yyb547 = yyj547 > l
	} else {
		yyb547 = r.CheckBreak()
	}
	if yyb547 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Configs = nil
	} else {
		yyv555 := &x.Configs
		yym556 := z.DecBinary()
		_ = yym556
		if false {
		} else {
			h.decSliceConfigSpec((*[]ConfigSpec)(yyv555), d)
		}
	}
	yyj547++
	if yyhl547 {
		yyb547 = yyj547 > l
	} else {
		yyb547 = r.CheckBreak()
	}
	if yyb547 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Users = nil
	} else {
		yyv557 := &x.Users
		yym558 := z.DecBinary()
		_ = yym558
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv557), d)
		}
	}
	yyj547++
	if yyhl547 {
		yyb547 = yyj547 > l
	} else {
		yyb547 = r.CheckBreak()
	}
	if yyb547 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	for {
		yyj547++
		if yyhl547 {
			yyb547 = yyj547 > l
		} else {
			yyb547 = r.CheckBreak()
		}
		if yyb547 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj547-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *InstanceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym560 := z.EncBinary()
		_ = yym560
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep561 := !z.EncBinary()
			yy2arr561 := z.EncBasicHandle().StructToArray
			var yyq561 [6]bool
			_, _, _ = yysep561, yyq561, yy2arr561
			const yyr561 bool = false
			yyq561[0] = x.Phase != ""
			yyq561[1] = len(x.Conditions) != 0
			yyq561[2] = x.PrivateIP != ""
			yyq561[3] = x.PublicIP != ""
			yyq561[4] = x.InstanceID != ""
			yyq561[5] = true
			var yynn561 int
			if yyr561 || yy2arr561 {
				r.EncodeArrayStart(6)
			} else {
				yynn561 = 0
				for _, b := range yyq561 {
					if b {
						yynn561++
					}
				}
				r.EncodeMapStart(yynn561)
				yynn561 = 0
			}
			if yyr561 || yy2arr561 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq561[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq561[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr561 || yy2arr561 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq561[1] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym564 := z.EncBinary()
						_ = yym564
						if false {
						} else {
							h.encSliceInstanceCondition(([]InstanceCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq561[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym565 := z.EncBinary()
						_ = yym565
						if false {
						} else {
							h.encSliceInstanceCondition(([]InstanceCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr561 || yy2arr561 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq561[2] {
					yym567 := z.EncBinary()
					_ = yym567
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PrivateIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq561[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("privateIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym568 := z.EncBinary()
					_ = yym568
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PrivateIP))
					}
				}
			}
			if yyr561 || yy2arr561 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq561[3] {
					yym570 := z.EncBinary()
					_ = yym570
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PublicIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq561[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("publicIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym571 := z.EncBinary()
					_ = yym571
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PublicIP))
					}
				}
			}
			if yyr561 || yy2arr561 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq561[4] {
					yym573 := z.EncBinary()
					_ = yym573
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.InstanceID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq561[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("instanceID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym574 := z.EncBinary()
					_ = yym574
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.InstanceID))
					}
				}
			}
			if yyr561 || yy2arr561 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq561[5] {
					yy576 := &x.CreationTimestamp
					yym577 := z.EncBinary()
					_ = yym577
					if false {
					} else if z.HasExtensions() && z.EncExt(yy576) {
					} else if yym577 {
						z.EncBinaryMarshal(yy576)
					} else if !yym577 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy576)
					} else {
						z.EncFallback(yy576)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq561[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("creationTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy578 := &x.CreationTimestamp
					yym579 := z.EncBinary()
					_ = yym579
					if false {
					} else if z.HasExtensions() && z.EncExt(yy578) {
					} else if yym579 {
						z.EncBinaryMarshal(yy578)
					} else if !yym579 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy578)
					} else {
						z.EncFallback(yy578)
					}
				}
			}
			if yyr561 || yy2arr561 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *InstanceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym580 := z.DecBinary()
	_ = yym580
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct581 := r.ContainerType()
		if yyct581 == codecSelferValueTypeMap1234 {
			yyl581 := r.ReadMapStart()
			if yyl581 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl581, d)
			}
		} else if yyct581 == codecSelferValueTypeArray1234 {
			yyl581 := r.ReadArrayStart()
			if yyl581 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl581, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *InstanceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys582Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys582Slc
	var yyhl582 bool = l >= 0
	for yyj582 := 0; ; yyj582++ {
		if yyhl582 {
			if yyj582 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys582Slc = r.DecodeBytes(yys582Slc, true, true)
		yys582 := string(yys582Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys582 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = InstancePhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv584 := &x.Conditions
				yym585 := z.DecBinary()
				_ = yym585
				if false {
				} else {
					h.decSliceInstanceCondition((*[]InstanceCondition)(yyv584), d)
				}
			}
		case "privateIP":
			if r.TryDecodeAsNil() {
				x.PrivateIP = ""
			} else {
				x.PrivateIP = string(r.DecodeString())
			}
		case "publicIP":
			if r.TryDecodeAsNil() {
				x.PublicIP = ""
			} else {
				x.PublicIP = string(r.DecodeString())
			}
		case "instanceID":
			if r.TryDecodeAsNil() {
				x.InstanceID = ""
			} else {
				x.InstanceID = string(r.DecodeString())
			}
		case "creationTimestamp":
			if r.TryDecodeAsNil() {
				x.CreationTimestamp = pkg1_unversioned.Time{}
			} else {
				yyv589 := &x.CreationTimestamp
				yym590 := z.DecBinary()
				_ = yym590
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv589) {
				} else if yym590 {
					z.DecBinaryUnmarshal(yyv589)
				} else if !yym590 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv589)
				} else {
					z.DecFallback(yyv589, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys582)
		} // end switch yys582
	} // end for yyj582
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *InstanceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj591 int
	var yyb591 bool
	var yyhl591 bool = l >= 0
	yyj591++
	if yyhl591 {
		yyb591 = yyj591 > l
	} else {
		yyb591 = r.CheckBreak()
	}
	if yyb591 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = InstancePhase(r.DecodeString())
	}
	yyj591++
	if yyhl591 {
		yyb591 = yyj591 > l
	} else {
		yyb591 = r.CheckBreak()
	}
	if yyb591 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv593 := &x.Conditions
		yym594 := z.DecBinary()
		_ = yym594
		if false {
		} else {
			h.decSliceInstanceCondition((*[]InstanceCondition)(yyv593), d)
		}
	}
	yyj591++
	if yyhl591 {
		yyb591 = yyj591 > l
	} else {
		yyb591 = r.CheckBreak()
	}
	if yyb591 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PrivateIP = ""
	} else {
		x.PrivateIP = string(r.DecodeString())
	}
	yyj591++
	if yyhl591 {
		yyb591 = yyj591 > l
	} else {
		yyb591 = r.CheckBreak()
	}
	if yyb591 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PublicIP = ""
	} else {
		x.PublicIP = string(r.DecodeString())
	}
	yyj591++
	if yyhl591 {
		yyb591 = yyj591 > l
	} else {
		yyb591 = r.CheckBreak()
	}
	if yyb591 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InstanceID = ""
	} else {
		x.InstanceID = string(r.DecodeString())
	}
	yyj591++
	if yyhl591 {
		yyb591 = yyj591 > l
	} else {
		yyb591 = r.CheckBreak()
	}
	if yyb591 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CreationTimestamp = pkg1_unversioned.Time{}
	} else {
		yyv598 := &x.CreationTimestamp
		yym599 := z.DecBinary()
		_ = yym599
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv598) {
		} else if yym599 {
			z.DecBinaryUnmarshal(yyv598)
		} else if !yym599 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv598)
		} else {
			z.DecFallback(yyv598, false)
		}
	}
	for {
		yyj591++
		if yyhl591 {
			yyb591 = yyj591 > l
		} else {
			yyb591 = r.CheckBreak()
		}
		if yyb591 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj591-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x InstancePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym600 := z.EncBinary()
	_ = yym600
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *InstancePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym601 := z.DecBinary()
	_ = yym601
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x InstanceConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym602 := z.EncBinary()
	_ = yym602
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *InstanceConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym603 := z.DecBinary()
	_ = yym603
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *InstanceCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym604 := z.EncBinary()
		_ = yym604
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep605 := !z.EncBinary()
			yy2arr605 := z.EncBasicHandle().StructToArray
			var yyq605 [6]bool
			_, _, _ = yysep605, yyq605, yy2arr605
			const yyr605 bool = false
			yyq605[2] = true
			yyq605[3] = true
			yyq605[4] = x.Reason != ""
			yyq605[5] = x.Message != ""
			var yynn605 int
			if yyr605 || yy2arr605 {
				r.EncodeArrayStart(6)
			} else {
				yynn605 = 2
				for _, b := range yyq605 {
					if b {
						yynn605++
					}
				}
				r.EncodeMapStart(yynn605)
				yynn605 = 0
			}
			if yyr605 || yy2arr605 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr605 || yy2arr605 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym608 := z.EncBinary()
				_ = yym608
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Status) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Status))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym609 := z.EncBinary()
				_ = yym609
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Status) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Status))
				}
			}
			if yyr605 || yy2arr605 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq605[2] {
					yy611 := &x.LastProbeTime
					yym612 := z.EncBinary()
					_ = yym612
					if false {
					} else if z.HasExtensions() && z.EncExt(yy611) {
					} else if yym612 {
						z.EncBinaryMarshal(yy611)
					} else if !yym612 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy611)
					} else {
						z.EncFallback(yy611)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq605[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastProbeTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy613 := &x.LastProbeTime
					yym614 := z.EncBinary()
					_ = yym614
					if false {
					} else if z.HasExtensions() && z.EncExt(yy613) {
					} else if yym614 {
						z.EncBinaryMarshal(yy613)
					} else if !yym614 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy613)
					} else {
						z.EncFallback(yy613)
					}
				}
			}
			if yyr605 || yy2arr605 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq605[3] {
					yy616 := &x.LastTransitionTime
					yym617 := z.EncBinary()
					_ = yym617
					if false {
					} else if z.HasExtensions() && z.EncExt(yy616) {
					} else if yym617 {
						z.EncBinaryMarshal(yy616)
					} else if !yym617 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy616)
					} else {
						z.EncFallback(yy616)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq605[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy618 := &x.LastTransitionTime
					yym619 := z.EncBinary()
					_ = yym619
					if false {
					} else if z.HasExtensions() && z.EncExt(yy618) {
					} else if yym619 {
						z.EncBinaryMarshal(yy618)
					} else if !yym619 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy618)
					} else {
						z.EncFallback(yy618)
					}
				}
			}
			if yyr605 || yy2arr605 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq605[4] {
					yym621 := z.EncBinary()
					_ = yym621
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq605[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym622 := z.EncBinary()
					_ = yym622
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr605 || yy2arr605 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq605[5] {
					yym624 := z.EncBinary()
					_ = yym624
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq605[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym625 := z.EncBinary()
					_ = yym625
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr605 || yy2arr605 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *InstanceCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym626 := z.DecBinary()
	_ = yym626
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct627 := r.ContainerType()
		if yyct627 == codecSelferValueTypeMap1234 {
			yyl627 := r.ReadMapStart()
			if yyl627 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl627, d)
			}
		} else if yyct627 == codecSelferValueTypeArray1234 {
			yyl627 := r.ReadArrayStart()
			if yyl627 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl627, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *InstanceCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys628Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys628Slc
	var yyhl628 bool = l >= 0
	for yyj628 := 0; ; yyj628++ {
		if yyhl628 {
			if yyj628 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys628Slc = r.DecodeBytes(yys628Slc, true, true)
		yys628 := string(yys628Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys628 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = InstanceConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = pkg2_api.ConditionStatus(r.DecodeString())
			}
		case "lastProbeTime":
			if r.TryDecodeAsNil() {
				x.LastProbeTime = pkg1_unversioned.Time{}
			} else {
				yyv631 := &x.LastProbeTime
				yym632 := z.DecBinary()
				_ = yym632
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv631) {
				} else if yym632 {
					z.DecBinaryUnmarshal(yyv631)
				} else if !yym632 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv631)
				} else {
					z.DecFallback(yyv631, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg1_unversioned.Time{}
			} else {
				yyv633 := &x.LastTransitionTime
				yym634 := z.DecBinary()
				_ = yym634
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv633) {
				} else if yym634 {
					z.DecBinaryUnmarshal(yyv633)
				} else if !yym634 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv633)
				} else {
					z.DecFallback(yyv633, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys628)
		} // end switch yys628
	} // end for yyj628
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *InstanceCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj637 int
	var yyb637 bool
	var yyhl637 bool = l >= 0
	yyj637++
	if yyhl637 {
		yyb637 = yyj637 > l
	} else {
		yyb637 = r.CheckBreak()
	}
	if yyb637 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = InstanceConditionType(r.DecodeString())
	}
	yyj637++
	if yyhl637 {
		yyb637 = yyj637 > l
	} else {
		yyb637 = r.CheckBreak()
	}
	if yyb637 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = pkg2_api.ConditionStatus(r.DecodeString())
	}
	yyj637++
	if yyhl637 {
		yyb637 = yyj637 > l
	} else {
		yyb637 = r.CheckBreak()
	}
	if yyb637 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastProbeTime = pkg1_unversioned.Time{}
	} else {
		yyv640 := &x.LastProbeTime
		yym641 := z.DecBinary()
		_ = yym641
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv640) {
		} else if yym641 {
			z.DecBinaryUnmarshal(yyv640)
		} else if !yym641 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv640)
		} else {
			z.DecFallback(yyv640, false)
		}
	}
	yyj637++
	if yyhl637 {
		yyb637 = yyj637 > l
	} else {
		yyb637 = r.CheckBreak()
	}
	if yyb637 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg1_unversioned.Time{}
	} else {
		yyv642 := &x.LastTransitionTime
		yym643 := z.DecBinary()
		_ = yym643
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv642) {
		} else if yym643 {
			z.DecBinaryUnmarshal(yyv642)
		} else if !yym643 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv642)
		} else {
			z.DecFallback(yyv642, false)
		}
	}
	yyj637++
	if yyhl637 {
		yyb637 = yyj637 > l
	} else {
		yyb637 = r.CheckBreak()
	}
	if yyb637 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj637++
	if yyhl637 {
		yyb637 = yyj637 > l
	} else {
		yyb637 = r.CheckBreak()
	}
	if yyb637 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj637++
		if yyhl637 {
			yyb637 = yyj637 > l
		} else {
			yyb637 = r.CheckBreak()
		}
		if yyb637 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj637-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *InstanceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym646 := z.EncBinary()
		_ = yym646
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep647 := !z.EncBinary()
			yy2arr647 := z.EncBasicHandle().StructToArray
			var yyq647 [4]bool
			_, _, _ = yysep647, yyq647, yy2arr647
			const yyr647 bool = false
			yyq647[0] = x.Kind != ""
			yyq647[1] = x.APIVersion != ""
			var yynn647 int
			if yyr647 || yy2arr647 {
				r.EncodeArrayStart(4)
			} else {
				yynn647 = 2
				for _, b := range yyq647 {
					if b {
						yynn647++
					}
				}
				r.EncodeMapStart(yynn647)
				yynn647 = 0
			}
			if yyr647 || yy2arr647 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq647[0] {
					yym649 := z.EncBinary()
					_ = yym649
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq647[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym650 := z.EncBinary()
					_ = yym650
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr647 || yy2arr647 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq647[1] {
					yym652 := z.EncBinary()
					_ = yym652
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq647[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym653 := z.EncBinary()
					_ = yym653
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr647 || yy2arr647 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy655 := &x.ListMeta
				yym656 := z.EncBinary()
				_ = yym656
				if false {
				} else if z.HasExtensions() && z.EncExt(yy655) {
				} else {
					z.EncFallback(yy655)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("metadata"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy657 := &x.ListMeta
				yym658 := z.EncBinary()
				_ = yym658
				if false {
				} else if z.HasExtensions() && z.EncExt(yy657) {
				} else {
					z.EncFallback(yy657)
				}
			}
			if yyr647 || yy2arr647 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym660 := z.EncBinary()
					_ = yym660
					if false {
					} else {
						h.encSlicePtrtoInstance(([]*Instance)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym661 := z.EncBinary()
					_ = yym661
					if false {
					} else {
						h.encSlicePtrtoInstance(([]*Instance)(x.Items), e)
					}
				}
			}
			if yyr647 || yy2arr647 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *InstanceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym662 := z.DecBinary()
	_ = yym662
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct663 := r.ContainerType()
		if yyct663 == codecSelferValueTypeMap1234 {
			yyl663 := r.ReadMapStart()
			if yyl663 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl663, d)
			}
		} else if yyct663 == codecSelferValueTypeArray1234 {
			yyl663 := r.ReadArrayStart()
			if yyl663 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl663, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *InstanceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys664Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys664Slc
	var yyhl664 bool = l >= 0
	for yyj664 := 0; ; yyj664++ {
		if yyhl664 {
			if yyj664 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys664Slc = r.DecodeBytes(yys664Slc, true, true)
		yys664 := string(yys664Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys664 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv667 := &x.ListMeta
				yym668 := z.DecBinary()
				_ = yym668
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv667) {
				} else {
					z.DecFallback(yyv667, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv669 := &x.Items
				yym670 := z.DecBinary()
				_ = yym670
				if false {
				} else {
					h.decSlicePtrtoInstance((*[]*Instance)(yyv669), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys664)
		} // end switch yys664
	} // end for yyj664
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *InstanceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj671 int
	var yyb671 bool
	var yyhl671 bool = l >= 0
	yyj671++
	if yyhl671 {
		yyb671 = yyj671 > l
	} else {
		yyb671 = r.CheckBreak()
	}
	if yyb671 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj671++
	if yyhl671 {
		yyb671 = yyj671 > l
	} else {
		yyb671 = r.CheckBreak()
	}
	if yyb671 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj671++
	if yyhl671 {
		yyb671 = yyj671 > l
	} else {
		yyb671 = r.CheckBreak()
	}
	if yyb671 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv674 := &x.ListMeta
		yym675 := z.DecBinary()
		_ = yym675
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv674) {
		} else {
			z.DecFallback(yyv674, false)
		}
	}
	yyj671++
	if yyhl671 {
		yyb671 = yyj671 > l
	} else {
		yyb671 = r.CheckBreak()
	}
	if yyb671 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv676 := &x.Items
		yym677 := z.DecBinary()
		_ = yym677
		if false {
		} else {
			h.decSlicePtrtoInstance((*[]*Instance)(yyv676), d)
		}
	}
	for {
		yyj671++
		if yyhl671 {
			yyb671 = yyj671 > l
		} else {
			yyb671 = r.CheckBreak()
		}
		if yyb671 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj671-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) encSlicePtrtoUser(v []*User, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv678 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		if yyv678 == nil {
			r.EncodeNil()
		} else {
			yyv678.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePtrtoUser(v *[]*User, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv679 := *v
	yyh679, yyl679 := z.DecSliceHelperStart()
	var yyc679 bool
	if yyl679 == 0 {
		if yyv679 == nil {
			yyv679 = []*User{}
			yyc679 = true
		} else if len(yyv679) != 0 {
			yyv679 = yyv679[:0]
			yyc679 = true
		}
	} else if yyl679 > 0 {
		var yyrr679, yyrl679 int
		var yyrt679 bool
		if yyl679 > cap(yyv679) {

			yyrg679 := len(yyv679) > 0
			yyv2679 := yyv679
			yyrl679, yyrt679 = z.DecInferLen(yyl679, z.DecBasicHandle().MaxInitLen, 8)
			if yyrt679 {
				if yyrl679 <= cap(yyv679) {
					yyv679 = yyv679[:yyrl679]
				} else {
					yyv679 = make([]*User, yyrl679)
				}
			} else {
				yyv679 = make([]*User, yyrl679)
			}
			yyc679 = true
			yyrr679 = len(yyv679)
			if yyrg679 {
				copy(yyv679, yyv2679)
			}
		} else if yyl679 != len(yyv679) {
			yyv679 = yyv679[:yyl679]
			yyc679 = true
		}
		yyj679 := 0
		for ; yyj679 < yyrr679; yyj679++ {
			yyh679.ElemContainerState(yyj679)
			if r.TryDecodeAsNil() {
				if yyv679[yyj679] != nil {
					*yyv679[yyj679] = User{}
				}
			} else {
				if yyv679[yyj679] == nil {
					yyv679[yyj679] = new(User)
				}
				yyw680 := yyv679[yyj679]
				yyw680.CodecDecodeSelf(d)
			}

		}
		if yyrt679 {
			for ; yyj679 < yyl679; yyj679++ {
				yyv679 = append(yyv679, nil)
				yyh679.ElemContainerState(yyj679)
				if r.TryDecodeAsNil() {
					if yyv679[yyj679] != nil {
						*yyv679[yyj679] = User{}
					}
				} else {
					if yyv679[yyj679] == nil {
						yyv679[yyj679] = new(User)
					}
					yyw681 := yyv679[yyj679]
					yyw681.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj679 := 0
		for ; !r.CheckBreak(); yyj679++ {

			if yyj679 >= len(yyv679) {
				yyv679 = append(yyv679, nil) // var yyz679 *User
				yyc679 = true
			}
			yyh679.ElemContainerState(yyj679)
			if yyj679 < len(yyv679) {
				if r.TryDecodeAsNil() {
					if yyv679[yyj679] != nil {
						*yyv679[yyj679] = User{}
					}
				} else {
					if yyv679[yyj679] == nil {
						yyv679[yyj679] = new(User)
					}
					yyw682 := yyv679[yyj679]
					yyw682.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj679 < len(yyv679) {
			yyv679 = yyv679[:yyj679]
			yyc679 = true
		} else if yyj679 == 0 && yyv679 == nil {
			yyv679 = []*User{}
			yyc679 = true
		}
	}
	yyh679.End()
	if yyc679 {
		*v = yyv679
	}
}

func (x codecSelfer1234) encSlicePtrtoNetwork(v []*Network, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv683 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		if yyv683 == nil {
			r.EncodeNil()
		} else {
			yyv683.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePtrtoNetwork(v *[]*Network, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv684 := *v
	yyh684, yyl684 := z.DecSliceHelperStart()
	var yyc684 bool
	if yyl684 == 0 {
		if yyv684 == nil {
			yyv684 = []*Network{}
			yyc684 = true
		} else if len(yyv684) != 0 {
			yyv684 = yyv684[:0]
			yyc684 = true
		}
	} else if yyl684 > 0 {
		var yyrr684, yyrl684 int
		var yyrt684 bool
		if yyl684 > cap(yyv684) {

			yyrg684 := len(yyv684) > 0
			yyv2684 := yyv684
			yyrl684, yyrt684 = z.DecInferLen(yyl684, z.DecBasicHandle().MaxInitLen, 8)
			if yyrt684 {
				if yyrl684 <= cap(yyv684) {
					yyv684 = yyv684[:yyrl684]
				} else {
					yyv684 = make([]*Network, yyrl684)
				}
			} else {
				yyv684 = make([]*Network, yyrl684)
			}
			yyc684 = true
			yyrr684 = len(yyv684)
			if yyrg684 {
				copy(yyv684, yyv2684)
			}
		} else if yyl684 != len(yyv684) {
			yyv684 = yyv684[:yyl684]
			yyc684 = true
		}
		yyj684 := 0
		for ; yyj684 < yyrr684; yyj684++ {
			yyh684.ElemContainerState(yyj684)
			if r.TryDecodeAsNil() {
				if yyv684[yyj684] != nil {
					*yyv684[yyj684] = Network{}
				}
			} else {
				if yyv684[yyj684] == nil {
					yyv684[yyj684] = new(Network)
				}
				yyw685 := yyv684[yyj684]
				yyw685.CodecDecodeSelf(d)
			}

		}
		if yyrt684 {
			for ; yyj684 < yyl684; yyj684++ {
				yyv684 = append(yyv684, nil)
				yyh684.ElemContainerState(yyj684)
				if r.TryDecodeAsNil() {
					if yyv684[yyj684] != nil {
						*yyv684[yyj684] = Network{}
					}
				} else {
					if yyv684[yyj684] == nil {
						yyv684[yyj684] = new(Network)
					}
					yyw686 := yyv684[yyj684]
					yyw686.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj684 := 0
		for ; !r.CheckBreak(); yyj684++ {

			if yyj684 >= len(yyv684) {
				yyv684 = append(yyv684, nil) // var yyz684 *Network
				yyc684 = true
			}
			yyh684.ElemContainerState(yyj684)
			if yyj684 < len(yyv684) {
				if r.TryDecodeAsNil() {
					if yyv684[yyj684] != nil {
						*yyv684[yyj684] = Network{}
					}
				} else {
					if yyv684[yyj684] == nil {
						yyv684[yyj684] = new(Network)
					}
					yyw687 := yyv684[yyj684]
					yyw687.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj684 < len(yyv684) {
			yyv684 = yyv684[:yyj684]
			yyc684 = true
		} else if yyj684 == 0 && yyv684 == nil {
			yyv684 = []*Network{}
			yyc684 = true
		}
	}
	yyh684.End()
	if yyc684 {
		*v = yyv684
	}
}

func (x codecSelfer1234) encSliceInstanceGroupCondition(v []InstanceGroupCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv688 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy689 := &yyv688
		yy689.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceInstanceGroupCondition(v *[]InstanceGroupCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv690 := *v
	yyh690, yyl690 := z.DecSliceHelperStart()
	var yyc690 bool
	if yyl690 == 0 {
		if yyv690 == nil {
			yyv690 = []InstanceGroupCondition{}
			yyc690 = true
		} else if len(yyv690) != 0 {
			yyv690 = yyv690[:0]
			yyc690 = true
		}
	} else if yyl690 > 0 {
		var yyrr690, yyrl690 int
		var yyrt690 bool
		if yyl690 > cap(yyv690) {

			yyrg690 := len(yyv690) > 0
			yyv2690 := yyv690
			yyrl690, yyrt690 = z.DecInferLen(yyl690, z.DecBasicHandle().MaxInitLen, 88)
			if yyrt690 {
				if yyrl690 <= cap(yyv690) {
					yyv690 = yyv690[:yyrl690]
				} else {
					yyv690 = make([]InstanceGroupCondition, yyrl690)
				}
			} else {
				yyv690 = make([]InstanceGroupCondition, yyrl690)
			}
			yyc690 = true
			yyrr690 = len(yyv690)
			if yyrg690 {
				copy(yyv690, yyv2690)
			}
		} else if yyl690 != len(yyv690) {
			yyv690 = yyv690[:yyl690]
			yyc690 = true
		}
		yyj690 := 0
		for ; yyj690 < yyrr690; yyj690++ {
			yyh690.ElemContainerState(yyj690)
			if r.TryDecodeAsNil() {
				yyv690[yyj690] = InstanceGroupCondition{}
			} else {
				yyv691 := &yyv690[yyj690]
				yyv691.CodecDecodeSelf(d)
			}

		}
		if yyrt690 {
			for ; yyj690 < yyl690; yyj690++ {
				yyv690 = append(yyv690, InstanceGroupCondition{})
				yyh690.ElemContainerState(yyj690)
				if r.TryDecodeAsNil() {
					yyv690[yyj690] = InstanceGroupCondition{}
				} else {
					yyv692 := &yyv690[yyj690]
					yyv692.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj690 := 0
		for ; !r.CheckBreak(); yyj690++ {

			if yyj690 >= len(yyv690) {
				yyv690 = append(yyv690, InstanceGroupCondition{}) // var yyz690 InstanceGroupCondition
				yyc690 = true
			}
			yyh690.ElemContainerState(yyj690)
			if yyj690 < len(yyv690) {
				if r.TryDecodeAsNil() {
					yyv690[yyj690] = InstanceGroupCondition{}
				} else {
					yyv693 := &yyv690[yyj690]
					yyv693.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj690 < len(yyv690) {
			yyv690 = yyv690[:yyj690]
			yyc690 = true
		} else if yyj690 == 0 && yyv690 == nil {
			yyv690 = []InstanceGroupCondition{}
			yyc690 = true
		}
	}
	yyh690.End()
	if yyc690 {
		*v = yyv690
	}
}

func (x codecSelfer1234) encSlicePtrtoInstanceGroup(v []*InstanceGroup, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv694 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		if yyv694 == nil {
			r.EncodeNil()
		} else {
			yyv694.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePtrtoInstanceGroup(v *[]*InstanceGroup, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv695 := *v
	yyh695, yyl695 := z.DecSliceHelperStart()
	var yyc695 bool
	if yyl695 == 0 {
		if yyv695 == nil {
			yyv695 = []*InstanceGroup{}
			yyc695 = true
		} else if len(yyv695) != 0 {
			yyv695 = yyv695[:0]
			yyc695 = true
		}
	} else if yyl695 > 0 {
		var yyrr695, yyrl695 int
		var yyrt695 bool
		if yyl695 > cap(yyv695) {

			yyrg695 := len(yyv695) > 0
			yyv2695 := yyv695
			yyrl695, yyrt695 = z.DecInferLen(yyl695, z.DecBasicHandle().MaxInitLen, 8)
			if yyrt695 {
				if yyrl695 <= cap(yyv695) {
					yyv695 = yyv695[:yyrl695]
				} else {
					yyv695 = make([]*InstanceGroup, yyrl695)
				}
			} else {
				yyv695 = make([]*InstanceGroup, yyrl695)
			}
			yyc695 = true
			yyrr695 = len(yyv695)
			if yyrg695 {
				copy(yyv695, yyv2695)
			}
		} else if yyl695 != len(yyv695) {
			yyv695 = yyv695[:yyl695]
			yyc695 = true
		}
		yyj695 := 0
		for ; yyj695 < yyrr695; yyj695++ {
			yyh695.ElemContainerState(yyj695)
			if r.TryDecodeAsNil() {
				if yyv695[yyj695] != nil {
					*yyv695[yyj695] = InstanceGroup{}
				}
			} else {
				if yyv695[yyj695] == nil {
					yyv695[yyj695] = new(InstanceGroup)
				}
				yyw696 := yyv695[yyj695]
				yyw696.CodecDecodeSelf(d)
			}

		}
		if yyrt695 {
			for ; yyj695 < yyl695; yyj695++ {
				yyv695 = append(yyv695, nil)
				yyh695.ElemContainerState(yyj695)
				if r.TryDecodeAsNil() {
					if yyv695[yyj695] != nil {
						*yyv695[yyj695] = InstanceGroup{}
					}
				} else {
					if yyv695[yyj695] == nil {
						yyv695[yyj695] = new(InstanceGroup)
					}
					yyw697 := yyv695[yyj695]
					yyw697.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj695 := 0
		for ; !r.CheckBreak(); yyj695++ {

			if yyj695 >= len(yyv695) {
				yyv695 = append(yyv695, nil) // var yyz695 *InstanceGroup
				yyc695 = true
			}
			yyh695.ElemContainerState(yyj695)
			if yyj695 < len(yyv695) {
				if r.TryDecodeAsNil() {
					if yyv695[yyj695] != nil {
						*yyv695[yyj695] = InstanceGroup{}
					}
				} else {
					if yyv695[yyj695] == nil {
						yyv695[yyj695] = new(InstanceGroup)
					}
					yyw698 := yyv695[yyj695]
					yyw698.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj695 < len(yyv695) {
			yyv695 = yyv695[:yyj695]
			yyc695 = true
		} else if yyj695 == 0 && yyv695 == nil {
			yyv695 = []*InstanceGroup{}
			yyc695 = true
		}
	}
	yyh695.End()
	if yyc695 {
		*v = yyv695
	}
}

func (x codecSelfer1234) encSliceapi_Secret(v []pkg2_api.Secret, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv699 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy700 := &yyv699
		yy700.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceapi_Secret(v *[]pkg2_api.Secret, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv701 := *v
	yyh701, yyl701 := z.DecSliceHelperStart()
	var yyc701 bool
	if yyl701 == 0 {
		if yyv701 == nil {
			yyv701 = []pkg2_api.Secret{}
			yyc701 = true
		} else if len(yyv701) != 0 {
			yyv701 = yyv701[:0]
			yyc701 = true
		}
	} else if yyl701 > 0 {
		var yyrr701, yyrl701 int
		var yyrt701 bool
		if yyl701 > cap(yyv701) {

			yyrg701 := len(yyv701) > 0
			yyv2701 := yyv701
			yyrl701, yyrt701 = z.DecInferLen(yyl701, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt701 {
				if yyrl701 <= cap(yyv701) {
					yyv701 = yyv701[:yyrl701]
				} else {
					yyv701 = make([]pkg2_api.Secret, yyrl701)
				}
			} else {
				yyv701 = make([]pkg2_api.Secret, yyrl701)
			}
			yyc701 = true
			yyrr701 = len(yyv701)
			if yyrg701 {
				copy(yyv701, yyv2701)
			}
		} else if yyl701 != len(yyv701) {
			yyv701 = yyv701[:yyl701]
			yyc701 = true
		}
		yyj701 := 0
		for ; yyj701 < yyrr701; yyj701++ {
			yyh701.ElemContainerState(yyj701)
			if r.TryDecodeAsNil() {
				yyv701[yyj701] = pkg2_api.Secret{}
			} else {
				yyv702 := &yyv701[yyj701]
				yyv702.CodecDecodeSelf(d)
			}

		}
		if yyrt701 {
			for ; yyj701 < yyl701; yyj701++ {
				yyv701 = append(yyv701, pkg2_api.Secret{})
				yyh701.ElemContainerState(yyj701)
				if r.TryDecodeAsNil() {
					yyv701[yyj701] = pkg2_api.Secret{}
				} else {
					yyv703 := &yyv701[yyj701]
					yyv703.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj701 := 0
		for ; !r.CheckBreak(); yyj701++ {

			if yyj701 >= len(yyv701) {
				yyv701 = append(yyv701, pkg2_api.Secret{}) // var yyz701 pkg2_api.Secret
				yyc701 = true
			}
			yyh701.ElemContainerState(yyj701)
			if yyj701 < len(yyv701) {
				if r.TryDecodeAsNil() {
					yyv701[yyj701] = pkg2_api.Secret{}
				} else {
					yyv704 := &yyv701[yyj701]
					yyv704.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj701 < len(yyv701) {
			yyv701 = yyv701[:yyj701]
			yyc701 = true
		} else if yyj701 == 0 && yyv701 == nil {
			yyv701 = []pkg2_api.Secret{}
			yyc701 = true
		}
	}
	yyh701.End()
	if yyc701 {
		*v = yyv701
	}
}

func (x codecSelfer1234) encSliceUser(v []User, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv705 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy706 := &yyv705
		yy706.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceUser(v *[]User, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv707 := *v
	yyh707, yyl707 := z.DecSliceHelperStart()
	var yyc707 bool
	if yyl707 == 0 {
		if yyv707 == nil {
			yyv707 = []User{}
			yyc707 = true
		} else if len(yyv707) != 0 {
			yyv707 = yyv707[:0]
			yyc707 = true
		}
	} else if yyl707 > 0 {
		var yyrr707, yyrl707 int
		var yyrt707 bool
		if yyl707 > cap(yyv707) {

			yyrg707 := len(yyv707) > 0
			yyv2707 := yyv707
			yyrl707, yyrt707 = z.DecInferLen(yyl707, z.DecBasicHandle().MaxInitLen, 312)
			if yyrt707 {
				if yyrl707 <= cap(yyv707) {
					yyv707 = yyv707[:yyrl707]
				} else {
					yyv707 = make([]User, yyrl707)
				}
			} else {
				yyv707 = make([]User, yyrl707)
			}
			yyc707 = true
			yyrr707 = len(yyv707)
			if yyrg707 {
				copy(yyv707, yyv2707)
			}
		} else if yyl707 != len(yyv707) {
			yyv707 = yyv707[:yyl707]
			yyc707 = true
		}
		yyj707 := 0
		for ; yyj707 < yyrr707; yyj707++ {
			yyh707.ElemContainerState(yyj707)
			if r.TryDecodeAsNil() {
				yyv707[yyj707] = User{}
			} else {
				yyv708 := &yyv707[yyj707]
				yyv708.CodecDecodeSelf(d)
			}

		}
		if yyrt707 {
			for ; yyj707 < yyl707; yyj707++ {
				yyv707 = append(yyv707, User{})
				yyh707.ElemContainerState(yyj707)
				if r.TryDecodeAsNil() {
					yyv707[yyj707] = User{}
				} else {
					yyv709 := &yyv707[yyj707]
					yyv709.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj707 := 0
		for ; !r.CheckBreak(); yyj707++ {

			if yyj707 >= len(yyv707) {
				yyv707 = append(yyv707, User{}) // var yyz707 User
				yyc707 = true
			}
			yyh707.ElemContainerState(yyj707)
			if yyj707 < len(yyv707) {
				if r.TryDecodeAsNil() {
					yyv707[yyj707] = User{}
				} else {
					yyv710 := &yyv707[yyj707]
					yyv710.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj707 < len(yyv707) {
			yyv707 = yyv707[:yyj707]
			yyc707 = true
		} else if yyj707 == 0 && yyv707 == nil {
			yyv707 = []User{}
			yyc707 = true
		}
	}
	yyh707.End()
	if yyc707 {
		*v = yyv707
	}
}

func (x codecSelfer1234) encSliceFileSpec(v []FileSpec, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv711 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy712 := &yyv711
		yy712.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceFileSpec(v *[]FileSpec, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv713 := *v
	yyh713, yyl713 := z.DecSliceHelperStart()
	var yyc713 bool
	if yyl713 == 0 {
		if yyv713 == nil {
			yyv713 = []FileSpec{}
			yyc713 = true
		} else if len(yyv713) != 0 {
			yyv713 = yyv713[:0]
			yyc713 = true
		}
	} else if yyl713 > 0 {
		var yyrr713, yyrl713 int
		var yyrt713 bool
		if yyl713 > cap(yyv713) {

			yyrg713 := len(yyv713) > 0
			yyv2713 := yyv713
			yyrl713, yyrt713 = z.DecInferLen(yyl713, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt713 {
				if yyrl713 <= cap(yyv713) {
					yyv713 = yyv713[:yyrl713]
				} else {
					yyv713 = make([]FileSpec, yyrl713)
				}
			} else {
				yyv713 = make([]FileSpec, yyrl713)
			}
			yyc713 = true
			yyrr713 = len(yyv713)
			if yyrg713 {
				copy(yyv713, yyv2713)
			}
		} else if yyl713 != len(yyv713) {
			yyv713 = yyv713[:yyl713]
			yyc713 = true
		}
		yyj713 := 0
		for ; yyj713 < yyrr713; yyj713++ {
			yyh713.ElemContainerState(yyj713)
			if r.TryDecodeAsNil() {
				yyv713[yyj713] = FileSpec{}
			} else {
				yyv714 := &yyv713[yyj713]
				yyv714.CodecDecodeSelf(d)
			}

		}
		if yyrt713 {
			for ; yyj713 < yyl713; yyj713++ {
				yyv713 = append(yyv713, FileSpec{})
				yyh713.ElemContainerState(yyj713)
				if r.TryDecodeAsNil() {
					yyv713[yyj713] = FileSpec{}
				} else {
					yyv715 := &yyv713[yyj713]
					yyv715.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj713 := 0
		for ; !r.CheckBreak(); yyj713++ {

			if yyj713 >= len(yyv713) {
				yyv713 = append(yyv713, FileSpec{}) // var yyz713 FileSpec
				yyc713 = true
			}
			yyh713.ElemContainerState(yyj713)
			if yyj713 < len(yyv713) {
				if r.TryDecodeAsNil() {
					yyv713[yyj713] = FileSpec{}
				} else {
					yyv716 := &yyv713[yyj713]
					yyv716.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj713 < len(yyv713) {
			yyv713 = yyv713[:yyj713]
			yyc713 = true
		} else if yyj713 == 0 && yyv713 == nil {
			yyv713 = []FileSpec{}
			yyc713 = true
		}
	}
	yyh713.End()
	if yyc713 {
		*v = yyv713
	}
}

func (x codecSelfer1234) encSliceLocalObjectReference(v []LocalObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv717 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy718 := &yyv717
		yy718.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLocalObjectReference(v *[]LocalObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv719 := *v
	yyh719, yyl719 := z.DecSliceHelperStart()
	var yyc719 bool
	if yyl719 == 0 {
		if yyv719 == nil {
			yyv719 = []LocalObjectReference{}
			yyc719 = true
		} else if len(yyv719) != 0 {
			yyv719 = yyv719[:0]
			yyc719 = true
		}
	} else if yyl719 > 0 {
		var yyrr719, yyrl719 int
		var yyrt719 bool
		if yyl719 > cap(yyv719) {

			yyrg719 := len(yyv719) > 0
			yyv2719 := yyv719
			yyrl719, yyrt719 = z.DecInferLen(yyl719, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt719 {
				if yyrl719 <= cap(yyv719) {
					yyv719 = yyv719[:yyrl719]
				} else {
					yyv719 = make([]LocalObjectReference, yyrl719)
				}
			} else {
				yyv719 = make([]LocalObjectReference, yyrl719)
			}
			yyc719 = true
			yyrr719 = len(yyv719)
			if yyrg719 {
				copy(yyv719, yyv2719)
			}
		} else if yyl719 != len(yyv719) {
			yyv719 = yyv719[:yyl719]
			yyc719 = true
		}
		yyj719 := 0
		for ; yyj719 < yyrr719; yyj719++ {
			yyh719.ElemContainerState(yyj719)
			if r.TryDecodeAsNil() {
				yyv719[yyj719] = LocalObjectReference{}
			} else {
				yyv720 := &yyv719[yyj719]
				yyv720.CodecDecodeSelf(d)
			}

		}
		if yyrt719 {
			for ; yyj719 < yyl719; yyj719++ {
				yyv719 = append(yyv719, LocalObjectReference{})
				yyh719.ElemContainerState(yyj719)
				if r.TryDecodeAsNil() {
					yyv719[yyj719] = LocalObjectReference{}
				} else {
					yyv721 := &yyv719[yyj719]
					yyv721.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj719 := 0
		for ; !r.CheckBreak(); yyj719++ {

			if yyj719 >= len(yyv719) {
				yyv719 = append(yyv719, LocalObjectReference{}) // var yyz719 LocalObjectReference
				yyc719 = true
			}
			yyh719.ElemContainerState(yyj719)
			if yyj719 < len(yyv719) {
				if r.TryDecodeAsNil() {
					yyv719[yyj719] = LocalObjectReference{}
				} else {
					yyv722 := &yyv719[yyj719]
					yyv722.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj719 < len(yyv719) {
			yyv719 = yyv719[:yyj719]
			yyc719 = true
		} else if yyj719 == 0 && yyv719 == nil {
			yyv719 = []LocalObjectReference{}
			yyc719 = true
		}
	}
	yyh719.End()
	if yyc719 {
		*v = yyv719
	}
}

func (x codecSelfer1234) encSliceConfigSpec(v []ConfigSpec, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv723 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy724 := &yyv723
		yy724.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceConfigSpec(v *[]ConfigSpec, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv725 := *v
	yyh725, yyl725 := z.DecSliceHelperStart()
	var yyc725 bool
	if yyl725 == 0 {
		if yyv725 == nil {
			yyv725 = []ConfigSpec{}
			yyc725 = true
		} else if len(yyv725) != 0 {
			yyv725 = yyv725[:0]
			yyc725 = true
		}
	} else if yyl725 > 0 {
		var yyrr725, yyrl725 int
		var yyrt725 bool
		if yyl725 > cap(yyv725) {

			yyrg725 := len(yyv725) > 0
			yyv2725 := yyv725
			yyrl725, yyrt725 = z.DecInferLen(yyl725, z.DecBasicHandle().MaxInitLen, 24)
			if yyrt725 {
				if yyrl725 <= cap(yyv725) {
					yyv725 = yyv725[:yyrl725]
				} else {
					yyv725 = make([]ConfigSpec, yyrl725)
				}
			} else {
				yyv725 = make([]ConfigSpec, yyrl725)
			}
			yyc725 = true
			yyrr725 = len(yyv725)
			if yyrg725 {
				copy(yyv725, yyv2725)
			}
		} else if yyl725 != len(yyv725) {
			yyv725 = yyv725[:yyl725]
			yyc725 = true
		}
		yyj725 := 0
		for ; yyj725 < yyrr725; yyj725++ {
			yyh725.ElemContainerState(yyj725)
			if r.TryDecodeAsNil() {
				yyv725[yyj725] = ConfigSpec{}
			} else {
				yyv726 := &yyv725[yyj725]
				yyv726.CodecDecodeSelf(d)
			}

		}
		if yyrt725 {
			for ; yyj725 < yyl725; yyj725++ {
				yyv725 = append(yyv725, ConfigSpec{})
				yyh725.ElemContainerState(yyj725)
				if r.TryDecodeAsNil() {
					yyv725[yyj725] = ConfigSpec{}
				} else {
					yyv727 := &yyv725[yyj725]
					yyv727.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj725 := 0
		for ; !r.CheckBreak(); yyj725++ {

			if yyj725 >= len(yyv725) {
				yyv725 = append(yyv725, ConfigSpec{}) // var yyz725 ConfigSpec
				yyc725 = true
			}
			yyh725.ElemContainerState(yyj725)
			if yyj725 < len(yyv725) {
				if r.TryDecodeAsNil() {
					yyv725[yyj725] = ConfigSpec{}
				} else {
					yyv728 := &yyv725[yyj725]
					yyv728.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj725 < len(yyv725) {
			yyv725 = yyv725[:yyj725]
			yyc725 = true
		} else if yyj725 == 0 && yyv725 == nil {
			yyv725 = []ConfigSpec{}
			yyc725 = true
		}
	}
	yyh725.End()
	if yyc725 {
		*v = yyv725
	}
}

func (x codecSelfer1234) encSliceInstanceCondition(v []InstanceCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv729 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy730 := &yyv729
		yy730.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceInstanceCondition(v *[]InstanceCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv731 := *v
	yyh731, yyl731 := z.DecSliceHelperStart()
	var yyc731 bool
	if yyl731 == 0 {
		if yyv731 == nil {
			yyv731 = []InstanceCondition{}
			yyc731 = true
		} else if len(yyv731) != 0 {
			yyv731 = yyv731[:0]
			yyc731 = true
		}
	} else if yyl731 > 0 {
		var yyrr731, yyrl731 int
		var yyrt731 bool
		if yyl731 > cap(yyv731) {

			yyrg731 := len(yyv731) > 0
			yyv2731 := yyv731
			yyrl731, yyrt731 = z.DecInferLen(yyl731, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt731 {
				if yyrl731 <= cap(yyv731) {
					yyv731 = yyv731[:yyrl731]
				} else {
					yyv731 = make([]InstanceCondition, yyrl731)
				}
			} else {
				yyv731 = make([]InstanceCondition, yyrl731)
			}
			yyc731 = true
			yyrr731 = len(yyv731)
			if yyrg731 {
				copy(yyv731, yyv2731)
			}
		} else if yyl731 != len(yyv731) {
			yyv731 = yyv731[:yyl731]
			yyc731 = true
		}
		yyj731 := 0
		for ; yyj731 < yyrr731; yyj731++ {
			yyh731.ElemContainerState(yyj731)
			if r.TryDecodeAsNil() {
				yyv731[yyj731] = InstanceCondition{}
			} else {
				yyv732 := &yyv731[yyj731]
				yyv732.CodecDecodeSelf(d)
			}

		}
		if yyrt731 {
			for ; yyj731 < yyl731; yyj731++ {
				yyv731 = append(yyv731, InstanceCondition{})
				yyh731.ElemContainerState(yyj731)
				if r.TryDecodeAsNil() {
					yyv731[yyj731] = InstanceCondition{}
				} else {
					yyv733 := &yyv731[yyj731]
					yyv733.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj731 := 0
		for ; !r.CheckBreak(); yyj731++ {

			if yyj731 >= len(yyv731) {
				yyv731 = append(yyv731, InstanceCondition{}) // var yyz731 InstanceCondition
				yyc731 = true
			}
			yyh731.ElemContainerState(yyj731)
			if yyj731 < len(yyv731) {
				if r.TryDecodeAsNil() {
					yyv731[yyj731] = InstanceCondition{}
				} else {
					yyv734 := &yyv731[yyj731]
					yyv734.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj731 < len(yyv731) {
			yyv731 = yyv731[:yyj731]
			yyc731 = true
		} else if yyj731 == 0 && yyv731 == nil {
			yyv731 = []InstanceCondition{}
			yyc731 = true
		}
	}
	yyh731.End()
	if yyc731 {
		*v = yyv731
	}
}

func (x codecSelfer1234) encSlicePtrtoInstance(v []*Instance, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv735 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		if yyv735 == nil {
			r.EncodeNil()
		} else {
			yyv735.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePtrtoInstance(v *[]*Instance, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv736 := *v
	yyh736, yyl736 := z.DecSliceHelperStart()
	var yyc736 bool
	if yyl736 == 0 {
		if yyv736 == nil {
			yyv736 = []*Instance{}
			yyc736 = true
		} else if len(yyv736) != 0 {
			yyv736 = yyv736[:0]
			yyc736 = true
		}
	} else if yyl736 > 0 {
		var yyrr736, yyrl736 int
		var yyrt736 bool
		if yyl736 > cap(yyv736) {

			yyrg736 := len(yyv736) > 0
			yyv2736 := yyv736
			yyrl736, yyrt736 = z.DecInferLen(yyl736, z.DecBasicHandle().MaxInitLen, 8)
			if yyrt736 {
				if yyrl736 <= cap(yyv736) {
					yyv736 = yyv736[:yyrl736]
				} else {
					yyv736 = make([]*Instance, yyrl736)
				}
			} else {
				yyv736 = make([]*Instance, yyrl736)
			}
			yyc736 = true
			yyrr736 = len(yyv736)
			if yyrg736 {
				copy(yyv736, yyv2736)
			}
		} else if yyl736 != len(yyv736) {
			yyv736 = yyv736[:yyl736]
			yyc736 = true
		}
		yyj736 := 0
		for ; yyj736 < yyrr736; yyj736++ {
			yyh736.ElemContainerState(yyj736)
			if r.TryDecodeAsNil() {
				if yyv736[yyj736] != nil {
					*yyv736[yyj736] = Instance{}
				}
			} else {
				if yyv736[yyj736] == nil {
					yyv736[yyj736] = new(Instance)
				}
				yyw737 := yyv736[yyj736]
				yyw737.CodecDecodeSelf(d)
			}

		}
		if yyrt736 {
			for ; yyj736 < yyl736; yyj736++ {
				yyv736 = append(yyv736, nil)
				yyh736.ElemContainerState(yyj736)
				if r.TryDecodeAsNil() {
					if yyv736[yyj736] != nil {
						*yyv736[yyj736] = Instance{}
					}
				} else {
					if yyv736[yyj736] == nil {
						yyv736[yyj736] = new(Instance)
					}
					yyw738 := yyv736[yyj736]
					yyw738.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj736 := 0
		for ; !r.CheckBreak(); yyj736++ {

			if yyj736 >= len(yyv736) {
				yyv736 = append(yyv736, nil) // var yyz736 *Instance
				yyc736 = true
			}
			yyh736.ElemContainerState(yyj736)
			if yyj736 < len(yyv736) {
				if r.TryDecodeAsNil() {
					if yyv736[yyj736] != nil {
						*yyv736[yyj736] = Instance{}
					}
				} else {
					if yyv736[yyj736] == nil {
						yyv736[yyj736] = new(Instance)
					}
					yyw739 := yyv736[yyj736]
					yyw739.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj736 < len(yyv736) {
			yyv736 = yyv736[:yyj736]
			yyc736 = true
		} else if yyj736 == 0 && yyv736 == nil {
			yyv736 = []*Instance{}
			yyc736 = true
		}
	}
	yyh736.End()
	if yyc736 {
		*v = yyv736
	}
}

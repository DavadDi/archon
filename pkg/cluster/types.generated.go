/*
Copyright 2016 The Archon Authors.
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package cluster

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg2_api "k8s.io/kubernetes/pkg/api"
	pkg1_unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	pkg3_types "k8s.io/kubernetes/pkg/types"
	"reflect"
	"runtime"
	time "time"
)

const (
	// ----- content types ----
	codecSelferC_UTF81234 = 1
	codecSelferC_RAW1234  = 0
	// ----- value types used ----
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey1234    = 2
	codecSelfer_containerMapValue1234  = 3
	codecSelfer_containerMapEnd1234    = 4
	codecSelfer_containerArrayElem1234 = 6
	codecSelfer_containerArrayEnd1234  = 7
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg2_api.ObjectMeta
		var v1 pkg1_unversioned.TypeMeta
		var v2 pkg3_types.UID
		var v3 time.Time
		_, _, _, _ = v0, v1, v2, v3
	}
}

func (x *ConfigSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [2]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Name != ""
			yyq2[1] = len(x.Data) != 0
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(2)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[1] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym7 := z.EncBinary()
						_ = yym7
						if false {
						} else {
							z.F.EncMapStringStringV(x.Data, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym8 := z.EncBinary()
						_ = yym8
						if false {
						} else {
							z.F.EncMapStringStringV(x.Data, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym9 := z.DecBinary()
	_ = yym9
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct10 := r.ContainerType()
		if yyct10 == codecSelferValueTypeMap1234 {
			yyl10 := r.ReadMapStart()
			if yyl10 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl10, d)
			}
		} else if yyct10 == codecSelferValueTypeArray1234 {
			yyl10 := r.ReadArrayStart()
			if yyl10 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl10, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys11Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys11Slc
	var yyhl11 bool = l >= 0
	for yyj11 := 0; ; yyj11++ {
		if yyhl11 {
			if yyj11 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys11Slc = r.DecodeBytes(yys11Slc, true, true)
		yys11 := string(yys11Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys11 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv13 := &x.Data
				yym14 := z.DecBinary()
				_ = yym14
				if false {
				} else {
					z.F.DecMapStringStringX(yyv13, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys11)
		} // end switch yys11
	} // end for yyj11
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj15 int
	var yyb15 bool
	var yyhl15 bool = l >= 0
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv17 := &x.Data
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			z.F.DecMapStringStringX(yyv17, false, d)
		}
	}
	for {
		yyj15++
		if yyhl15 {
			yyb15 = yyj15 > l
		} else {
			yyb15 = r.CheckBreak()
		}
		if yyb15 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj15-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *UserSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym19 := z.EncBinary()
		_ = yym19
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep20 := !z.EncBinary()
			yy2arr20 := z.EncBasicHandle().StructToArray
			var yyq20 [3]bool
			_, _, _ = yysep20, yyq20, yy2arr20
			const yyr20 bool = false
			var yynn20 int
			if yyr20 || yy2arr20 {
				r.EncodeArrayStart(3)
			} else {
				yynn20 = 3
				for _, b := range yyq20 {
					if b {
						yynn20++
					}
				}
				r.EncodeMapStart(yynn20)
				yynn20 = 0
			}
			if yyr20 || yy2arr20 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym22 := z.EncBinary()
				_ = yym22
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym23 := z.EncBinary()
				_ = yym23
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr20 || yy2arr20 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym25 := z.EncBinary()
				_ = yym25
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PasswordHash))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("PasswordHash"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym26 := z.EncBinary()
				_ = yym26
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PasswordHash))
				}
			}
			if yyr20 || yy2arr20 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.SSHAuthorizedKeys == nil {
					r.EncodeNil()
				} else {
					yym28 := z.EncBinary()
					_ = yym28
					if false {
					} else {
						z.F.EncSliceStringV(x.SSHAuthorizedKeys, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("SSHAuthorizedKeys"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.SSHAuthorizedKeys == nil {
					r.EncodeNil()
				} else {
					yym29 := z.EncBinary()
					_ = yym29
					if false {
					} else {
						z.F.EncSliceStringV(x.SSHAuthorizedKeys, false, e)
					}
				}
			}
			if yyr20 || yy2arr20 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *UserSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym30 := z.DecBinary()
	_ = yym30
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct31 := r.ContainerType()
		if yyct31 == codecSelferValueTypeMap1234 {
			yyl31 := r.ReadMapStart()
			if yyl31 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl31, d)
			}
		} else if yyct31 == codecSelferValueTypeArray1234 {
			yyl31 := r.ReadArrayStart()
			if yyl31 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl31, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *UserSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys32Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys32Slc
	var yyhl32 bool = l >= 0
	for yyj32 := 0; ; yyj32++ {
		if yyhl32 {
			if yyj32 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys32Slc = r.DecodeBytes(yys32Slc, true, true)
		yys32 := string(yys32Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys32 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "PasswordHash":
			if r.TryDecodeAsNil() {
				x.PasswordHash = ""
			} else {
				x.PasswordHash = string(r.DecodeString())
			}
		case "SSHAuthorizedKeys":
			if r.TryDecodeAsNil() {
				x.SSHAuthorizedKeys = nil
			} else {
				yyv35 := &x.SSHAuthorizedKeys
				yym36 := z.DecBinary()
				_ = yym36
				if false {
				} else {
					z.F.DecSliceStringX(yyv35, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys32)
		} // end switch yys32
	} // end for yyj32
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *UserSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj37 int
	var yyb37 bool
	var yyhl37 bool = l >= 0
	yyj37++
	if yyhl37 {
		yyb37 = yyj37 > l
	} else {
		yyb37 = r.CheckBreak()
	}
	if yyb37 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj37++
	if yyhl37 {
		yyb37 = yyj37 > l
	} else {
		yyb37 = r.CheckBreak()
	}
	if yyb37 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PasswordHash = ""
	} else {
		x.PasswordHash = string(r.DecodeString())
	}
	yyj37++
	if yyhl37 {
		yyb37 = yyj37 > l
	} else {
		yyb37 = r.CheckBreak()
	}
	if yyb37 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SSHAuthorizedKeys = nil
	} else {
		yyv40 := &x.SSHAuthorizedKeys
		yym41 := z.DecBinary()
		_ = yym41
		if false {
		} else {
			z.F.DecSliceStringX(yyv40, false, d)
		}
	}
	for {
		yyj37++
		if yyhl37 {
			yyb37 = yyj37 > l
		} else {
			yyb37 = r.CheckBreak()
		}
		if yyb37 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj37-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *User) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym42 := z.EncBinary()
		_ = yym42
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep43 := !z.EncBinary()
			yy2arr43 := z.EncBasicHandle().StructToArray
			var yyq43 [4]bool
			_, _, _ = yysep43, yyq43, yy2arr43
			const yyr43 bool = false
			yyq43[0] = x.Kind != ""
			yyq43[1] = x.APIVersion != ""
			var yynn43 int
			if yyr43 || yy2arr43 {
				r.EncodeArrayStart(4)
			} else {
				yynn43 = 2
				for _, b := range yyq43 {
					if b {
						yynn43++
					}
				}
				r.EncodeMapStart(yynn43)
				yynn43 = 0
			}
			if yyr43 || yy2arr43 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq43[0] {
					yym45 := z.EncBinary()
					_ = yym45
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq43[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym46 := z.EncBinary()
					_ = yym46
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr43 || yy2arr43 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq43[1] {
					yym48 := z.EncBinary()
					_ = yym48
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq43[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym49 := z.EncBinary()
					_ = yym49
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr43 || yy2arr43 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy51 := &x.ObjectMeta
				yy51.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("metadata"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy52 := &x.ObjectMeta
				yy52.CodecEncodeSelf(e)
			}
			if yyr43 || yy2arr43 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy54 := &x.Spec
				yy54.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Spec"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy55 := &x.Spec
				yy55.CodecEncodeSelf(e)
			}
			if yyr43 || yy2arr43 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *User) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym56 := z.DecBinary()
	_ = yym56
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct57 := r.ContainerType()
		if yyct57 == codecSelferValueTypeMap1234 {
			yyl57 := r.ReadMapStart()
			if yyl57 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl57, d)
			}
		} else if yyct57 == codecSelferValueTypeArray1234 {
			yyl57 := r.ReadArrayStart()
			if yyl57 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl57, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *User) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys58Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys58Slc
	var yyhl58 bool = l >= 0
	for yyj58 := 0; ; yyj58++ {
		if yyhl58 {
			if yyj58 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys58Slc = r.DecodeBytes(yys58Slc, true, true)
		yys58 := string(yys58Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys58 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv61 := &x.ObjectMeta
				yyv61.CodecDecodeSelf(d)
			}
		case "Spec":
			if r.TryDecodeAsNil() {
				x.Spec = UserSpec{}
			} else {
				yyv62 := &x.Spec
				yyv62.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys58)
		} // end switch yys58
	} // end for yyj58
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *User) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj63 int
	var yyb63 bool
	var yyhl63 bool = l >= 0
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv66 := &x.ObjectMeta
		yyv66.CodecDecodeSelf(d)
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = UserSpec{}
	} else {
		yyv67 := &x.Spec
		yyv67.CodecDecodeSelf(d)
	}
	for {
		yyj63++
		if yyhl63 {
			yyb63 = yyj63 > l
		} else {
			yyb63 = r.CheckBreak()
		}
		if yyb63 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj63-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *UserList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym68 := z.EncBinary()
		_ = yym68
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep69 := !z.EncBinary()
			yy2arr69 := z.EncBasicHandle().StructToArray
			var yyq69 [4]bool
			_, _, _ = yysep69, yyq69, yy2arr69
			const yyr69 bool = false
			yyq69[0] = x.Kind != ""
			yyq69[1] = x.APIVersion != ""
			var yynn69 int
			if yyr69 || yy2arr69 {
				r.EncodeArrayStart(4)
			} else {
				yynn69 = 2
				for _, b := range yyq69 {
					if b {
						yynn69++
					}
				}
				r.EncodeMapStart(yynn69)
				yynn69 = 0
			}
			if yyr69 || yy2arr69 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq69[0] {
					yym71 := z.EncBinary()
					_ = yym71
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq69[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym72 := z.EncBinary()
					_ = yym72
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr69 || yy2arr69 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq69[1] {
					yym74 := z.EncBinary()
					_ = yym74
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq69[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym75 := z.EncBinary()
					_ = yym75
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr69 || yy2arr69 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy77 := &x.ListMeta
				yym78 := z.EncBinary()
				_ = yym78
				if false {
				} else if z.HasExtensions() && z.EncExt(yy77) {
				} else {
					z.EncFallback(yy77)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("metadata"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy79 := &x.ListMeta
				yym80 := z.EncBinary()
				_ = yym80
				if false {
				} else if z.HasExtensions() && z.EncExt(yy79) {
				} else {
					z.EncFallback(yy79)
				}
			}
			if yyr69 || yy2arr69 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym82 := z.EncBinary()
					_ = yym82
					if false {
					} else {
						h.encSlicePtrtoUser(([]*User)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym83 := z.EncBinary()
					_ = yym83
					if false {
					} else {
						h.encSlicePtrtoUser(([]*User)(x.Items), e)
					}
				}
			}
			if yyr69 || yy2arr69 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *UserList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym84 := z.DecBinary()
	_ = yym84
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct85 := r.ContainerType()
		if yyct85 == codecSelferValueTypeMap1234 {
			yyl85 := r.ReadMapStart()
			if yyl85 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl85, d)
			}
		} else if yyct85 == codecSelferValueTypeArray1234 {
			yyl85 := r.ReadArrayStart()
			if yyl85 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl85, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *UserList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys86Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys86Slc
	var yyhl86 bool = l >= 0
	for yyj86 := 0; ; yyj86++ {
		if yyhl86 {
			if yyj86 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys86Slc = r.DecodeBytes(yys86Slc, true, true)
		yys86 := string(yys86Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys86 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv89 := &x.ListMeta
				yym90 := z.DecBinary()
				_ = yym90
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv89) {
				} else {
					z.DecFallback(yyv89, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv91 := &x.Items
				yym92 := z.DecBinary()
				_ = yym92
				if false {
				} else {
					h.decSlicePtrtoUser((*[]*User)(yyv91), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys86)
		} // end switch yys86
	} // end for yyj86
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *UserList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj93 int
	var yyb93 bool
	var yyhl93 bool = l >= 0
	yyj93++
	if yyhl93 {
		yyb93 = yyj93 > l
	} else {
		yyb93 = r.CheckBreak()
	}
	if yyb93 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj93++
	if yyhl93 {
		yyb93 = yyj93 > l
	} else {
		yyb93 = r.CheckBreak()
	}
	if yyb93 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj93++
	if yyhl93 {
		yyb93 = yyj93 > l
	} else {
		yyb93 = r.CheckBreak()
	}
	if yyb93 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv96 := &x.ListMeta
		yym97 := z.DecBinary()
		_ = yym97
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv96) {
		} else {
			z.DecFallback(yyv96, false)
		}
	}
	yyj93++
	if yyhl93 {
		yyb93 = yyj93 > l
	} else {
		yyb93 = r.CheckBreak()
	}
	if yyb93 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv98 := &x.Items
		yym99 := z.DecBinary()
		_ = yym99
		if false {
		} else {
			h.decSlicePtrtoUser((*[]*User)(yyv98), d)
		}
	}
	for {
		yyj93++
		if yyhl93 {
			yyb93 = yyj93 > l
		} else {
			yyb93 = r.CheckBreak()
		}
		if yyb93 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj93-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NetworkSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym100 := z.EncBinary()
		_ = yym100
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep101 := !z.EncBinary()
			yy2arr101 := z.EncBasicHandle().StructToArray
			var yyq101 [3]bool
			_, _, _ = yysep101, yyq101, yy2arr101
			const yyr101 bool = false
			var yynn101 int
			if yyr101 || yy2arr101 {
				r.EncodeArrayStart(3)
			} else {
				yynn101 = 3
				for _, b := range yyq101 {
					if b {
						yynn101++
					}
				}
				r.EncodeMapStart(yynn101)
				yynn101 = 0
			}
			if yyr101 || yy2arr101 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym103 := z.EncBinary()
				_ = yym103
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym104 := z.EncBinary()
				_ = yym104
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Region))
				}
			}
			if yyr101 || yy2arr101 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym106 := z.EncBinary()
				_ = yym106
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Zone))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Zone"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym107 := z.EncBinary()
				_ = yym107
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Zone))
				}
			}
			if yyr101 || yy2arr101 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym109 := z.EncBinary()
				_ = yym109
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Subnet))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Subnet"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym110 := z.EncBinary()
				_ = yym110
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Subnet))
				}
			}
			if yyr101 || yy2arr101 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NetworkSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym111 := z.DecBinary()
	_ = yym111
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct112 := r.ContainerType()
		if yyct112 == codecSelferValueTypeMap1234 {
			yyl112 := r.ReadMapStart()
			if yyl112 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl112, d)
			}
		} else if yyct112 == codecSelferValueTypeArray1234 {
			yyl112 := r.ReadArrayStart()
			if yyl112 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl112, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NetworkSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys113Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys113Slc
	var yyhl113 bool = l >= 0
	for yyj113 := 0; ; yyj113++ {
		if yyhl113 {
			if yyj113 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys113Slc = r.DecodeBytes(yys113Slc, true, true)
		yys113 := string(yys113Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys113 {
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				x.Region = string(r.DecodeString())
			}
		case "Zone":
			if r.TryDecodeAsNil() {
				x.Zone = ""
			} else {
				x.Zone = string(r.DecodeString())
			}
		case "Subnet":
			if r.TryDecodeAsNil() {
				x.Subnet = ""
			} else {
				x.Subnet = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys113)
		} // end switch yys113
	} // end for yyj113
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NetworkSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj117 int
	var yyb117 bool
	var yyhl117 bool = l >= 0
	yyj117++
	if yyhl117 {
		yyb117 = yyj117 > l
	} else {
		yyb117 = r.CheckBreak()
	}
	if yyb117 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		x.Region = string(r.DecodeString())
	}
	yyj117++
	if yyhl117 {
		yyb117 = yyj117 > l
	} else {
		yyb117 = r.CheckBreak()
	}
	if yyb117 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Zone = ""
	} else {
		x.Zone = string(r.DecodeString())
	}
	yyj117++
	if yyhl117 {
		yyb117 = yyj117 > l
	} else {
		yyb117 = r.CheckBreak()
	}
	if yyb117 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subnet = ""
	} else {
		x.Subnet = string(r.DecodeString())
	}
	for {
		yyj117++
		if yyhl117 {
			yyb117 = yyj117 > l
		} else {
			yyb117 = r.CheckBreak()
		}
		if yyb117 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj117-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NetworkStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym121 := z.EncBinary()
		_ = yym121
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep122 := !z.EncBinary()
			yy2arr122 := z.EncBasicHandle().StructToArray
			var yyq122 [1]bool
			_, _, _ = yysep122, yyq122, yy2arr122
			const yyr122 bool = false
			var yynn122 int
			if yyr122 || yy2arr122 {
				r.EncodeArrayStart(1)
			} else {
				yynn122 = 1
				for _, b := range yyq122 {
					if b {
						yynn122++
					}
				}
				r.EncodeMapStart(yynn122)
				yynn122 = 0
			}
			if yyr122 || yy2arr122 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Phase.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Phase"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Phase.CodecEncodeSelf(e)
			}
			if yyr122 || yy2arr122 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NetworkStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym124 := z.DecBinary()
	_ = yym124
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct125 := r.ContainerType()
		if yyct125 == codecSelferValueTypeMap1234 {
			yyl125 := r.ReadMapStart()
			if yyl125 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl125, d)
			}
		} else if yyct125 == codecSelferValueTypeArray1234 {
			yyl125 := r.ReadArrayStart()
			if yyl125 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl125, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NetworkStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys126Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys126Slc
	var yyhl126 bool = l >= 0
	for yyj126 := 0; ; yyj126++ {
		if yyhl126 {
			if yyj126 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys126Slc = r.DecodeBytes(yys126Slc, true, true)
		yys126 := string(yys126Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys126 {
		case "Phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NetworkPhase(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys126)
		} // end switch yys126
	} // end for yyj126
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NetworkStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj128 int
	var yyb128 bool
	var yyhl128 bool = l >= 0
	yyj128++
	if yyhl128 {
		yyb128 = yyj128 > l
	} else {
		yyb128 = r.CheckBreak()
	}
	if yyb128 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NetworkPhase(r.DecodeString())
	}
	for {
		yyj128++
		if yyhl128 {
			yyb128 = yyj128 > l
		} else {
			yyb128 = r.CheckBreak()
		}
		if yyb128 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj128-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NetworkPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym130 := z.EncBinary()
	_ = yym130
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NetworkPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym131 := z.DecBinary()
	_ = yym131
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Network) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym132 := z.EncBinary()
		_ = yym132
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep133 := !z.EncBinary()
			yy2arr133 := z.EncBasicHandle().StructToArray
			var yyq133 [5]bool
			_, _, _ = yysep133, yyq133, yy2arr133
			const yyr133 bool = false
			yyq133[0] = x.Kind != ""
			yyq133[1] = x.APIVersion != ""
			yyq133[3] = true
			yyq133[4] = true
			var yynn133 int
			if yyr133 || yy2arr133 {
				r.EncodeArrayStart(5)
			} else {
				yynn133 = 1
				for _, b := range yyq133 {
					if b {
						yynn133++
					}
				}
				r.EncodeMapStart(yynn133)
				yynn133 = 0
			}
			if yyr133 || yy2arr133 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq133[0] {
					yym135 := z.EncBinary()
					_ = yym135
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq133[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym136 := z.EncBinary()
					_ = yym136
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr133 || yy2arr133 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq133[1] {
					yym138 := z.EncBinary()
					_ = yym138
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq133[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym139 := z.EncBinary()
					_ = yym139
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr133 || yy2arr133 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy141 := &x.ObjectMeta
				yy141.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("metadata"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy142 := &x.ObjectMeta
				yy142.CodecEncodeSelf(e)
			}
			if yyr133 || yy2arr133 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq133[3] {
					yy144 := &x.Spec
					yy144.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq133[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy145 := &x.Spec
					yy145.CodecEncodeSelf(e)
				}
			}
			if yyr133 || yy2arr133 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq133[4] {
					yy147 := &x.Status
					yy147.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq133[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy148 := &x.Status
					yy148.CodecEncodeSelf(e)
				}
			}
			if yyr133 || yy2arr133 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Network) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym149 := z.DecBinary()
	_ = yym149
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct150 := r.ContainerType()
		if yyct150 == codecSelferValueTypeMap1234 {
			yyl150 := r.ReadMapStart()
			if yyl150 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl150, d)
			}
		} else if yyct150 == codecSelferValueTypeArray1234 {
			yyl150 := r.ReadArrayStart()
			if yyl150 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl150, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Network) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys151Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys151Slc
	var yyhl151 bool = l >= 0
	for yyj151 := 0; ; yyj151++ {
		if yyhl151 {
			if yyj151 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys151Slc = r.DecodeBytes(yys151Slc, true, true)
		yys151 := string(yys151Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys151 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv154 := &x.ObjectMeta
				yyv154.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NetworkSpec{}
			} else {
				yyv155 := &x.Spec
				yyv155.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NetworkStatus{}
			} else {
				yyv156 := &x.Status
				yyv156.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys151)
		} // end switch yys151
	} // end for yyj151
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Network) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj157 int
	var yyb157 bool
	var yyhl157 bool = l >= 0
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv160 := &x.ObjectMeta
		yyv160.CodecDecodeSelf(d)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NetworkSpec{}
	} else {
		yyv161 := &x.Spec
		yyv161.CodecDecodeSelf(d)
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NetworkStatus{}
	} else {
		yyv162 := &x.Status
		yyv162.CodecDecodeSelf(d)
	}
	for {
		yyj157++
		if yyhl157 {
			yyb157 = yyj157 > l
		} else {
			yyb157 = r.CheckBreak()
		}
		if yyb157 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj157-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NetworkList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym163 := z.EncBinary()
		_ = yym163
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep164 := !z.EncBinary()
			yy2arr164 := z.EncBasicHandle().StructToArray
			var yyq164 [4]bool
			_, _, _ = yysep164, yyq164, yy2arr164
			const yyr164 bool = false
			yyq164[0] = x.Kind != ""
			yyq164[1] = x.APIVersion != ""
			var yynn164 int
			if yyr164 || yy2arr164 {
				r.EncodeArrayStart(4)
			} else {
				yynn164 = 2
				for _, b := range yyq164 {
					if b {
						yynn164++
					}
				}
				r.EncodeMapStart(yynn164)
				yynn164 = 0
			}
			if yyr164 || yy2arr164 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq164[0] {
					yym166 := z.EncBinary()
					_ = yym166
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq164[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym167 := z.EncBinary()
					_ = yym167
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr164 || yy2arr164 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq164[1] {
					yym169 := z.EncBinary()
					_ = yym169
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq164[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym170 := z.EncBinary()
					_ = yym170
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr164 || yy2arr164 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy172 := &x.ListMeta
				yym173 := z.EncBinary()
				_ = yym173
				if false {
				} else if z.HasExtensions() && z.EncExt(yy172) {
				} else {
					z.EncFallback(yy172)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("metadata"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy174 := &x.ListMeta
				yym175 := z.EncBinary()
				_ = yym175
				if false {
				} else if z.HasExtensions() && z.EncExt(yy174) {
				} else {
					z.EncFallback(yy174)
				}
			}
			if yyr164 || yy2arr164 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym177 := z.EncBinary()
					_ = yym177
					if false {
					} else {
						h.encSlicePtrtoNetwork(([]*Network)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym178 := z.EncBinary()
					_ = yym178
					if false {
					} else {
						h.encSlicePtrtoNetwork(([]*Network)(x.Items), e)
					}
				}
			}
			if yyr164 || yy2arr164 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NetworkList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym179 := z.DecBinary()
	_ = yym179
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct180 := r.ContainerType()
		if yyct180 == codecSelferValueTypeMap1234 {
			yyl180 := r.ReadMapStart()
			if yyl180 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl180, d)
			}
		} else if yyct180 == codecSelferValueTypeArray1234 {
			yyl180 := r.ReadArrayStart()
			if yyl180 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl180, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NetworkList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys181Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys181Slc
	var yyhl181 bool = l >= 0
	for yyj181 := 0; ; yyj181++ {
		if yyhl181 {
			if yyj181 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys181Slc = r.DecodeBytes(yys181Slc, true, true)
		yys181 := string(yys181Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys181 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv184 := &x.ListMeta
				yym185 := z.DecBinary()
				_ = yym185
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv184) {
				} else {
					z.DecFallback(yyv184, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv186 := &x.Items
				yym187 := z.DecBinary()
				_ = yym187
				if false {
				} else {
					h.decSlicePtrtoNetwork((*[]*Network)(yyv186), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys181)
		} // end switch yys181
	} // end for yyj181
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NetworkList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj188 int
	var yyb188 bool
	var yyhl188 bool = l >= 0
	yyj188++
	if yyhl188 {
		yyb188 = yyj188 > l
	} else {
		yyb188 = r.CheckBreak()
	}
	if yyb188 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj188++
	if yyhl188 {
		yyb188 = yyj188 > l
	} else {
		yyb188 = r.CheckBreak()
	}
	if yyb188 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj188++
	if yyhl188 {
		yyb188 = yyj188 > l
	} else {
		yyb188 = r.CheckBreak()
	}
	if yyb188 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv191 := &x.ListMeta
		yym192 := z.DecBinary()
		_ = yym192
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv191) {
		} else {
			z.DecFallback(yyv191, false)
		}
	}
	yyj188++
	if yyhl188 {
		yyb188 = yyj188 > l
	} else {
		yyb188 = r.CheckBreak()
	}
	if yyb188 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv193 := &x.Items
		yym194 := z.DecBinary()
		_ = yym194
		if false {
		} else {
			h.decSlicePtrtoNetwork((*[]*Network)(yyv193), d)
		}
	}
	for {
		yyj188++
		if yyhl188 {
			yyb188 = yyj188 > l
		} else {
			yyb188 = r.CheckBreak()
		}
		if yyb188 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj188-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *InstanceGroup) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym195 := z.EncBinary()
		_ = yym195
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep196 := !z.EncBinary()
			yy2arr196 := z.EncBasicHandle().StructToArray
			var yyq196 [5]bool
			_, _, _ = yysep196, yyq196, yy2arr196
			const yyr196 bool = false
			yyq196[0] = x.Kind != ""
			yyq196[1] = x.APIVersion != ""
			yyq196[3] = true
			yyq196[4] = true
			var yynn196 int
			if yyr196 || yy2arr196 {
				r.EncodeArrayStart(5)
			} else {
				yynn196 = 1
				for _, b := range yyq196 {
					if b {
						yynn196++
					}
				}
				r.EncodeMapStart(yynn196)
				yynn196 = 0
			}
			if yyr196 || yy2arr196 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq196[0] {
					yym198 := z.EncBinary()
					_ = yym198
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq196[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym199 := z.EncBinary()
					_ = yym199
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr196 || yy2arr196 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq196[1] {
					yym201 := z.EncBinary()
					_ = yym201
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq196[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym202 := z.EncBinary()
					_ = yym202
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr196 || yy2arr196 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy204 := &x.ObjectMeta
				yy204.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("metadata"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy205 := &x.ObjectMeta
				yy205.CodecEncodeSelf(e)
			}
			if yyr196 || yy2arr196 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq196[3] {
					yy207 := &x.Spec
					yy207.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq196[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy208 := &x.Spec
					yy208.CodecEncodeSelf(e)
				}
			}
			if yyr196 || yy2arr196 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq196[4] {
					yy210 := &x.Status
					yy210.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq196[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy211 := &x.Status
					yy211.CodecEncodeSelf(e)
				}
			}
			if yyr196 || yy2arr196 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *InstanceGroup) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym212 := z.DecBinary()
	_ = yym212
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct213 := r.ContainerType()
		if yyct213 == codecSelferValueTypeMap1234 {
			yyl213 := r.ReadMapStart()
			if yyl213 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl213, d)
			}
		} else if yyct213 == codecSelferValueTypeArray1234 {
			yyl213 := r.ReadArrayStart()
			if yyl213 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl213, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *InstanceGroup) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys214Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys214Slc
	var yyhl214 bool = l >= 0
	for yyj214 := 0; ; yyj214++ {
		if yyhl214 {
			if yyj214 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys214Slc = r.DecodeBytes(yys214Slc, true, true)
		yys214 := string(yys214Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys214 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv217 := &x.ObjectMeta
				yyv217.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = InstanceGroupSpec{}
			} else {
				yyv218 := &x.Spec
				yyv218.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = InstanceGroupStatus{}
			} else {
				yyv219 := &x.Status
				yyv219.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys214)
		} // end switch yys214
	} // end for yyj214
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *InstanceGroup) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj220 int
	var yyb220 bool
	var yyhl220 bool = l >= 0
	yyj220++
	if yyhl220 {
		yyb220 = yyj220 > l
	} else {
		yyb220 = r.CheckBreak()
	}
	if yyb220 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj220++
	if yyhl220 {
		yyb220 = yyj220 > l
	} else {
		yyb220 = r.CheckBreak()
	}
	if yyb220 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj220++
	if yyhl220 {
		yyb220 = yyj220 > l
	} else {
		yyb220 = r.CheckBreak()
	}
	if yyb220 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv223 := &x.ObjectMeta
		yyv223.CodecDecodeSelf(d)
	}
	yyj220++
	if yyhl220 {
		yyb220 = yyj220 > l
	} else {
		yyb220 = r.CheckBreak()
	}
	if yyb220 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = InstanceGroupSpec{}
	} else {
		yyv224 := &x.Spec
		yyv224.CodecDecodeSelf(d)
	}
	yyj220++
	if yyhl220 {
		yyb220 = yyj220 > l
	} else {
		yyb220 = r.CheckBreak()
	}
	if yyb220 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = InstanceGroupStatus{}
	} else {
		yyv225 := &x.Status
		yyv225.CodecDecodeSelf(d)
	}
	for {
		yyj220++
		if yyhl220 {
			yyb220 = yyj220 > l
		} else {
			yyb220 = r.CheckBreak()
		}
		if yyb220 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj220-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *InstanceGroupSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym226 := z.EncBinary()
		_ = yym226
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep227 := !z.EncBinary()
			yy2arr227 := z.EncBasicHandle().StructToArray
			var yyq227 [4]bool
			_, _, _ = yysep227, yyq227, yy2arr227
			const yyr227 bool = false
			yyq227[1] = x.MinReadySeconds != 0
			yyq227[2] = x.Selector != nil
			yyq227[3] = true
			var yynn227 int
			if yyr227 || yy2arr227 {
				r.EncodeArrayStart(4)
			} else {
				yynn227 = 1
				for _, b := range yyq227 {
					if b {
						yynn227++
					}
				}
				r.EncodeMapStart(yynn227)
				yynn227 = 0
			}
			if yyr227 || yy2arr227 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym229 := z.EncBinary()
				_ = yym229
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym230 := z.EncBinary()
				_ = yym230
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr227 || yy2arr227 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq227[1] {
					yym232 := z.EncBinary()
					_ = yym232
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq227[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("minReadySeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym233 := z.EncBinary()
					_ = yym233
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				}
			}
			if yyr227 || yy2arr227 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq227[2] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym235 := z.EncBinary()
						_ = yym235
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq227[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym236 := z.EncBinary()
						_ = yym236
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				}
			}
			if yyr227 || yy2arr227 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq227[3] {
					yy238 := &x.Template
					yy238.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq227[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy239 := &x.Template
					yy239.CodecEncodeSelf(e)
				}
			}
			if yyr227 || yy2arr227 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *InstanceGroupSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym240 := z.DecBinary()
	_ = yym240
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct241 := r.ContainerType()
		if yyct241 == codecSelferValueTypeMap1234 {
			yyl241 := r.ReadMapStart()
			if yyl241 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl241, d)
			}
		} else if yyct241 == codecSelferValueTypeArray1234 {
			yyl241 := r.ReadArrayStart()
			if yyl241 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl241, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *InstanceGroupSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys242Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys242Slc
	var yyhl242 bool = l >= 0
	for yyj242 := 0; ; yyj242++ {
		if yyhl242 {
			if yyj242 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys242Slc = r.DecodeBytes(yys242Slc, true, true)
		yys242 := string(yys242Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys242 {
		case "Replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "minReadySeconds":
			if r.TryDecodeAsNil() {
				x.MinReadySeconds = 0
			} else {
				x.MinReadySeconds = int32(r.DecodeInt(32))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(pkg1_unversioned.LabelSelector)
				}
				yym246 := z.DecBinary()
				_ = yym246
				if false {
				} else if z.HasExtensions() && z.DecExt(x.Selector) {
				} else {
					z.DecFallback(x.Selector, false)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = InstanceTemplateSpec{}
			} else {
				yyv247 := &x.Template
				yyv247.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys242)
		} // end switch yys242
	} // end for yyj242
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *InstanceGroupSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj248 int
	var yyb248 bool
	var yyhl248 bool = l >= 0
	yyj248++
	if yyhl248 {
		yyb248 = yyj248 > l
	} else {
		yyb248 = r.CheckBreak()
	}
	if yyb248 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj248++
	if yyhl248 {
		yyb248 = yyj248 > l
	} else {
		yyb248 = r.CheckBreak()
	}
	if yyb248 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MinReadySeconds = 0
	} else {
		x.MinReadySeconds = int32(r.DecodeInt(32))
	}
	yyj248++
	if yyhl248 {
		yyb248 = yyj248 > l
	} else {
		yyb248 = r.CheckBreak()
	}
	if yyb248 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(pkg1_unversioned.LabelSelector)
		}
		yym252 := z.DecBinary()
		_ = yym252
		if false {
		} else if z.HasExtensions() && z.DecExt(x.Selector) {
		} else {
			z.DecFallback(x.Selector, false)
		}
	}
	yyj248++
	if yyhl248 {
		yyb248 = yyj248 > l
	} else {
		yyb248 = r.CheckBreak()
	}
	if yyb248 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = InstanceTemplateSpec{}
	} else {
		yyv253 := &x.Template
		yyv253.CodecDecodeSelf(d)
	}
	for {
		yyj248++
		if yyhl248 {
			yyb248 = yyj248 > l
		} else {
			yyb248 = r.CheckBreak()
		}
		if yyb248 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj248-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x InstanceGroupConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym254 := z.EncBinary()
	_ = yym254
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *InstanceGroupConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym255 := z.DecBinary()
	_ = yym255
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *InstanceGroupCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym256 := z.EncBinary()
		_ = yym256
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep257 := !z.EncBinary()
			yy2arr257 := z.EncBasicHandle().StructToArray
			var yyq257 [5]bool
			_, _, _ = yysep257, yyq257, yy2arr257
			const yyr257 bool = false
			yyq257[2] = true
			yyq257[3] = x.Reason != ""
			yyq257[4] = x.Message != ""
			var yynn257 int
			if yyr257 || yy2arr257 {
				r.EncodeArrayStart(5)
			} else {
				yynn257 = 2
				for _, b := range yyq257 {
					if b {
						yynn257++
					}
				}
				r.EncodeMapStart(yynn257)
				yynn257 = 0
			}
			if yyr257 || yy2arr257 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr257 || yy2arr257 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym260 := z.EncBinary()
				_ = yym260
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Status) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Status))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym261 := z.EncBinary()
				_ = yym261
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Status) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Status))
				}
			}
			if yyr257 || yy2arr257 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq257[2] {
					yy263 := &x.LastTransitionTime
					yym264 := z.EncBinary()
					_ = yym264
					if false {
					} else if z.HasExtensions() && z.EncExt(yy263) {
					} else if yym264 {
						z.EncBinaryMarshal(yy263)
					} else if !yym264 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy263)
					} else {
						z.EncFallback(yy263)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq257[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy265 := &x.LastTransitionTime
					yym266 := z.EncBinary()
					_ = yym266
					if false {
					} else if z.HasExtensions() && z.EncExt(yy265) {
					} else if yym266 {
						z.EncBinaryMarshal(yy265)
					} else if !yym266 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy265)
					} else {
						z.EncFallback(yy265)
					}
				}
			}
			if yyr257 || yy2arr257 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq257[3] {
					yym268 := z.EncBinary()
					_ = yym268
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq257[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym269 := z.EncBinary()
					_ = yym269
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr257 || yy2arr257 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq257[4] {
					yym271 := z.EncBinary()
					_ = yym271
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq257[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym272 := z.EncBinary()
					_ = yym272
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr257 || yy2arr257 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *InstanceGroupCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym273 := z.DecBinary()
	_ = yym273
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct274 := r.ContainerType()
		if yyct274 == codecSelferValueTypeMap1234 {
			yyl274 := r.ReadMapStart()
			if yyl274 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl274, d)
			}
		} else if yyct274 == codecSelferValueTypeArray1234 {
			yyl274 := r.ReadArrayStart()
			if yyl274 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl274, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *InstanceGroupCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys275Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys275Slc
	var yyhl275 bool = l >= 0
	for yyj275 := 0; ; yyj275++ {
		if yyhl275 {
			if yyj275 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys275Slc = r.DecodeBytes(yys275Slc, true, true)
		yys275 := string(yys275Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys275 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = InstanceGroupConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = pkg2_api.ConditionStatus(r.DecodeString())
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg1_unversioned.Time{}
			} else {
				yyv278 := &x.LastTransitionTime
				yym279 := z.DecBinary()
				_ = yym279
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv278) {
				} else if yym279 {
					z.DecBinaryUnmarshal(yyv278)
				} else if !yym279 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv278)
				} else {
					z.DecFallback(yyv278, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys275)
		} // end switch yys275
	} // end for yyj275
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *InstanceGroupCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj282 int
	var yyb282 bool
	var yyhl282 bool = l >= 0
	yyj282++
	if yyhl282 {
		yyb282 = yyj282 > l
	} else {
		yyb282 = r.CheckBreak()
	}
	if yyb282 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = InstanceGroupConditionType(r.DecodeString())
	}
	yyj282++
	if yyhl282 {
		yyb282 = yyj282 > l
	} else {
		yyb282 = r.CheckBreak()
	}
	if yyb282 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = pkg2_api.ConditionStatus(r.DecodeString())
	}
	yyj282++
	if yyhl282 {
		yyb282 = yyj282 > l
	} else {
		yyb282 = r.CheckBreak()
	}
	if yyb282 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg1_unversioned.Time{}
	} else {
		yyv285 := &x.LastTransitionTime
		yym286 := z.DecBinary()
		_ = yym286
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv285) {
		} else if yym286 {
			z.DecBinaryUnmarshal(yyv285)
		} else if !yym286 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv285)
		} else {
			z.DecFallback(yyv285, false)
		}
	}
	yyj282++
	if yyhl282 {
		yyb282 = yyj282 > l
	} else {
		yyb282 = r.CheckBreak()
	}
	if yyb282 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj282++
	if yyhl282 {
		yyb282 = yyj282 > l
	} else {
		yyb282 = r.CheckBreak()
	}
	if yyb282 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj282++
		if yyhl282 {
			yyb282 = yyj282 > l
		} else {
			yyb282 = r.CheckBreak()
		}
		if yyb282 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj282-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *InstanceGroupStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym289 := z.EncBinary()
		_ = yym289
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep290 := !z.EncBinary()
			yy2arr290 := z.EncBasicHandle().StructToArray
			var yyq290 [6]bool
			_, _, _ = yysep290, yyq290, yy2arr290
			const yyr290 bool = false
			yyq290[1] = x.FullyLabeledReplicas != 0
			yyq290[2] = x.ReadyReplicas != 0
			yyq290[3] = x.AvailableReplicas != 0
			yyq290[4] = x.ObservedGeneration != 0
			yyq290[5] = len(x.Conditions) != 0
			var yynn290 int
			if yyr290 || yy2arr290 {
				r.EncodeArrayStart(6)
			} else {
				yynn290 = 1
				for _, b := range yyq290 {
					if b {
						yynn290++
					}
				}
				r.EncodeMapStart(yynn290)
				yynn290 = 0
			}
			if yyr290 || yy2arr290 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym292 := z.EncBinary()
				_ = yym292
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym293 := z.EncBinary()
				_ = yym293
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr290 || yy2arr290 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq290[1] {
					yym295 := z.EncBinary()
					_ = yym295
					if false {
					} else {
						r.EncodeInt(int64(x.FullyLabeledReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq290[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fullyLabeledReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym296 := z.EncBinary()
					_ = yym296
					if false {
					} else {
						r.EncodeInt(int64(x.FullyLabeledReplicas))
					}
				}
			}
			if yyr290 || yy2arr290 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq290[2] {
					yym298 := z.EncBinary()
					_ = yym298
					if false {
					} else {
						r.EncodeInt(int64(x.ReadyReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq290[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readyReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym299 := z.EncBinary()
					_ = yym299
					if false {
					} else {
						r.EncodeInt(int64(x.ReadyReplicas))
					}
				}
			}
			if yyr290 || yy2arr290 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq290[3] {
					yym301 := z.EncBinary()
					_ = yym301
					if false {
					} else {
						r.EncodeInt(int64(x.AvailableReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq290[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("availableReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym302 := z.EncBinary()
					_ = yym302
					if false {
					} else {
						r.EncodeInt(int64(x.AvailableReplicas))
					}
				}
			}
			if yyr290 || yy2arr290 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq290[4] {
					yym304 := z.EncBinary()
					_ = yym304
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq290[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym305 := z.EncBinary()
					_ = yym305
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				}
			}
			if yyr290 || yy2arr290 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq290[5] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym307 := z.EncBinary()
						_ = yym307
						if false {
						} else {
							h.encSliceInstanceGroupCondition(([]InstanceGroupCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq290[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym308 := z.EncBinary()
						_ = yym308
						if false {
						} else {
							h.encSliceInstanceGroupCondition(([]InstanceGroupCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr290 || yy2arr290 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *InstanceGroupStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym309 := z.DecBinary()
	_ = yym309
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct310 := r.ContainerType()
		if yyct310 == codecSelferValueTypeMap1234 {
			yyl310 := r.ReadMapStart()
			if yyl310 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl310, d)
			}
		} else if yyct310 == codecSelferValueTypeArray1234 {
			yyl310 := r.ReadArrayStart()
			if yyl310 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl310, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *InstanceGroupStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys311Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys311Slc
	var yyhl311 bool = l >= 0
	for yyj311 := 0; ; yyj311++ {
		if yyhl311 {
			if yyj311 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys311Slc = r.DecodeBytes(yys311Slc, true, true)
		yys311 := string(yys311Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys311 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "fullyLabeledReplicas":
			if r.TryDecodeAsNil() {
				x.FullyLabeledReplicas = 0
			} else {
				x.FullyLabeledReplicas = int32(r.DecodeInt(32))
			}
		case "readyReplicas":
			if r.TryDecodeAsNil() {
				x.ReadyReplicas = 0
			} else {
				x.ReadyReplicas = int32(r.DecodeInt(32))
			}
		case "availableReplicas":
			if r.TryDecodeAsNil() {
				x.AvailableReplicas = 0
			} else {
				x.AvailableReplicas = int32(r.DecodeInt(32))
			}
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				x.ObservedGeneration = 0
			} else {
				x.ObservedGeneration = int64(r.DecodeInt(64))
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv317 := &x.Conditions
				yym318 := z.DecBinary()
				_ = yym318
				if false {
				} else {
					h.decSliceInstanceGroupCondition((*[]InstanceGroupCondition)(yyv317), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys311)
		} // end switch yys311
	} // end for yyj311
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *InstanceGroupStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj319 int
	var yyb319 bool
	var yyhl319 bool = l >= 0
	yyj319++
	if yyhl319 {
		yyb319 = yyj319 > l
	} else {
		yyb319 = r.CheckBreak()
	}
	if yyb319 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj319++
	if yyhl319 {
		yyb319 = yyj319 > l
	} else {
		yyb319 = r.CheckBreak()
	}
	if yyb319 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FullyLabeledReplicas = 0
	} else {
		x.FullyLabeledReplicas = int32(r.DecodeInt(32))
	}
	yyj319++
	if yyhl319 {
		yyb319 = yyj319 > l
	} else {
		yyb319 = r.CheckBreak()
	}
	if yyb319 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadyReplicas = 0
	} else {
		x.ReadyReplicas = int32(r.DecodeInt(32))
	}
	yyj319++
	if yyhl319 {
		yyb319 = yyj319 > l
	} else {
		yyb319 = r.CheckBreak()
	}
	if yyb319 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AvailableReplicas = 0
	} else {
		x.AvailableReplicas = int32(r.DecodeInt(32))
	}
	yyj319++
	if yyhl319 {
		yyb319 = yyj319 > l
	} else {
		yyb319 = r.CheckBreak()
	}
	if yyb319 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObservedGeneration = 0
	} else {
		x.ObservedGeneration = int64(r.DecodeInt(64))
	}
	yyj319++
	if yyhl319 {
		yyb319 = yyj319 > l
	} else {
		yyb319 = r.CheckBreak()
	}
	if yyb319 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv325 := &x.Conditions
		yym326 := z.DecBinary()
		_ = yym326
		if false {
		} else {
			h.decSliceInstanceGroupCondition((*[]InstanceGroupCondition)(yyv325), d)
		}
	}
	for {
		yyj319++
		if yyhl319 {
			yyb319 = yyj319 > l
		} else {
			yyb319 = r.CheckBreak()
		}
		if yyb319 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj319-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *InstanceGroupList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym327 := z.EncBinary()
		_ = yym327
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep328 := !z.EncBinary()
			yy2arr328 := z.EncBasicHandle().StructToArray
			var yyq328 [4]bool
			_, _, _ = yysep328, yyq328, yy2arr328
			const yyr328 bool = false
			yyq328[0] = x.Kind != ""
			yyq328[1] = x.APIVersion != ""
			var yynn328 int
			if yyr328 || yy2arr328 {
				r.EncodeArrayStart(4)
			} else {
				yynn328 = 2
				for _, b := range yyq328 {
					if b {
						yynn328++
					}
				}
				r.EncodeMapStart(yynn328)
				yynn328 = 0
			}
			if yyr328 || yy2arr328 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq328[0] {
					yym330 := z.EncBinary()
					_ = yym330
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq328[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym331 := z.EncBinary()
					_ = yym331
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr328 || yy2arr328 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq328[1] {
					yym333 := z.EncBinary()
					_ = yym333
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq328[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym334 := z.EncBinary()
					_ = yym334
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr328 || yy2arr328 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy336 := &x.ListMeta
				yym337 := z.EncBinary()
				_ = yym337
				if false {
				} else if z.HasExtensions() && z.EncExt(yy336) {
				} else {
					z.EncFallback(yy336)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("metadata"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy338 := &x.ListMeta
				yym339 := z.EncBinary()
				_ = yym339
				if false {
				} else if z.HasExtensions() && z.EncExt(yy338) {
				} else {
					z.EncFallback(yy338)
				}
			}
			if yyr328 || yy2arr328 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym341 := z.EncBinary()
					_ = yym341
					if false {
					} else {
						h.encSlicePtrtoInstanceGroup(([]*InstanceGroup)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym342 := z.EncBinary()
					_ = yym342
					if false {
					} else {
						h.encSlicePtrtoInstanceGroup(([]*InstanceGroup)(x.Items), e)
					}
				}
			}
			if yyr328 || yy2arr328 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *InstanceGroupList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym343 := z.DecBinary()
	_ = yym343
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct344 := r.ContainerType()
		if yyct344 == codecSelferValueTypeMap1234 {
			yyl344 := r.ReadMapStart()
			if yyl344 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl344, d)
			}
		} else if yyct344 == codecSelferValueTypeArray1234 {
			yyl344 := r.ReadArrayStart()
			if yyl344 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl344, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *InstanceGroupList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys345Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys345Slc
	var yyhl345 bool = l >= 0
	for yyj345 := 0; ; yyj345++ {
		if yyhl345 {
			if yyj345 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys345Slc = r.DecodeBytes(yys345Slc, true, true)
		yys345 := string(yys345Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys345 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv348 := &x.ListMeta
				yym349 := z.DecBinary()
				_ = yym349
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv348) {
				} else {
					z.DecFallback(yyv348, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv350 := &x.Items
				yym351 := z.DecBinary()
				_ = yym351
				if false {
				} else {
					h.decSlicePtrtoInstanceGroup((*[]*InstanceGroup)(yyv350), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys345)
		} // end switch yys345
	} // end for yyj345
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *InstanceGroupList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj352 int
	var yyb352 bool
	var yyhl352 bool = l >= 0
	yyj352++
	if yyhl352 {
		yyb352 = yyj352 > l
	} else {
		yyb352 = r.CheckBreak()
	}
	if yyb352 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj352++
	if yyhl352 {
		yyb352 = yyj352 > l
	} else {
		yyb352 = r.CheckBreak()
	}
	if yyb352 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj352++
	if yyhl352 {
		yyb352 = yyj352 > l
	} else {
		yyb352 = r.CheckBreak()
	}
	if yyb352 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv355 := &x.ListMeta
		yym356 := z.DecBinary()
		_ = yym356
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv355) {
		} else {
			z.DecFallback(yyv355, false)
		}
	}
	yyj352++
	if yyhl352 {
		yyb352 = yyj352 > l
	} else {
		yyb352 = r.CheckBreak()
	}
	if yyb352 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv357 := &x.Items
		yym358 := z.DecBinary()
		_ = yym358
		if false {
		} else {
			h.decSlicePtrtoInstanceGroup((*[]*InstanceGroup)(yyv357), d)
		}
	}
	for {
		yyj352++
		if yyhl352 {
			yyb352 = yyj352 > l
		} else {
			yyb352 = r.CheckBreak()
		}
		if yyb352 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj352-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FileSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym359 := z.EncBinary()
		_ = yym359
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep360 := !z.EncBinary()
			yy2arr360 := z.EncBasicHandle().StructToArray
			var yyq360 [7]bool
			_, _, _ = yysep360, yyq360, yy2arr360
			const yyr360 bool = false
			yyq360[0] = x.Name != ""
			yyq360[1] = x.Encoding != ""
			yyq360[2] = x.Content != ""
			yyq360[3] = x.Template != ""
			yyq360[4] = x.Owner != ""
			yyq360[5] = x.Path != ""
			yyq360[6] = x.RawFilePermissions != ""
			var yynn360 int
			if yyr360 || yy2arr360 {
				r.EncodeArrayStart(7)
			} else {
				yynn360 = 0
				for _, b := range yyq360 {
					if b {
						yynn360++
					}
				}
				r.EncodeMapStart(yynn360)
				yynn360 = 0
			}
			if yyr360 || yy2arr360 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq360[0] {
					yym362 := z.EncBinary()
					_ = yym362
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq360[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym363 := z.EncBinary()
					_ = yym363
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr360 || yy2arr360 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq360[1] {
					yym365 := z.EncBinary()
					_ = yym365
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Encoding))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq360[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("encoding"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym366 := z.EncBinary()
					_ = yym366
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Encoding))
					}
				}
			}
			if yyr360 || yy2arr360 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq360[2] {
					yym368 := z.EncBinary()
					_ = yym368
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Content))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq360[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("content"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym369 := z.EncBinary()
					_ = yym369
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Content))
					}
				}
			}
			if yyr360 || yy2arr360 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq360[3] {
					yym371 := z.EncBinary()
					_ = yym371
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Template))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq360[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym372 := z.EncBinary()
					_ = yym372
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Template))
					}
				}
			}
			if yyr360 || yy2arr360 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq360[4] {
					yym374 := z.EncBinary()
					_ = yym374
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Owner))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq360[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("owner"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym375 := z.EncBinary()
					_ = yym375
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Owner))
					}
				}
			}
			if yyr360 || yy2arr360 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq360[5] {
					yym377 := z.EncBinary()
					_ = yym377
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq360[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym378 := z.EncBinary()
					_ = yym378
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr360 || yy2arr360 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq360[6] {
					yym380 := z.EncBinary()
					_ = yym380
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RawFilePermissions))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq360[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("permissions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym381 := z.EncBinary()
					_ = yym381
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RawFilePermissions))
					}
				}
			}
			if yyr360 || yy2arr360 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FileSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym382 := z.DecBinary()
	_ = yym382
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct383 := r.ContainerType()
		if yyct383 == codecSelferValueTypeMap1234 {
			yyl383 := r.ReadMapStart()
			if yyl383 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl383, d)
			}
		} else if yyct383 == codecSelferValueTypeArray1234 {
			yyl383 := r.ReadArrayStart()
			if yyl383 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl383, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FileSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys384Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys384Slc
	var yyhl384 bool = l >= 0
	for yyj384 := 0; ; yyj384++ {
		if yyhl384 {
			if yyj384 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys384Slc = r.DecodeBytes(yys384Slc, true, true)
		yys384 := string(yys384Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys384 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "encoding":
			if r.TryDecodeAsNil() {
				x.Encoding = ""
			} else {
				x.Encoding = string(r.DecodeString())
			}
		case "content":
			if r.TryDecodeAsNil() {
				x.Content = ""
			} else {
				x.Content = string(r.DecodeString())
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = ""
			} else {
				x.Template = string(r.DecodeString())
			}
		case "owner":
			if r.TryDecodeAsNil() {
				x.Owner = ""
			} else {
				x.Owner = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "permissions":
			if r.TryDecodeAsNil() {
				x.RawFilePermissions = ""
			} else {
				x.RawFilePermissions = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys384)
		} // end switch yys384
	} // end for yyj384
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FileSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj392 int
	var yyb392 bool
	var yyhl392 bool = l >= 0
	yyj392++
	if yyhl392 {
		yyb392 = yyj392 > l
	} else {
		yyb392 = r.CheckBreak()
	}
	if yyb392 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj392++
	if yyhl392 {
		yyb392 = yyj392 > l
	} else {
		yyb392 = r.CheckBreak()
	}
	if yyb392 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Encoding = ""
	} else {
		x.Encoding = string(r.DecodeString())
	}
	yyj392++
	if yyhl392 {
		yyb392 = yyj392 > l
	} else {
		yyb392 = r.CheckBreak()
	}
	if yyb392 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Content = ""
	} else {
		x.Content = string(r.DecodeString())
	}
	yyj392++
	if yyhl392 {
		yyb392 = yyj392 > l
	} else {
		yyb392 = r.CheckBreak()
	}
	if yyb392 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = ""
	} else {
		x.Template = string(r.DecodeString())
	}
	yyj392++
	if yyhl392 {
		yyb392 = yyj392 > l
	} else {
		yyb392 = r.CheckBreak()
	}
	if yyb392 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Owner = ""
	} else {
		x.Owner = string(r.DecodeString())
	}
	yyj392++
	if yyhl392 {
		yyb392 = yyj392 > l
	} else {
		yyb392 = r.CheckBreak()
	}
	if yyb392 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj392++
	if yyhl392 {
		yyb392 = yyj392 > l
	} else {
		yyb392 = r.CheckBreak()
	}
	if yyb392 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RawFilePermissions = ""
	} else {
		x.RawFilePermissions = string(r.DecodeString())
	}
	for {
		yyj392++
		if yyhl392 {
			yyb392 = yyj392 > l
		} else {
			yyb392 = r.CheckBreak()
		}
		if yyb392 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj392-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *InstanceTemplateSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym400 := z.EncBinary()
		_ = yym400
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep401 := !z.EncBinary()
			yy2arr401 := z.EncBasicHandle().StructToArray
			var yyq401 [3]bool
			_, _, _ = yysep401, yyq401, yy2arr401
			const yyr401 bool = false
			yyq401[1] = true
			yyq401[2] = len(x.Secrets) != 0
			var yynn401 int
			if yyr401 || yy2arr401 {
				r.EncodeArrayStart(3)
			} else {
				yynn401 = 1
				for _, b := range yyq401 {
					if b {
						yynn401++
					}
				}
				r.EncodeMapStart(yynn401)
				yynn401 = 0
			}
			if yyr401 || yy2arr401 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy403 := &x.ObjectMeta
				yy403.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("metadata"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy404 := &x.ObjectMeta
				yy404.CodecEncodeSelf(e)
			}
			if yyr401 || yy2arr401 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq401[1] {
					yy406 := &x.Spec
					yy406.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq401[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy407 := &x.Spec
					yy407.CodecEncodeSelf(e)
				}
			}
			if yyr401 || yy2arr401 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq401[2] {
					if x.Secrets == nil {
						r.EncodeNil()
					} else {
						yym409 := z.EncBinary()
						_ = yym409
						if false {
						} else {
							h.encSliceapi_Secret(([]pkg2_api.Secret)(x.Secrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq401[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Secrets == nil {
						r.EncodeNil()
					} else {
						yym410 := z.EncBinary()
						_ = yym410
						if false {
						} else {
							h.encSliceapi_Secret(([]pkg2_api.Secret)(x.Secrets), e)
						}
					}
				}
			}
			if yyr401 || yy2arr401 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *InstanceTemplateSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym411 := z.DecBinary()
	_ = yym411
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct412 := r.ContainerType()
		if yyct412 == codecSelferValueTypeMap1234 {
			yyl412 := r.ReadMapStart()
			if yyl412 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl412, d)
			}
		} else if yyct412 == codecSelferValueTypeArray1234 {
			yyl412 := r.ReadArrayStart()
			if yyl412 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl412, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *InstanceTemplateSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys413Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys413Slc
	var yyhl413 bool = l >= 0
	for yyj413 := 0; ; yyj413++ {
		if yyhl413 {
			if yyj413 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys413Slc = r.DecodeBytes(yys413Slc, true, true)
		yys413 := string(yys413Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys413 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv414 := &x.ObjectMeta
				yyv414.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = InstanceSpec{}
			} else {
				yyv415 := &x.Spec
				yyv415.CodecDecodeSelf(d)
			}
		case "secrets":
			if r.TryDecodeAsNil() {
				x.Secrets = nil
			} else {
				yyv416 := &x.Secrets
				yym417 := z.DecBinary()
				_ = yym417
				if false {
				} else {
					h.decSliceapi_Secret((*[]pkg2_api.Secret)(yyv416), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys413)
		} // end switch yys413
	} // end for yyj413
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *InstanceTemplateSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj418 int
	var yyb418 bool
	var yyhl418 bool = l >= 0
	yyj418++
	if yyhl418 {
		yyb418 = yyj418 > l
	} else {
		yyb418 = r.CheckBreak()
	}
	if yyb418 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv419 := &x.ObjectMeta
		yyv419.CodecDecodeSelf(d)
	}
	yyj418++
	if yyhl418 {
		yyb418 = yyj418 > l
	} else {
		yyb418 = r.CheckBreak()
	}
	if yyb418 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = InstanceSpec{}
	} else {
		yyv420 := &x.Spec
		yyv420.CodecDecodeSelf(d)
	}
	yyj418++
	if yyhl418 {
		yyb418 = yyj418 > l
	} else {
		yyb418 = r.CheckBreak()
	}
	if yyb418 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Secrets = nil
	} else {
		yyv421 := &x.Secrets
		yym422 := z.DecBinary()
		_ = yym422
		if false {
		} else {
			h.decSliceapi_Secret((*[]pkg2_api.Secret)(yyv421), d)
		}
	}
	for {
		yyj418++
		if yyhl418 {
			yyb418 = yyj418 > l
		} else {
			yyb418 = r.CheckBreak()
		}
		if yyb418 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj418-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *InstanceOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym423 := z.EncBinary()
		_ = yym423
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep424 := !z.EncBinary()
			yy2arr424 := z.EncBasicHandle().StructToArray
			var yyq424 [2]bool
			_, _, _ = yysep424, yyq424, yy2arr424
			const yyr424 bool = false
			var yynn424 int
			if yyr424 || yy2arr424 {
				r.EncodeArrayStart(2)
			} else {
				yynn424 = 2
				for _, b := range yyq424 {
					if b {
						yynn424++
					}
				}
				r.EncodeMapStart(yynn424)
				yynn424 = 0
			}
			if yyr424 || yy2arr424 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym426 := z.EncBinary()
				_ = yym426
				if false {
				} else {
					r.EncodeBool(bool(x.PreallocatePublicIP))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("PreallocatePublicIP"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym427 := z.EncBinary()
				_ = yym427
				if false {
				} else {
					r.EncodeBool(bool(x.PreallocatePublicIP))
				}
			}
			if yyr424 || yy2arr424 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym429 := z.EncBinary()
				_ = yym429
				if false {
				} else {
					r.EncodeBool(bool(x.PreallocatePrivateIP))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("PreallocatePrivateIP"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym430 := z.EncBinary()
				_ = yym430
				if false {
				} else {
					r.EncodeBool(bool(x.PreallocatePrivateIP))
				}
			}
			if yyr424 || yy2arr424 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *InstanceOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym431 := z.DecBinary()
	_ = yym431
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct432 := r.ContainerType()
		if yyct432 == codecSelferValueTypeMap1234 {
			yyl432 := r.ReadMapStart()
			if yyl432 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl432, d)
			}
		} else if yyct432 == codecSelferValueTypeArray1234 {
			yyl432 := r.ReadArrayStart()
			if yyl432 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl432, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *InstanceOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys433Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys433Slc
	var yyhl433 bool = l >= 0
	for yyj433 := 0; ; yyj433++ {
		if yyhl433 {
			if yyj433 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys433Slc = r.DecodeBytes(yys433Slc, true, true)
		yys433 := string(yys433Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys433 {
		case "PreallocatePublicIP":
			if r.TryDecodeAsNil() {
				x.PreallocatePublicIP = false
			} else {
				x.PreallocatePublicIP = bool(r.DecodeBool())
			}
		case "PreallocatePrivateIP":
			if r.TryDecodeAsNil() {
				x.PreallocatePrivateIP = false
			} else {
				x.PreallocatePrivateIP = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys433)
		} // end switch yys433
	} // end for yyj433
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *InstanceOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj436 int
	var yyb436 bool
	var yyhl436 bool = l >= 0
	yyj436++
	if yyhl436 {
		yyb436 = yyj436 > l
	} else {
		yyb436 = r.CheckBreak()
	}
	if yyb436 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreallocatePublicIP = false
	} else {
		x.PreallocatePublicIP = bool(r.DecodeBool())
	}
	yyj436++
	if yyhl436 {
		yyb436 = yyj436 > l
	} else {
		yyb436 = r.CheckBreak()
	}
	if yyb436 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreallocatePrivateIP = false
	} else {
		x.PreallocatePrivateIP = bool(r.DecodeBool())
	}
	for {
		yyj436++
		if yyhl436 {
			yyb436 = yyj436 > l
		} else {
			yyb436 = r.CheckBreak()
		}
		if yyb436 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj436-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *InstanceDependency) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym439 := z.EncBinary()
		_ = yym439
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep440 := !z.EncBinary()
			yy2arr440 := z.EncBasicHandle().StructToArray
			var yyq440 [3]bool
			_, _, _ = yysep440, yyq440, yy2arr440
			const yyr440 bool = false
			yyq440[0] = true
			yyq440[1] = len(x.Secrets) != 0
			yyq440[2] = len(x.Users) != 0
			var yynn440 int
			if yyr440 || yy2arr440 {
				r.EncodeArrayStart(3)
			} else {
				yynn440 = 0
				for _, b := range yyq440 {
					if b {
						yynn440++
					}
				}
				r.EncodeMapStart(yynn440)
				yynn440 = 0
			}
			if yyr440 || yy2arr440 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq440[0] {
					yy442 := &x.Network
					yy442.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq440[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("network"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy443 := &x.Network
					yy443.CodecEncodeSelf(e)
				}
			}
			if yyr440 || yy2arr440 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq440[1] {
					if x.Secrets == nil {
						r.EncodeNil()
					} else {
						yym445 := z.EncBinary()
						_ = yym445
						if false {
						} else {
							h.encSliceapi_Secret(([]pkg2_api.Secret)(x.Secrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq440[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Secrets == nil {
						r.EncodeNil()
					} else {
						yym446 := z.EncBinary()
						_ = yym446
						if false {
						} else {
							h.encSliceapi_Secret(([]pkg2_api.Secret)(x.Secrets), e)
						}
					}
				}
			}
			if yyr440 || yy2arr440 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq440[2] {
					if x.Users == nil {
						r.EncodeNil()
					} else {
						yym448 := z.EncBinary()
						_ = yym448
						if false {
						} else {
							h.encSliceUser(([]User)(x.Users), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq440[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("users"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Users == nil {
						r.EncodeNil()
					} else {
						yym449 := z.EncBinary()
						_ = yym449
						if false {
						} else {
							h.encSliceUser(([]User)(x.Users), e)
						}
					}
				}
			}
			if yyr440 || yy2arr440 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *InstanceDependency) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym450 := z.DecBinary()
	_ = yym450
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct451 := r.ContainerType()
		if yyct451 == codecSelferValueTypeMap1234 {
			yyl451 := r.ReadMapStart()
			if yyl451 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl451, d)
			}
		} else if yyct451 == codecSelferValueTypeArray1234 {
			yyl451 := r.ReadArrayStart()
			if yyl451 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl451, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *InstanceDependency) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys452Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys452Slc
	var yyhl452 bool = l >= 0
	for yyj452 := 0; ; yyj452++ {
		if yyhl452 {
			if yyj452 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys452Slc = r.DecodeBytes(yys452Slc, true, true)
		yys452 := string(yys452Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys452 {
		case "network":
			if r.TryDecodeAsNil() {
				x.Network = Network{}
			} else {
				yyv453 := &x.Network
				yyv453.CodecDecodeSelf(d)
			}
		case "secrets":
			if r.TryDecodeAsNil() {
				x.Secrets = nil
			} else {
				yyv454 := &x.Secrets
				yym455 := z.DecBinary()
				_ = yym455
				if false {
				} else {
					h.decSliceapi_Secret((*[]pkg2_api.Secret)(yyv454), d)
				}
			}
		case "users":
			if r.TryDecodeAsNil() {
				x.Users = nil
			} else {
				yyv456 := &x.Users
				yym457 := z.DecBinary()
				_ = yym457
				if false {
				} else {
					h.decSliceUser((*[]User)(yyv456), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys452)
		} // end switch yys452
	} // end for yyj452
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *InstanceDependency) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj458 int
	var yyb458 bool
	var yyhl458 bool = l >= 0
	yyj458++
	if yyhl458 {
		yyb458 = yyj458 > l
	} else {
		yyb458 = r.CheckBreak()
	}
	if yyb458 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Network = Network{}
	} else {
		yyv459 := &x.Network
		yyv459.CodecDecodeSelf(d)
	}
	yyj458++
	if yyhl458 {
		yyb458 = yyj458 > l
	} else {
		yyb458 = r.CheckBreak()
	}
	if yyb458 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Secrets = nil
	} else {
		yyv460 := &x.Secrets
		yym461 := z.DecBinary()
		_ = yym461
		if false {
		} else {
			h.decSliceapi_Secret((*[]pkg2_api.Secret)(yyv460), d)
		}
	}
	yyj458++
	if yyhl458 {
		yyb458 = yyj458 > l
	} else {
		yyb458 = r.CheckBreak()
	}
	if yyb458 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Users = nil
	} else {
		yyv462 := &x.Users
		yym463 := z.DecBinary()
		_ = yym463
		if false {
		} else {
			h.decSliceUser((*[]User)(yyv462), d)
		}
	}
	for {
		yyj458++
		if yyhl458 {
			yyb458 = yyj458 > l
		} else {
			yyb458 = r.CheckBreak()
		}
		if yyb458 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj458-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Instance) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym464 := z.EncBinary()
		_ = yym464
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep465 := !z.EncBinary()
			yy2arr465 := z.EncBasicHandle().StructToArray
			var yyq465 [5]bool
			_, _, _ = yysep465, yyq465, yy2arr465
			const yyr465 bool = false
			yyq465[0] = x.Kind != ""
			yyq465[1] = x.APIVersion != ""
			yyq465[3] = true
			yyq465[4] = true
			var yynn465 int
			if yyr465 || yy2arr465 {
				r.EncodeArrayStart(5)
			} else {
				yynn465 = 1
				for _, b := range yyq465 {
					if b {
						yynn465++
					}
				}
				r.EncodeMapStart(yynn465)
				yynn465 = 0
			}
			if yyr465 || yy2arr465 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq465[0] {
					yym467 := z.EncBinary()
					_ = yym467
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq465[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym468 := z.EncBinary()
					_ = yym468
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr465 || yy2arr465 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq465[1] {
					yym470 := z.EncBinary()
					_ = yym470
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq465[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym471 := z.EncBinary()
					_ = yym471
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr465 || yy2arr465 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy473 := &x.ObjectMeta
				yy473.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("metadata"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy474 := &x.ObjectMeta
				yy474.CodecEncodeSelf(e)
			}
			if yyr465 || yy2arr465 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq465[3] {
					yy476 := &x.Spec
					yy476.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq465[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy477 := &x.Spec
					yy477.CodecEncodeSelf(e)
				}
			}
			if yyr465 || yy2arr465 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq465[4] {
					yy479 := &x.Status
					yy479.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq465[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy480 := &x.Status
					yy480.CodecEncodeSelf(e)
				}
			}
			if yyr465 || yy2arr465 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Instance) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym481 := z.DecBinary()
	_ = yym481
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct482 := r.ContainerType()
		if yyct482 == codecSelferValueTypeMap1234 {
			yyl482 := r.ReadMapStart()
			if yyl482 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl482, d)
			}
		} else if yyct482 == codecSelferValueTypeArray1234 {
			yyl482 := r.ReadArrayStart()
			if yyl482 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl482, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Instance) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys483Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys483Slc
	var yyhl483 bool = l >= 0
	for yyj483 := 0; ; yyj483++ {
		if yyhl483 {
			if yyj483 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys483Slc = r.DecodeBytes(yys483Slc, true, true)
		yys483 := string(yys483Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys483 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv486 := &x.ObjectMeta
				yyv486.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = InstanceSpec{}
			} else {
				yyv487 := &x.Spec
				yyv487.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = InstanceStatus{}
			} else {
				yyv488 := &x.Status
				yyv488.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys483)
		} // end switch yys483
	} // end for yyj483
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Instance) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj489 int
	var yyb489 bool
	var yyhl489 bool = l >= 0
	yyj489++
	if yyhl489 {
		yyb489 = yyj489 > l
	} else {
		yyb489 = r.CheckBreak()
	}
	if yyb489 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj489++
	if yyhl489 {
		yyb489 = yyj489 > l
	} else {
		yyb489 = r.CheckBreak()
	}
	if yyb489 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj489++
	if yyhl489 {
		yyb489 = yyj489 > l
	} else {
		yyb489 = r.CheckBreak()
	}
	if yyb489 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv492 := &x.ObjectMeta
		yyv492.CodecDecodeSelf(d)
	}
	yyj489++
	if yyhl489 {
		yyb489 = yyj489 > l
	} else {
		yyb489 = r.CheckBreak()
	}
	if yyb489 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = InstanceSpec{}
	} else {
		yyv493 := &x.Spec
		yyv493.CodecDecodeSelf(d)
	}
	yyj489++
	if yyhl489 {
		yyb489 = yyj489 > l
	} else {
		yyb489 = r.CheckBreak()
	}
	if yyb489 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = InstanceStatus{}
	} else {
		yyv494 := &x.Status
		yyv494.CodecDecodeSelf(d)
	}
	for {
		yyj489++
		if yyhl489 {
			yyb489 = yyj489 > l
		} else {
			yyb489 = r.CheckBreak()
		}
		if yyb489 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj489-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *InstanceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym495 := z.EncBinary()
		_ = yym495
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep496 := !z.EncBinary()
			yy2arr496 := z.EncBasicHandle().StructToArray
			var yyq496 [8]bool
			_, _, _ = yysep496, yyq496, yy2arr496
			const yyr496 bool = false
			yyq496[0] = x.Image != ""
			yyq496[1] = x.InstanceType != ""
			yyq496[2] = x.NetworkName != ""
			yyq496[3] = len(x.Files) != 0
			yyq496[4] = len(x.Secrets) != 0
			yyq496[5] = len(x.Configs) != 0
			yyq496[6] = len(x.Users) != 0
			yyq496[7] = x.Hostname != ""
			var yynn496 int
			if yyr496 || yy2arr496 {
				r.EncodeArrayStart(8)
			} else {
				yynn496 = 0
				for _, b := range yyq496 {
					if b {
						yynn496++
					}
				}
				r.EncodeMapStart(yynn496)
				yynn496 = 0
			}
			if yyr496 || yy2arr496 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq496[0] {
					yym498 := z.EncBinary()
					_ = yym498
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Image))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq496[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("image"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym499 := z.EncBinary()
					_ = yym499
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Image))
					}
				}
			}
			if yyr496 || yy2arr496 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq496[1] {
					yym501 := z.EncBinary()
					_ = yym501
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.InstanceType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq496[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("instanceType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym502 := z.EncBinary()
					_ = yym502
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.InstanceType))
					}
				}
			}
			if yyr496 || yy2arr496 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq496[2] {
					yym504 := z.EncBinary()
					_ = yym504
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NetworkName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq496[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("networkName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym505 := z.EncBinary()
					_ = yym505
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NetworkName))
					}
				}
			}
			if yyr496 || yy2arr496 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq496[3] {
					if x.Files == nil {
						r.EncodeNil()
					} else {
						yym507 := z.EncBinary()
						_ = yym507
						if false {
						} else {
							h.encSliceFileSpec(([]FileSpec)(x.Files), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq496[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("files"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Files == nil {
						r.EncodeNil()
					} else {
						yym508 := z.EncBinary()
						_ = yym508
						if false {
						} else {
							h.encSliceFileSpec(([]FileSpec)(x.Files), e)
						}
					}
				}
			}
			if yyr496 || yy2arr496 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq496[4] {
					if x.Secrets == nil {
						r.EncodeNil()
					} else {
						yym510 := z.EncBinary()
						_ = yym510
						if false {
						} else {
							h.encSliceapi_LocalObjectReference(([]pkg2_api.LocalObjectReference)(x.Secrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq496[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Secrets == nil {
						r.EncodeNil()
					} else {
						yym511 := z.EncBinary()
						_ = yym511
						if false {
						} else {
							h.encSliceapi_LocalObjectReference(([]pkg2_api.LocalObjectReference)(x.Secrets), e)
						}
					}
				}
			}
			if yyr496 || yy2arr496 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq496[5] {
					if x.Configs == nil {
						r.EncodeNil()
					} else {
						yym513 := z.EncBinary()
						_ = yym513
						if false {
						} else {
							h.encSliceConfigSpec(([]ConfigSpec)(x.Configs), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq496[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Configs == nil {
						r.EncodeNil()
					} else {
						yym514 := z.EncBinary()
						_ = yym514
						if false {
						} else {
							h.encSliceConfigSpec(([]ConfigSpec)(x.Configs), e)
						}
					}
				}
			}
			if yyr496 || yy2arr496 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq496[6] {
					if x.Users == nil {
						r.EncodeNil()
					} else {
						yym516 := z.EncBinary()
						_ = yym516
						if false {
						} else {
							h.encSliceapi_LocalObjectReference(([]pkg2_api.LocalObjectReference)(x.Users), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq496[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("users"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Users == nil {
						r.EncodeNil()
					} else {
						yym517 := z.EncBinary()
						_ = yym517
						if false {
						} else {
							h.encSliceapi_LocalObjectReference(([]pkg2_api.LocalObjectReference)(x.Users), e)
						}
					}
				}
			}
			if yyr496 || yy2arr496 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq496[7] {
					yym519 := z.EncBinary()
					_ = yym519
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq496[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym520 := z.EncBinary()
					_ = yym520
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr496 || yy2arr496 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *InstanceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym521 := z.DecBinary()
	_ = yym521
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct522 := r.ContainerType()
		if yyct522 == codecSelferValueTypeMap1234 {
			yyl522 := r.ReadMapStart()
			if yyl522 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl522, d)
			}
		} else if yyct522 == codecSelferValueTypeArray1234 {
			yyl522 := r.ReadArrayStart()
			if yyl522 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl522, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *InstanceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys523Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys523Slc
	var yyhl523 bool = l >= 0
	for yyj523 := 0; ; yyj523++ {
		if yyhl523 {
			if yyj523 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys523Slc = r.DecodeBytes(yys523Slc, true, true)
		yys523 := string(yys523Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys523 {
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "instanceType":
			if r.TryDecodeAsNil() {
				x.InstanceType = ""
			} else {
				x.InstanceType = string(r.DecodeString())
			}
		case "networkName":
			if r.TryDecodeAsNil() {
				x.NetworkName = ""
			} else {
				x.NetworkName = string(r.DecodeString())
			}
		case "files":
			if r.TryDecodeAsNil() {
				x.Files = nil
			} else {
				yyv527 := &x.Files
				yym528 := z.DecBinary()
				_ = yym528
				if false {
				} else {
					h.decSliceFileSpec((*[]FileSpec)(yyv527), d)
				}
			}
		case "secrets":
			if r.TryDecodeAsNil() {
				x.Secrets = nil
			} else {
				yyv529 := &x.Secrets
				yym530 := z.DecBinary()
				_ = yym530
				if false {
				} else {
					h.decSliceapi_LocalObjectReference((*[]pkg2_api.LocalObjectReference)(yyv529), d)
				}
			}
		case "configs":
			if r.TryDecodeAsNil() {
				x.Configs = nil
			} else {
				yyv531 := &x.Configs
				yym532 := z.DecBinary()
				_ = yym532
				if false {
				} else {
					h.decSliceConfigSpec((*[]ConfigSpec)(yyv531), d)
				}
			}
		case "users":
			if r.TryDecodeAsNil() {
				x.Users = nil
			} else {
				yyv533 := &x.Users
				yym534 := z.DecBinary()
				_ = yym534
				if false {
				} else {
					h.decSliceapi_LocalObjectReference((*[]pkg2_api.LocalObjectReference)(yyv533), d)
				}
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys523)
		} // end switch yys523
	} // end for yyj523
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *InstanceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj536 int
	var yyb536 bool
	var yyhl536 bool = l >= 0
	yyj536++
	if yyhl536 {
		yyb536 = yyj536 > l
	} else {
		yyb536 = r.CheckBreak()
	}
	if yyb536 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj536++
	if yyhl536 {
		yyb536 = yyj536 > l
	} else {
		yyb536 = r.CheckBreak()
	}
	if yyb536 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InstanceType = ""
	} else {
		x.InstanceType = string(r.DecodeString())
	}
	yyj536++
	if yyhl536 {
		yyb536 = yyj536 > l
	} else {
		yyb536 = r.CheckBreak()
	}
	if yyb536 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NetworkName = ""
	} else {
		x.NetworkName = string(r.DecodeString())
	}
	yyj536++
	if yyhl536 {
		yyb536 = yyj536 > l
	} else {
		yyb536 = r.CheckBreak()
	}
	if yyb536 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Files = nil
	} else {
		yyv540 := &x.Files
		yym541 := z.DecBinary()
		_ = yym541
		if false {
		} else {
			h.decSliceFileSpec((*[]FileSpec)(yyv540), d)
		}
	}
	yyj536++
	if yyhl536 {
		yyb536 = yyj536 > l
	} else {
		yyb536 = r.CheckBreak()
	}
	if yyb536 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Secrets = nil
	} else {
		yyv542 := &x.Secrets
		yym543 := z.DecBinary()
		_ = yym543
		if false {
		} else {
			h.decSliceapi_LocalObjectReference((*[]pkg2_api.LocalObjectReference)(yyv542), d)
		}
	}
	yyj536++
	if yyhl536 {
		yyb536 = yyj536 > l
	} else {
		yyb536 = r.CheckBreak()
	}
	if yyb536 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Configs = nil
	} else {
		yyv544 := &x.Configs
		yym545 := z.DecBinary()
		_ = yym545
		if false {
		} else {
			h.decSliceConfigSpec((*[]ConfigSpec)(yyv544), d)
		}
	}
	yyj536++
	if yyhl536 {
		yyb536 = yyj536 > l
	} else {
		yyb536 = r.CheckBreak()
	}
	if yyb536 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Users = nil
	} else {
		yyv546 := &x.Users
		yym547 := z.DecBinary()
		_ = yym547
		if false {
		} else {
			h.decSliceapi_LocalObjectReference((*[]pkg2_api.LocalObjectReference)(yyv546), d)
		}
	}
	yyj536++
	if yyhl536 {
		yyb536 = yyj536 > l
	} else {
		yyb536 = r.CheckBreak()
	}
	if yyb536 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	for {
		yyj536++
		if yyhl536 {
			yyb536 = yyj536 > l
		} else {
			yyb536 = r.CheckBreak()
		}
		if yyb536 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj536-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *InstanceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym549 := z.EncBinary()
		_ = yym549
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep550 := !z.EncBinary()
			yy2arr550 := z.EncBasicHandle().StructToArray
			var yyq550 [6]bool
			_, _, _ = yysep550, yyq550, yy2arr550
			const yyr550 bool = false
			yyq550[0] = x.Phase != ""
			yyq550[1] = len(x.Conditions) != 0
			yyq550[2] = x.PrivateIP != ""
			yyq550[3] = x.PublicIP != ""
			yyq550[4] = x.InstanceID != ""
			yyq550[5] = true
			var yynn550 int
			if yyr550 || yy2arr550 {
				r.EncodeArrayStart(6)
			} else {
				yynn550 = 0
				for _, b := range yyq550 {
					if b {
						yynn550++
					}
				}
				r.EncodeMapStart(yynn550)
				yynn550 = 0
			}
			if yyr550 || yy2arr550 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq550[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq550[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr550 || yy2arr550 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq550[1] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym553 := z.EncBinary()
						_ = yym553
						if false {
						} else {
							h.encSliceInstanceCondition(([]InstanceCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq550[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym554 := z.EncBinary()
						_ = yym554
						if false {
						} else {
							h.encSliceInstanceCondition(([]InstanceCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr550 || yy2arr550 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq550[2] {
					yym556 := z.EncBinary()
					_ = yym556
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PrivateIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq550[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("privateIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym557 := z.EncBinary()
					_ = yym557
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PrivateIP))
					}
				}
			}
			if yyr550 || yy2arr550 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq550[3] {
					yym559 := z.EncBinary()
					_ = yym559
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PublicIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq550[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("publicIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym560 := z.EncBinary()
					_ = yym560
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PublicIP))
					}
				}
			}
			if yyr550 || yy2arr550 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq550[4] {
					yym562 := z.EncBinary()
					_ = yym562
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.InstanceID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq550[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("instanceID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym563 := z.EncBinary()
					_ = yym563
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.InstanceID))
					}
				}
			}
			if yyr550 || yy2arr550 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq550[5] {
					yy565 := &x.CreationTimestamp
					yym566 := z.EncBinary()
					_ = yym566
					if false {
					} else if z.HasExtensions() && z.EncExt(yy565) {
					} else if yym566 {
						z.EncBinaryMarshal(yy565)
					} else if !yym566 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy565)
					} else {
						z.EncFallback(yy565)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq550[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("creationTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy567 := &x.CreationTimestamp
					yym568 := z.EncBinary()
					_ = yym568
					if false {
					} else if z.HasExtensions() && z.EncExt(yy567) {
					} else if yym568 {
						z.EncBinaryMarshal(yy567)
					} else if !yym568 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy567)
					} else {
						z.EncFallback(yy567)
					}
				}
			}
			if yyr550 || yy2arr550 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *InstanceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym569 := z.DecBinary()
	_ = yym569
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct570 := r.ContainerType()
		if yyct570 == codecSelferValueTypeMap1234 {
			yyl570 := r.ReadMapStart()
			if yyl570 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl570, d)
			}
		} else if yyct570 == codecSelferValueTypeArray1234 {
			yyl570 := r.ReadArrayStart()
			if yyl570 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl570, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *InstanceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys571Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys571Slc
	var yyhl571 bool = l >= 0
	for yyj571 := 0; ; yyj571++ {
		if yyhl571 {
			if yyj571 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys571Slc = r.DecodeBytes(yys571Slc, true, true)
		yys571 := string(yys571Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys571 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = InstancePhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv573 := &x.Conditions
				yym574 := z.DecBinary()
				_ = yym574
				if false {
				} else {
					h.decSliceInstanceCondition((*[]InstanceCondition)(yyv573), d)
				}
			}
		case "privateIP":
			if r.TryDecodeAsNil() {
				x.PrivateIP = ""
			} else {
				x.PrivateIP = string(r.DecodeString())
			}
		case "publicIP":
			if r.TryDecodeAsNil() {
				x.PublicIP = ""
			} else {
				x.PublicIP = string(r.DecodeString())
			}
		case "instanceID":
			if r.TryDecodeAsNil() {
				x.InstanceID = ""
			} else {
				x.InstanceID = string(r.DecodeString())
			}
		case "creationTimestamp":
			if r.TryDecodeAsNil() {
				x.CreationTimestamp = pkg1_unversioned.Time{}
			} else {
				yyv578 := &x.CreationTimestamp
				yym579 := z.DecBinary()
				_ = yym579
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv578) {
				} else if yym579 {
					z.DecBinaryUnmarshal(yyv578)
				} else if !yym579 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv578)
				} else {
					z.DecFallback(yyv578, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys571)
		} // end switch yys571
	} // end for yyj571
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *InstanceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj580 int
	var yyb580 bool
	var yyhl580 bool = l >= 0
	yyj580++
	if yyhl580 {
		yyb580 = yyj580 > l
	} else {
		yyb580 = r.CheckBreak()
	}
	if yyb580 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = InstancePhase(r.DecodeString())
	}
	yyj580++
	if yyhl580 {
		yyb580 = yyj580 > l
	} else {
		yyb580 = r.CheckBreak()
	}
	if yyb580 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv582 := &x.Conditions
		yym583 := z.DecBinary()
		_ = yym583
		if false {
		} else {
			h.decSliceInstanceCondition((*[]InstanceCondition)(yyv582), d)
		}
	}
	yyj580++
	if yyhl580 {
		yyb580 = yyj580 > l
	} else {
		yyb580 = r.CheckBreak()
	}
	if yyb580 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PrivateIP = ""
	} else {
		x.PrivateIP = string(r.DecodeString())
	}
	yyj580++
	if yyhl580 {
		yyb580 = yyj580 > l
	} else {
		yyb580 = r.CheckBreak()
	}
	if yyb580 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PublicIP = ""
	} else {
		x.PublicIP = string(r.DecodeString())
	}
	yyj580++
	if yyhl580 {
		yyb580 = yyj580 > l
	} else {
		yyb580 = r.CheckBreak()
	}
	if yyb580 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InstanceID = ""
	} else {
		x.InstanceID = string(r.DecodeString())
	}
	yyj580++
	if yyhl580 {
		yyb580 = yyj580 > l
	} else {
		yyb580 = r.CheckBreak()
	}
	if yyb580 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CreationTimestamp = pkg1_unversioned.Time{}
	} else {
		yyv587 := &x.CreationTimestamp
		yym588 := z.DecBinary()
		_ = yym588
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv587) {
		} else if yym588 {
			z.DecBinaryUnmarshal(yyv587)
		} else if !yym588 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv587)
		} else {
			z.DecFallback(yyv587, false)
		}
	}
	for {
		yyj580++
		if yyhl580 {
			yyb580 = yyj580 > l
		} else {
			yyb580 = r.CheckBreak()
		}
		if yyb580 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj580-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x InstancePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym589 := z.EncBinary()
	_ = yym589
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *InstancePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym590 := z.DecBinary()
	_ = yym590
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x InstanceConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym591 := z.EncBinary()
	_ = yym591
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *InstanceConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym592 := z.DecBinary()
	_ = yym592
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *InstanceCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym593 := z.EncBinary()
		_ = yym593
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep594 := !z.EncBinary()
			yy2arr594 := z.EncBasicHandle().StructToArray
			var yyq594 [6]bool
			_, _, _ = yysep594, yyq594, yy2arr594
			const yyr594 bool = false
			yyq594[2] = true
			yyq594[3] = true
			yyq594[4] = x.Reason != ""
			yyq594[5] = x.Message != ""
			var yynn594 int
			if yyr594 || yy2arr594 {
				r.EncodeArrayStart(6)
			} else {
				yynn594 = 2
				for _, b := range yyq594 {
					if b {
						yynn594++
					}
				}
				r.EncodeMapStart(yynn594)
				yynn594 = 0
			}
			if yyr594 || yy2arr594 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr594 || yy2arr594 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym597 := z.EncBinary()
				_ = yym597
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Status) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Status))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym598 := z.EncBinary()
				_ = yym598
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Status) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Status))
				}
			}
			if yyr594 || yy2arr594 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq594[2] {
					yy600 := &x.LastProbeTime
					yym601 := z.EncBinary()
					_ = yym601
					if false {
					} else if z.HasExtensions() && z.EncExt(yy600) {
					} else if yym601 {
						z.EncBinaryMarshal(yy600)
					} else if !yym601 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy600)
					} else {
						z.EncFallback(yy600)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq594[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastProbeTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy602 := &x.LastProbeTime
					yym603 := z.EncBinary()
					_ = yym603
					if false {
					} else if z.HasExtensions() && z.EncExt(yy602) {
					} else if yym603 {
						z.EncBinaryMarshal(yy602)
					} else if !yym603 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy602)
					} else {
						z.EncFallback(yy602)
					}
				}
			}
			if yyr594 || yy2arr594 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq594[3] {
					yy605 := &x.LastTransitionTime
					yym606 := z.EncBinary()
					_ = yym606
					if false {
					} else if z.HasExtensions() && z.EncExt(yy605) {
					} else if yym606 {
						z.EncBinaryMarshal(yy605)
					} else if !yym606 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy605)
					} else {
						z.EncFallback(yy605)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq594[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy607 := &x.LastTransitionTime
					yym608 := z.EncBinary()
					_ = yym608
					if false {
					} else if z.HasExtensions() && z.EncExt(yy607) {
					} else if yym608 {
						z.EncBinaryMarshal(yy607)
					} else if !yym608 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy607)
					} else {
						z.EncFallback(yy607)
					}
				}
			}
			if yyr594 || yy2arr594 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq594[4] {
					yym610 := z.EncBinary()
					_ = yym610
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq594[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym611 := z.EncBinary()
					_ = yym611
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr594 || yy2arr594 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq594[5] {
					yym613 := z.EncBinary()
					_ = yym613
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq594[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym614 := z.EncBinary()
					_ = yym614
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr594 || yy2arr594 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *InstanceCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym615 := z.DecBinary()
	_ = yym615
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct616 := r.ContainerType()
		if yyct616 == codecSelferValueTypeMap1234 {
			yyl616 := r.ReadMapStart()
			if yyl616 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl616, d)
			}
		} else if yyct616 == codecSelferValueTypeArray1234 {
			yyl616 := r.ReadArrayStart()
			if yyl616 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl616, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *InstanceCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys617Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys617Slc
	var yyhl617 bool = l >= 0
	for yyj617 := 0; ; yyj617++ {
		if yyhl617 {
			if yyj617 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys617Slc = r.DecodeBytes(yys617Slc, true, true)
		yys617 := string(yys617Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys617 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = InstanceConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = pkg2_api.ConditionStatus(r.DecodeString())
			}
		case "lastProbeTime":
			if r.TryDecodeAsNil() {
				x.LastProbeTime = pkg1_unversioned.Time{}
			} else {
				yyv620 := &x.LastProbeTime
				yym621 := z.DecBinary()
				_ = yym621
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv620) {
				} else if yym621 {
					z.DecBinaryUnmarshal(yyv620)
				} else if !yym621 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv620)
				} else {
					z.DecFallback(yyv620, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg1_unversioned.Time{}
			} else {
				yyv622 := &x.LastTransitionTime
				yym623 := z.DecBinary()
				_ = yym623
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv622) {
				} else if yym623 {
					z.DecBinaryUnmarshal(yyv622)
				} else if !yym623 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv622)
				} else {
					z.DecFallback(yyv622, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys617)
		} // end switch yys617
	} // end for yyj617
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *InstanceCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj626 int
	var yyb626 bool
	var yyhl626 bool = l >= 0
	yyj626++
	if yyhl626 {
		yyb626 = yyj626 > l
	} else {
		yyb626 = r.CheckBreak()
	}
	if yyb626 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = InstanceConditionType(r.DecodeString())
	}
	yyj626++
	if yyhl626 {
		yyb626 = yyj626 > l
	} else {
		yyb626 = r.CheckBreak()
	}
	if yyb626 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = pkg2_api.ConditionStatus(r.DecodeString())
	}
	yyj626++
	if yyhl626 {
		yyb626 = yyj626 > l
	} else {
		yyb626 = r.CheckBreak()
	}
	if yyb626 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastProbeTime = pkg1_unversioned.Time{}
	} else {
		yyv629 := &x.LastProbeTime
		yym630 := z.DecBinary()
		_ = yym630
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv629) {
		} else if yym630 {
			z.DecBinaryUnmarshal(yyv629)
		} else if !yym630 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv629)
		} else {
			z.DecFallback(yyv629, false)
		}
	}
	yyj626++
	if yyhl626 {
		yyb626 = yyj626 > l
	} else {
		yyb626 = r.CheckBreak()
	}
	if yyb626 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg1_unversioned.Time{}
	} else {
		yyv631 := &x.LastTransitionTime
		yym632 := z.DecBinary()
		_ = yym632
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv631) {
		} else if yym632 {
			z.DecBinaryUnmarshal(yyv631)
		} else if !yym632 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv631)
		} else {
			z.DecFallback(yyv631, false)
		}
	}
	yyj626++
	if yyhl626 {
		yyb626 = yyj626 > l
	} else {
		yyb626 = r.CheckBreak()
	}
	if yyb626 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj626++
	if yyhl626 {
		yyb626 = yyj626 > l
	} else {
		yyb626 = r.CheckBreak()
	}
	if yyb626 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj626++
		if yyhl626 {
			yyb626 = yyj626 > l
		} else {
			yyb626 = r.CheckBreak()
		}
		if yyb626 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj626-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *InstanceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym635 := z.EncBinary()
		_ = yym635
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep636 := !z.EncBinary()
			yy2arr636 := z.EncBasicHandle().StructToArray
			var yyq636 [4]bool
			_, _, _ = yysep636, yyq636, yy2arr636
			const yyr636 bool = false
			yyq636[0] = x.Kind != ""
			yyq636[1] = x.APIVersion != ""
			var yynn636 int
			if yyr636 || yy2arr636 {
				r.EncodeArrayStart(4)
			} else {
				yynn636 = 2
				for _, b := range yyq636 {
					if b {
						yynn636++
					}
				}
				r.EncodeMapStart(yynn636)
				yynn636 = 0
			}
			if yyr636 || yy2arr636 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq636[0] {
					yym638 := z.EncBinary()
					_ = yym638
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq636[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym639 := z.EncBinary()
					_ = yym639
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr636 || yy2arr636 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq636[1] {
					yym641 := z.EncBinary()
					_ = yym641
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq636[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym642 := z.EncBinary()
					_ = yym642
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr636 || yy2arr636 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy644 := &x.ListMeta
				yym645 := z.EncBinary()
				_ = yym645
				if false {
				} else if z.HasExtensions() && z.EncExt(yy644) {
				} else {
					z.EncFallback(yy644)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("metadata"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy646 := &x.ListMeta
				yym647 := z.EncBinary()
				_ = yym647
				if false {
				} else if z.HasExtensions() && z.EncExt(yy646) {
				} else {
					z.EncFallback(yy646)
				}
			}
			if yyr636 || yy2arr636 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym649 := z.EncBinary()
					_ = yym649
					if false {
					} else {
						h.encSlicePtrtoInstance(([]*Instance)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym650 := z.EncBinary()
					_ = yym650
					if false {
					} else {
						h.encSlicePtrtoInstance(([]*Instance)(x.Items), e)
					}
				}
			}
			if yyr636 || yy2arr636 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *InstanceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym651 := z.DecBinary()
	_ = yym651
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct652 := r.ContainerType()
		if yyct652 == codecSelferValueTypeMap1234 {
			yyl652 := r.ReadMapStart()
			if yyl652 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl652, d)
			}
		} else if yyct652 == codecSelferValueTypeArray1234 {
			yyl652 := r.ReadArrayStart()
			if yyl652 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl652, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *InstanceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys653Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys653Slc
	var yyhl653 bool = l >= 0
	for yyj653 := 0; ; yyj653++ {
		if yyhl653 {
			if yyj653 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys653Slc = r.DecodeBytes(yys653Slc, true, true)
		yys653 := string(yys653Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys653 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv656 := &x.ListMeta
				yym657 := z.DecBinary()
				_ = yym657
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv656) {
				} else {
					z.DecFallback(yyv656, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv658 := &x.Items
				yym659 := z.DecBinary()
				_ = yym659
				if false {
				} else {
					h.decSlicePtrtoInstance((*[]*Instance)(yyv658), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys653)
		} // end switch yys653
	} // end for yyj653
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *InstanceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj660 int
	var yyb660 bool
	var yyhl660 bool = l >= 0
	yyj660++
	if yyhl660 {
		yyb660 = yyj660 > l
	} else {
		yyb660 = r.CheckBreak()
	}
	if yyb660 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj660++
	if yyhl660 {
		yyb660 = yyj660 > l
	} else {
		yyb660 = r.CheckBreak()
	}
	if yyb660 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj660++
	if yyhl660 {
		yyb660 = yyj660 > l
	} else {
		yyb660 = r.CheckBreak()
	}
	if yyb660 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv663 := &x.ListMeta
		yym664 := z.DecBinary()
		_ = yym664
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv663) {
		} else {
			z.DecFallback(yyv663, false)
		}
	}
	yyj660++
	if yyhl660 {
		yyb660 = yyj660 > l
	} else {
		yyb660 = r.CheckBreak()
	}
	if yyb660 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv665 := &x.Items
		yym666 := z.DecBinary()
		_ = yym666
		if false {
		} else {
			h.decSlicePtrtoInstance((*[]*Instance)(yyv665), d)
		}
	}
	for {
		yyj660++
		if yyhl660 {
			yyb660 = yyj660 > l
		} else {
			yyb660 = r.CheckBreak()
		}
		if yyb660 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj660-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) encSlicePtrtoUser(v []*User, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv667 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		if yyv667 == nil {
			r.EncodeNil()
		} else {
			yyv667.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePtrtoUser(v *[]*User, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv668 := *v
	yyh668, yyl668 := z.DecSliceHelperStart()
	var yyc668 bool
	if yyl668 == 0 {
		if yyv668 == nil {
			yyv668 = []*User{}
			yyc668 = true
		} else if len(yyv668) != 0 {
			yyv668 = yyv668[:0]
			yyc668 = true
		}
	} else if yyl668 > 0 {
		var yyrr668, yyrl668 int
		var yyrt668 bool
		if yyl668 > cap(yyv668) {

			yyrg668 := len(yyv668) > 0
			yyv2668 := yyv668
			yyrl668, yyrt668 = z.DecInferLen(yyl668, z.DecBasicHandle().MaxInitLen, 8)
			if yyrt668 {
				if yyrl668 <= cap(yyv668) {
					yyv668 = yyv668[:yyrl668]
				} else {
					yyv668 = make([]*User, yyrl668)
				}
			} else {
				yyv668 = make([]*User, yyrl668)
			}
			yyc668 = true
			yyrr668 = len(yyv668)
			if yyrg668 {
				copy(yyv668, yyv2668)
			}
		} else if yyl668 != len(yyv668) {
			yyv668 = yyv668[:yyl668]
			yyc668 = true
		}
		yyj668 := 0
		for ; yyj668 < yyrr668; yyj668++ {
			yyh668.ElemContainerState(yyj668)
			if r.TryDecodeAsNil() {
				if yyv668[yyj668] != nil {
					*yyv668[yyj668] = User{}
				}
			} else {
				if yyv668[yyj668] == nil {
					yyv668[yyj668] = new(User)
				}
				yyw669 := yyv668[yyj668]
				yyw669.CodecDecodeSelf(d)
			}

		}
		if yyrt668 {
			for ; yyj668 < yyl668; yyj668++ {
				yyv668 = append(yyv668, nil)
				yyh668.ElemContainerState(yyj668)
				if r.TryDecodeAsNil() {
					if yyv668[yyj668] != nil {
						*yyv668[yyj668] = User{}
					}
				} else {
					if yyv668[yyj668] == nil {
						yyv668[yyj668] = new(User)
					}
					yyw670 := yyv668[yyj668]
					yyw670.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj668 := 0
		for ; !r.CheckBreak(); yyj668++ {

			if yyj668 >= len(yyv668) {
				yyv668 = append(yyv668, nil) // var yyz668 *User
				yyc668 = true
			}
			yyh668.ElemContainerState(yyj668)
			if yyj668 < len(yyv668) {
				if r.TryDecodeAsNil() {
					if yyv668[yyj668] != nil {
						*yyv668[yyj668] = User{}
					}
				} else {
					if yyv668[yyj668] == nil {
						yyv668[yyj668] = new(User)
					}
					yyw671 := yyv668[yyj668]
					yyw671.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj668 < len(yyv668) {
			yyv668 = yyv668[:yyj668]
			yyc668 = true
		} else if yyj668 == 0 && yyv668 == nil {
			yyv668 = []*User{}
			yyc668 = true
		}
	}
	yyh668.End()
	if yyc668 {
		*v = yyv668
	}
}

func (x codecSelfer1234) encSlicePtrtoNetwork(v []*Network, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv672 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		if yyv672 == nil {
			r.EncodeNil()
		} else {
			yyv672.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePtrtoNetwork(v *[]*Network, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv673 := *v
	yyh673, yyl673 := z.DecSliceHelperStart()
	var yyc673 bool
	if yyl673 == 0 {
		if yyv673 == nil {
			yyv673 = []*Network{}
			yyc673 = true
		} else if len(yyv673) != 0 {
			yyv673 = yyv673[:0]
			yyc673 = true
		}
	} else if yyl673 > 0 {
		var yyrr673, yyrl673 int
		var yyrt673 bool
		if yyl673 > cap(yyv673) {

			yyrg673 := len(yyv673) > 0
			yyv2673 := yyv673
			yyrl673, yyrt673 = z.DecInferLen(yyl673, z.DecBasicHandle().MaxInitLen, 8)
			if yyrt673 {
				if yyrl673 <= cap(yyv673) {
					yyv673 = yyv673[:yyrl673]
				} else {
					yyv673 = make([]*Network, yyrl673)
				}
			} else {
				yyv673 = make([]*Network, yyrl673)
			}
			yyc673 = true
			yyrr673 = len(yyv673)
			if yyrg673 {
				copy(yyv673, yyv2673)
			}
		} else if yyl673 != len(yyv673) {
			yyv673 = yyv673[:yyl673]
			yyc673 = true
		}
		yyj673 := 0
		for ; yyj673 < yyrr673; yyj673++ {
			yyh673.ElemContainerState(yyj673)
			if r.TryDecodeAsNil() {
				if yyv673[yyj673] != nil {
					*yyv673[yyj673] = Network{}
				}
			} else {
				if yyv673[yyj673] == nil {
					yyv673[yyj673] = new(Network)
				}
				yyw674 := yyv673[yyj673]
				yyw674.CodecDecodeSelf(d)
			}

		}
		if yyrt673 {
			for ; yyj673 < yyl673; yyj673++ {
				yyv673 = append(yyv673, nil)
				yyh673.ElemContainerState(yyj673)
				if r.TryDecodeAsNil() {
					if yyv673[yyj673] != nil {
						*yyv673[yyj673] = Network{}
					}
				} else {
					if yyv673[yyj673] == nil {
						yyv673[yyj673] = new(Network)
					}
					yyw675 := yyv673[yyj673]
					yyw675.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj673 := 0
		for ; !r.CheckBreak(); yyj673++ {

			if yyj673 >= len(yyv673) {
				yyv673 = append(yyv673, nil) // var yyz673 *Network
				yyc673 = true
			}
			yyh673.ElemContainerState(yyj673)
			if yyj673 < len(yyv673) {
				if r.TryDecodeAsNil() {
					if yyv673[yyj673] != nil {
						*yyv673[yyj673] = Network{}
					}
				} else {
					if yyv673[yyj673] == nil {
						yyv673[yyj673] = new(Network)
					}
					yyw676 := yyv673[yyj673]
					yyw676.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj673 < len(yyv673) {
			yyv673 = yyv673[:yyj673]
			yyc673 = true
		} else if yyj673 == 0 && yyv673 == nil {
			yyv673 = []*Network{}
			yyc673 = true
		}
	}
	yyh673.End()
	if yyc673 {
		*v = yyv673
	}
}

func (x codecSelfer1234) encSliceInstanceGroupCondition(v []InstanceGroupCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv677 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy678 := &yyv677
		yy678.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceInstanceGroupCondition(v *[]InstanceGroupCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv679 := *v
	yyh679, yyl679 := z.DecSliceHelperStart()
	var yyc679 bool
	if yyl679 == 0 {
		if yyv679 == nil {
			yyv679 = []InstanceGroupCondition{}
			yyc679 = true
		} else if len(yyv679) != 0 {
			yyv679 = yyv679[:0]
			yyc679 = true
		}
	} else if yyl679 > 0 {
		var yyrr679, yyrl679 int
		var yyrt679 bool
		if yyl679 > cap(yyv679) {

			yyrg679 := len(yyv679) > 0
			yyv2679 := yyv679
			yyrl679, yyrt679 = z.DecInferLen(yyl679, z.DecBasicHandle().MaxInitLen, 88)
			if yyrt679 {
				if yyrl679 <= cap(yyv679) {
					yyv679 = yyv679[:yyrl679]
				} else {
					yyv679 = make([]InstanceGroupCondition, yyrl679)
				}
			} else {
				yyv679 = make([]InstanceGroupCondition, yyrl679)
			}
			yyc679 = true
			yyrr679 = len(yyv679)
			if yyrg679 {
				copy(yyv679, yyv2679)
			}
		} else if yyl679 != len(yyv679) {
			yyv679 = yyv679[:yyl679]
			yyc679 = true
		}
		yyj679 := 0
		for ; yyj679 < yyrr679; yyj679++ {
			yyh679.ElemContainerState(yyj679)
			if r.TryDecodeAsNil() {
				yyv679[yyj679] = InstanceGroupCondition{}
			} else {
				yyv680 := &yyv679[yyj679]
				yyv680.CodecDecodeSelf(d)
			}

		}
		if yyrt679 {
			for ; yyj679 < yyl679; yyj679++ {
				yyv679 = append(yyv679, InstanceGroupCondition{})
				yyh679.ElemContainerState(yyj679)
				if r.TryDecodeAsNil() {
					yyv679[yyj679] = InstanceGroupCondition{}
				} else {
					yyv681 := &yyv679[yyj679]
					yyv681.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj679 := 0
		for ; !r.CheckBreak(); yyj679++ {

			if yyj679 >= len(yyv679) {
				yyv679 = append(yyv679, InstanceGroupCondition{}) // var yyz679 InstanceGroupCondition
				yyc679 = true
			}
			yyh679.ElemContainerState(yyj679)
			if yyj679 < len(yyv679) {
				if r.TryDecodeAsNil() {
					yyv679[yyj679] = InstanceGroupCondition{}
				} else {
					yyv682 := &yyv679[yyj679]
					yyv682.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj679 < len(yyv679) {
			yyv679 = yyv679[:yyj679]
			yyc679 = true
		} else if yyj679 == 0 && yyv679 == nil {
			yyv679 = []InstanceGroupCondition{}
			yyc679 = true
		}
	}
	yyh679.End()
	if yyc679 {
		*v = yyv679
	}
}

func (x codecSelfer1234) encSlicePtrtoInstanceGroup(v []*InstanceGroup, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv683 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		if yyv683 == nil {
			r.EncodeNil()
		} else {
			yyv683.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePtrtoInstanceGroup(v *[]*InstanceGroup, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv684 := *v
	yyh684, yyl684 := z.DecSliceHelperStart()
	var yyc684 bool
	if yyl684 == 0 {
		if yyv684 == nil {
			yyv684 = []*InstanceGroup{}
			yyc684 = true
		} else if len(yyv684) != 0 {
			yyv684 = yyv684[:0]
			yyc684 = true
		}
	} else if yyl684 > 0 {
		var yyrr684, yyrl684 int
		var yyrt684 bool
		if yyl684 > cap(yyv684) {

			yyrg684 := len(yyv684) > 0
			yyv2684 := yyv684
			yyrl684, yyrt684 = z.DecInferLen(yyl684, z.DecBasicHandle().MaxInitLen, 8)
			if yyrt684 {
				if yyrl684 <= cap(yyv684) {
					yyv684 = yyv684[:yyrl684]
				} else {
					yyv684 = make([]*InstanceGroup, yyrl684)
				}
			} else {
				yyv684 = make([]*InstanceGroup, yyrl684)
			}
			yyc684 = true
			yyrr684 = len(yyv684)
			if yyrg684 {
				copy(yyv684, yyv2684)
			}
		} else if yyl684 != len(yyv684) {
			yyv684 = yyv684[:yyl684]
			yyc684 = true
		}
		yyj684 := 0
		for ; yyj684 < yyrr684; yyj684++ {
			yyh684.ElemContainerState(yyj684)
			if r.TryDecodeAsNil() {
				if yyv684[yyj684] != nil {
					*yyv684[yyj684] = InstanceGroup{}
				}
			} else {
				if yyv684[yyj684] == nil {
					yyv684[yyj684] = new(InstanceGroup)
				}
				yyw685 := yyv684[yyj684]
				yyw685.CodecDecodeSelf(d)
			}

		}
		if yyrt684 {
			for ; yyj684 < yyl684; yyj684++ {
				yyv684 = append(yyv684, nil)
				yyh684.ElemContainerState(yyj684)
				if r.TryDecodeAsNil() {
					if yyv684[yyj684] != nil {
						*yyv684[yyj684] = InstanceGroup{}
					}
				} else {
					if yyv684[yyj684] == nil {
						yyv684[yyj684] = new(InstanceGroup)
					}
					yyw686 := yyv684[yyj684]
					yyw686.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj684 := 0
		for ; !r.CheckBreak(); yyj684++ {

			if yyj684 >= len(yyv684) {
				yyv684 = append(yyv684, nil) // var yyz684 *InstanceGroup
				yyc684 = true
			}
			yyh684.ElemContainerState(yyj684)
			if yyj684 < len(yyv684) {
				if r.TryDecodeAsNil() {
					if yyv684[yyj684] != nil {
						*yyv684[yyj684] = InstanceGroup{}
					}
				} else {
					if yyv684[yyj684] == nil {
						yyv684[yyj684] = new(InstanceGroup)
					}
					yyw687 := yyv684[yyj684]
					yyw687.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj684 < len(yyv684) {
			yyv684 = yyv684[:yyj684]
			yyc684 = true
		} else if yyj684 == 0 && yyv684 == nil {
			yyv684 = []*InstanceGroup{}
			yyc684 = true
		}
	}
	yyh684.End()
	if yyc684 {
		*v = yyv684
	}
}

func (x codecSelfer1234) encSliceapi_Secret(v []pkg2_api.Secret, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv688 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy689 := &yyv688
		yy689.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceapi_Secret(v *[]pkg2_api.Secret, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv690 := *v
	yyh690, yyl690 := z.DecSliceHelperStart()
	var yyc690 bool
	if yyl690 == 0 {
		if yyv690 == nil {
			yyv690 = []pkg2_api.Secret{}
			yyc690 = true
		} else if len(yyv690) != 0 {
			yyv690 = yyv690[:0]
			yyc690 = true
		}
	} else if yyl690 > 0 {
		var yyrr690, yyrl690 int
		var yyrt690 bool
		if yyl690 > cap(yyv690) {

			yyrg690 := len(yyv690) > 0
			yyv2690 := yyv690
			yyrl690, yyrt690 = z.DecInferLen(yyl690, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt690 {
				if yyrl690 <= cap(yyv690) {
					yyv690 = yyv690[:yyrl690]
				} else {
					yyv690 = make([]pkg2_api.Secret, yyrl690)
				}
			} else {
				yyv690 = make([]pkg2_api.Secret, yyrl690)
			}
			yyc690 = true
			yyrr690 = len(yyv690)
			if yyrg690 {
				copy(yyv690, yyv2690)
			}
		} else if yyl690 != len(yyv690) {
			yyv690 = yyv690[:yyl690]
			yyc690 = true
		}
		yyj690 := 0
		for ; yyj690 < yyrr690; yyj690++ {
			yyh690.ElemContainerState(yyj690)
			if r.TryDecodeAsNil() {
				yyv690[yyj690] = pkg2_api.Secret{}
			} else {
				yyv691 := &yyv690[yyj690]
				yyv691.CodecDecodeSelf(d)
			}

		}
		if yyrt690 {
			for ; yyj690 < yyl690; yyj690++ {
				yyv690 = append(yyv690, pkg2_api.Secret{})
				yyh690.ElemContainerState(yyj690)
				if r.TryDecodeAsNil() {
					yyv690[yyj690] = pkg2_api.Secret{}
				} else {
					yyv692 := &yyv690[yyj690]
					yyv692.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj690 := 0
		for ; !r.CheckBreak(); yyj690++ {

			if yyj690 >= len(yyv690) {
				yyv690 = append(yyv690, pkg2_api.Secret{}) // var yyz690 pkg2_api.Secret
				yyc690 = true
			}
			yyh690.ElemContainerState(yyj690)
			if yyj690 < len(yyv690) {
				if r.TryDecodeAsNil() {
					yyv690[yyj690] = pkg2_api.Secret{}
				} else {
					yyv693 := &yyv690[yyj690]
					yyv693.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj690 < len(yyv690) {
			yyv690 = yyv690[:yyj690]
			yyc690 = true
		} else if yyj690 == 0 && yyv690 == nil {
			yyv690 = []pkg2_api.Secret{}
			yyc690 = true
		}
	}
	yyh690.End()
	if yyc690 {
		*v = yyv690
	}
}

func (x codecSelfer1234) encSliceUser(v []User, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv694 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy695 := &yyv694
		yy695.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceUser(v *[]User, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv696 := *v
	yyh696, yyl696 := z.DecSliceHelperStart()
	var yyc696 bool
	if yyl696 == 0 {
		if yyv696 == nil {
			yyv696 = []User{}
			yyc696 = true
		} else if len(yyv696) != 0 {
			yyv696 = yyv696[:0]
			yyc696 = true
		}
	} else if yyl696 > 0 {
		var yyrr696, yyrl696 int
		var yyrt696 bool
		if yyl696 > cap(yyv696) {

			yyrg696 := len(yyv696) > 0
			yyv2696 := yyv696
			yyrl696, yyrt696 = z.DecInferLen(yyl696, z.DecBasicHandle().MaxInitLen, 312)
			if yyrt696 {
				if yyrl696 <= cap(yyv696) {
					yyv696 = yyv696[:yyrl696]
				} else {
					yyv696 = make([]User, yyrl696)
				}
			} else {
				yyv696 = make([]User, yyrl696)
			}
			yyc696 = true
			yyrr696 = len(yyv696)
			if yyrg696 {
				copy(yyv696, yyv2696)
			}
		} else if yyl696 != len(yyv696) {
			yyv696 = yyv696[:yyl696]
			yyc696 = true
		}
		yyj696 := 0
		for ; yyj696 < yyrr696; yyj696++ {
			yyh696.ElemContainerState(yyj696)
			if r.TryDecodeAsNil() {
				yyv696[yyj696] = User{}
			} else {
				yyv697 := &yyv696[yyj696]
				yyv697.CodecDecodeSelf(d)
			}

		}
		if yyrt696 {
			for ; yyj696 < yyl696; yyj696++ {
				yyv696 = append(yyv696, User{})
				yyh696.ElemContainerState(yyj696)
				if r.TryDecodeAsNil() {
					yyv696[yyj696] = User{}
				} else {
					yyv698 := &yyv696[yyj696]
					yyv698.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj696 := 0
		for ; !r.CheckBreak(); yyj696++ {

			if yyj696 >= len(yyv696) {
				yyv696 = append(yyv696, User{}) // var yyz696 User
				yyc696 = true
			}
			yyh696.ElemContainerState(yyj696)
			if yyj696 < len(yyv696) {
				if r.TryDecodeAsNil() {
					yyv696[yyj696] = User{}
				} else {
					yyv699 := &yyv696[yyj696]
					yyv699.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj696 < len(yyv696) {
			yyv696 = yyv696[:yyj696]
			yyc696 = true
		} else if yyj696 == 0 && yyv696 == nil {
			yyv696 = []User{}
			yyc696 = true
		}
	}
	yyh696.End()
	if yyc696 {
		*v = yyv696
	}
}

func (x codecSelfer1234) encSliceFileSpec(v []FileSpec, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv700 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy701 := &yyv700
		yy701.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceFileSpec(v *[]FileSpec, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv702 := *v
	yyh702, yyl702 := z.DecSliceHelperStart()
	var yyc702 bool
	if yyl702 == 0 {
		if yyv702 == nil {
			yyv702 = []FileSpec{}
			yyc702 = true
		} else if len(yyv702) != 0 {
			yyv702 = yyv702[:0]
			yyc702 = true
		}
	} else if yyl702 > 0 {
		var yyrr702, yyrl702 int
		var yyrt702 bool
		if yyl702 > cap(yyv702) {

			yyrg702 := len(yyv702) > 0
			yyv2702 := yyv702
			yyrl702, yyrt702 = z.DecInferLen(yyl702, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt702 {
				if yyrl702 <= cap(yyv702) {
					yyv702 = yyv702[:yyrl702]
				} else {
					yyv702 = make([]FileSpec, yyrl702)
				}
			} else {
				yyv702 = make([]FileSpec, yyrl702)
			}
			yyc702 = true
			yyrr702 = len(yyv702)
			if yyrg702 {
				copy(yyv702, yyv2702)
			}
		} else if yyl702 != len(yyv702) {
			yyv702 = yyv702[:yyl702]
			yyc702 = true
		}
		yyj702 := 0
		for ; yyj702 < yyrr702; yyj702++ {
			yyh702.ElemContainerState(yyj702)
			if r.TryDecodeAsNil() {
				yyv702[yyj702] = FileSpec{}
			} else {
				yyv703 := &yyv702[yyj702]
				yyv703.CodecDecodeSelf(d)
			}

		}
		if yyrt702 {
			for ; yyj702 < yyl702; yyj702++ {
				yyv702 = append(yyv702, FileSpec{})
				yyh702.ElemContainerState(yyj702)
				if r.TryDecodeAsNil() {
					yyv702[yyj702] = FileSpec{}
				} else {
					yyv704 := &yyv702[yyj702]
					yyv704.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj702 := 0
		for ; !r.CheckBreak(); yyj702++ {

			if yyj702 >= len(yyv702) {
				yyv702 = append(yyv702, FileSpec{}) // var yyz702 FileSpec
				yyc702 = true
			}
			yyh702.ElemContainerState(yyj702)
			if yyj702 < len(yyv702) {
				if r.TryDecodeAsNil() {
					yyv702[yyj702] = FileSpec{}
				} else {
					yyv705 := &yyv702[yyj702]
					yyv705.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj702 < len(yyv702) {
			yyv702 = yyv702[:yyj702]
			yyc702 = true
		} else if yyj702 == 0 && yyv702 == nil {
			yyv702 = []FileSpec{}
			yyc702 = true
		}
	}
	yyh702.End()
	if yyc702 {
		*v = yyv702
	}
}

func (x codecSelfer1234) encSliceapi_LocalObjectReference(v []pkg2_api.LocalObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv706 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy707 := &yyv706
		yy707.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceapi_LocalObjectReference(v *[]pkg2_api.LocalObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv708 := *v
	yyh708, yyl708 := z.DecSliceHelperStart()
	var yyc708 bool
	if yyl708 == 0 {
		if yyv708 == nil {
			yyv708 = []pkg2_api.LocalObjectReference{}
			yyc708 = true
		} else if len(yyv708) != 0 {
			yyv708 = yyv708[:0]
			yyc708 = true
		}
	} else if yyl708 > 0 {
		var yyrr708, yyrl708 int
		var yyrt708 bool
		if yyl708 > cap(yyv708) {

			yyrg708 := len(yyv708) > 0
			yyv2708 := yyv708
			yyrl708, yyrt708 = z.DecInferLen(yyl708, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt708 {
				if yyrl708 <= cap(yyv708) {
					yyv708 = yyv708[:yyrl708]
				} else {
					yyv708 = make([]pkg2_api.LocalObjectReference, yyrl708)
				}
			} else {
				yyv708 = make([]pkg2_api.LocalObjectReference, yyrl708)
			}
			yyc708 = true
			yyrr708 = len(yyv708)
			if yyrg708 {
				copy(yyv708, yyv2708)
			}
		} else if yyl708 != len(yyv708) {
			yyv708 = yyv708[:yyl708]
			yyc708 = true
		}
		yyj708 := 0
		for ; yyj708 < yyrr708; yyj708++ {
			yyh708.ElemContainerState(yyj708)
			if r.TryDecodeAsNil() {
				yyv708[yyj708] = pkg2_api.LocalObjectReference{}
			} else {
				yyv709 := &yyv708[yyj708]
				yyv709.CodecDecodeSelf(d)
			}

		}
		if yyrt708 {
			for ; yyj708 < yyl708; yyj708++ {
				yyv708 = append(yyv708, pkg2_api.LocalObjectReference{})
				yyh708.ElemContainerState(yyj708)
				if r.TryDecodeAsNil() {
					yyv708[yyj708] = pkg2_api.LocalObjectReference{}
				} else {
					yyv710 := &yyv708[yyj708]
					yyv710.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj708 := 0
		for ; !r.CheckBreak(); yyj708++ {

			if yyj708 >= len(yyv708) {
				yyv708 = append(yyv708, pkg2_api.LocalObjectReference{}) // var yyz708 pkg2_api.LocalObjectReference
				yyc708 = true
			}
			yyh708.ElemContainerState(yyj708)
			if yyj708 < len(yyv708) {
				if r.TryDecodeAsNil() {
					yyv708[yyj708] = pkg2_api.LocalObjectReference{}
				} else {
					yyv711 := &yyv708[yyj708]
					yyv711.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj708 < len(yyv708) {
			yyv708 = yyv708[:yyj708]
			yyc708 = true
		} else if yyj708 == 0 && yyv708 == nil {
			yyv708 = []pkg2_api.LocalObjectReference{}
			yyc708 = true
		}
	}
	yyh708.End()
	if yyc708 {
		*v = yyv708
	}
}

func (x codecSelfer1234) encSliceConfigSpec(v []ConfigSpec, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv712 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy713 := &yyv712
		yy713.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceConfigSpec(v *[]ConfigSpec, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv714 := *v
	yyh714, yyl714 := z.DecSliceHelperStart()
	var yyc714 bool
	if yyl714 == 0 {
		if yyv714 == nil {
			yyv714 = []ConfigSpec{}
			yyc714 = true
		} else if len(yyv714) != 0 {
			yyv714 = yyv714[:0]
			yyc714 = true
		}
	} else if yyl714 > 0 {
		var yyrr714, yyrl714 int
		var yyrt714 bool
		if yyl714 > cap(yyv714) {

			yyrg714 := len(yyv714) > 0
			yyv2714 := yyv714
			yyrl714, yyrt714 = z.DecInferLen(yyl714, z.DecBasicHandle().MaxInitLen, 24)
			if yyrt714 {
				if yyrl714 <= cap(yyv714) {
					yyv714 = yyv714[:yyrl714]
				} else {
					yyv714 = make([]ConfigSpec, yyrl714)
				}
			} else {
				yyv714 = make([]ConfigSpec, yyrl714)
			}
			yyc714 = true
			yyrr714 = len(yyv714)
			if yyrg714 {
				copy(yyv714, yyv2714)
			}
		} else if yyl714 != len(yyv714) {
			yyv714 = yyv714[:yyl714]
			yyc714 = true
		}
		yyj714 := 0
		for ; yyj714 < yyrr714; yyj714++ {
			yyh714.ElemContainerState(yyj714)
			if r.TryDecodeAsNil() {
				yyv714[yyj714] = ConfigSpec{}
			} else {
				yyv715 := &yyv714[yyj714]
				yyv715.CodecDecodeSelf(d)
			}

		}
		if yyrt714 {
			for ; yyj714 < yyl714; yyj714++ {
				yyv714 = append(yyv714, ConfigSpec{})
				yyh714.ElemContainerState(yyj714)
				if r.TryDecodeAsNil() {
					yyv714[yyj714] = ConfigSpec{}
				} else {
					yyv716 := &yyv714[yyj714]
					yyv716.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj714 := 0
		for ; !r.CheckBreak(); yyj714++ {

			if yyj714 >= len(yyv714) {
				yyv714 = append(yyv714, ConfigSpec{}) // var yyz714 ConfigSpec
				yyc714 = true
			}
			yyh714.ElemContainerState(yyj714)
			if yyj714 < len(yyv714) {
				if r.TryDecodeAsNil() {
					yyv714[yyj714] = ConfigSpec{}
				} else {
					yyv717 := &yyv714[yyj714]
					yyv717.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj714 < len(yyv714) {
			yyv714 = yyv714[:yyj714]
			yyc714 = true
		} else if yyj714 == 0 && yyv714 == nil {
			yyv714 = []ConfigSpec{}
			yyc714 = true
		}
	}
	yyh714.End()
	if yyc714 {
		*v = yyv714
	}
}

func (x codecSelfer1234) encSliceInstanceCondition(v []InstanceCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv718 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy719 := &yyv718
		yy719.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceInstanceCondition(v *[]InstanceCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv720 := *v
	yyh720, yyl720 := z.DecSliceHelperStart()
	var yyc720 bool
	if yyl720 == 0 {
		if yyv720 == nil {
			yyv720 = []InstanceCondition{}
			yyc720 = true
		} else if len(yyv720) != 0 {
			yyv720 = yyv720[:0]
			yyc720 = true
		}
	} else if yyl720 > 0 {
		var yyrr720, yyrl720 int
		var yyrt720 bool
		if yyl720 > cap(yyv720) {

			yyrg720 := len(yyv720) > 0
			yyv2720 := yyv720
			yyrl720, yyrt720 = z.DecInferLen(yyl720, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt720 {
				if yyrl720 <= cap(yyv720) {
					yyv720 = yyv720[:yyrl720]
				} else {
					yyv720 = make([]InstanceCondition, yyrl720)
				}
			} else {
				yyv720 = make([]InstanceCondition, yyrl720)
			}
			yyc720 = true
			yyrr720 = len(yyv720)
			if yyrg720 {
				copy(yyv720, yyv2720)
			}
		} else if yyl720 != len(yyv720) {
			yyv720 = yyv720[:yyl720]
			yyc720 = true
		}
		yyj720 := 0
		for ; yyj720 < yyrr720; yyj720++ {
			yyh720.ElemContainerState(yyj720)
			if r.TryDecodeAsNil() {
				yyv720[yyj720] = InstanceCondition{}
			} else {
				yyv721 := &yyv720[yyj720]
				yyv721.CodecDecodeSelf(d)
			}

		}
		if yyrt720 {
			for ; yyj720 < yyl720; yyj720++ {
				yyv720 = append(yyv720, InstanceCondition{})
				yyh720.ElemContainerState(yyj720)
				if r.TryDecodeAsNil() {
					yyv720[yyj720] = InstanceCondition{}
				} else {
					yyv722 := &yyv720[yyj720]
					yyv722.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj720 := 0
		for ; !r.CheckBreak(); yyj720++ {

			if yyj720 >= len(yyv720) {
				yyv720 = append(yyv720, InstanceCondition{}) // var yyz720 InstanceCondition
				yyc720 = true
			}
			yyh720.ElemContainerState(yyj720)
			if yyj720 < len(yyv720) {
				if r.TryDecodeAsNil() {
					yyv720[yyj720] = InstanceCondition{}
				} else {
					yyv723 := &yyv720[yyj720]
					yyv723.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj720 < len(yyv720) {
			yyv720 = yyv720[:yyj720]
			yyc720 = true
		} else if yyj720 == 0 && yyv720 == nil {
			yyv720 = []InstanceCondition{}
			yyc720 = true
		}
	}
	yyh720.End()
	if yyc720 {
		*v = yyv720
	}
}

func (x codecSelfer1234) encSlicePtrtoInstance(v []*Instance, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv724 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		if yyv724 == nil {
			r.EncodeNil()
		} else {
			yyv724.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePtrtoInstance(v *[]*Instance, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv725 := *v
	yyh725, yyl725 := z.DecSliceHelperStart()
	var yyc725 bool
	if yyl725 == 0 {
		if yyv725 == nil {
			yyv725 = []*Instance{}
			yyc725 = true
		} else if len(yyv725) != 0 {
			yyv725 = yyv725[:0]
			yyc725 = true
		}
	} else if yyl725 > 0 {
		var yyrr725, yyrl725 int
		var yyrt725 bool
		if yyl725 > cap(yyv725) {

			yyrg725 := len(yyv725) > 0
			yyv2725 := yyv725
			yyrl725, yyrt725 = z.DecInferLen(yyl725, z.DecBasicHandle().MaxInitLen, 8)
			if yyrt725 {
				if yyrl725 <= cap(yyv725) {
					yyv725 = yyv725[:yyrl725]
				} else {
					yyv725 = make([]*Instance, yyrl725)
				}
			} else {
				yyv725 = make([]*Instance, yyrl725)
			}
			yyc725 = true
			yyrr725 = len(yyv725)
			if yyrg725 {
				copy(yyv725, yyv2725)
			}
		} else if yyl725 != len(yyv725) {
			yyv725 = yyv725[:yyl725]
			yyc725 = true
		}
		yyj725 := 0
		for ; yyj725 < yyrr725; yyj725++ {
			yyh725.ElemContainerState(yyj725)
			if r.TryDecodeAsNil() {
				if yyv725[yyj725] != nil {
					*yyv725[yyj725] = Instance{}
				}
			} else {
				if yyv725[yyj725] == nil {
					yyv725[yyj725] = new(Instance)
				}
				yyw726 := yyv725[yyj725]
				yyw726.CodecDecodeSelf(d)
			}

		}
		if yyrt725 {
			for ; yyj725 < yyl725; yyj725++ {
				yyv725 = append(yyv725, nil)
				yyh725.ElemContainerState(yyj725)
				if r.TryDecodeAsNil() {
					if yyv725[yyj725] != nil {
						*yyv725[yyj725] = Instance{}
					}
				} else {
					if yyv725[yyj725] == nil {
						yyv725[yyj725] = new(Instance)
					}
					yyw727 := yyv725[yyj725]
					yyw727.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj725 := 0
		for ; !r.CheckBreak(); yyj725++ {

			if yyj725 >= len(yyv725) {
				yyv725 = append(yyv725, nil) // var yyz725 *Instance
				yyc725 = true
			}
			yyh725.ElemContainerState(yyj725)
			if yyj725 < len(yyv725) {
				if r.TryDecodeAsNil() {
					if yyv725[yyj725] != nil {
						*yyv725[yyj725] = Instance{}
					}
				} else {
					if yyv725[yyj725] == nil {
						yyv725[yyj725] = new(Instance)
					}
					yyw728 := yyv725[yyj725]
					yyw728.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj725 < len(yyv725) {
			yyv725 = yyv725[:yyj725]
			yyc725 = true
		} else if yyj725 == 0 && yyv725 == nil {
			yyv725 = []*Instance{}
			yyc725 = true
		}
	}
	yyh725.End()
	if yyc725 {
		*v = yyv725
	}
}

apiVersion: archon.kubeup.com/v1
kind: InstanceGroup
metadata:
  name: k8s-master
spec:
  replicas: 1
  provisionPolicy: ReservedOnly
  selector:
    matchLabels:
      app: k8s-master
  template:
    metadata:
      annotations:
        matchbox.archon.kubeup.com/selector: '{"os": "installed"}'
      labels:
        app: k8s-master
    spec:
      networkName: k8s-net
      os: CoreOSIgnition
      image: 1235.9.0
      files:
      - name: 00-eth0
        path: "/coreos/networkd/00-eth0"
        template: |-
          name: 00-eth0.network
          contents: |
            [Match]
            Name=eth0
            [Network]
            Address={{.Status.PrivateIP}}
      - name: unit-k8s-addons
        path: "/coreos/systemd/k8s-addons"
        template: |-
          name: k8s-addons.service
          enable: true
          contents: |-
            [Unit]
            Description=Kubernetes Addons
            [Service]
            Type=oneshot
            ExecStart=/opt/k8s-addons
            [Install]
            WantedBy=multi-user.target
      - name: unit-kubelet
        path: "/coreos/systemd/kubelet"
        template: |-
          name: kubelet.service
          enable: true
          contents: |-
            [Service]
            Environment=KUBELET_VERSION={{ index .Configs "k8s" "k8s-version"}}
            Environment=KUBELET_ACI={{ index .Configs "k8s" "kubelet-aci-img"}}
            Environment="RKT_OPTS=--uuid-file-save=/var/run/kubelet-pod.uuid \
              --trust-keys-from-https \
              --volume dns,kind=host,source=/etc/resolv.conf \
              --mount volume=dns,target=/etc/resolv.conf \
              --volume var-log,kind=host,source=/var/log \
              --mount volume=var-log,target=/var/log \
              --volume lib-modules,kind=host,source=/lib/modules \
              --mount volume=lib-modules,target=/lib/modules \
              --volume var-cni,kind=host,source=/var/lib/cni \
              --mount volume=var-cni,target=/var/lib/cni"
            ExecStartPre=/usr/bin/systemctl stop update-engine
            ExecStartPre=/usr/bin/mkdir -p /etc/kubernetes/manifests
            ExecStartPre=/usr/bin/mkdir -p /var/log/containers
            ExecStartPre=/usr/bin/mkdir -p /var/lib/cni
            ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/run/kubelet-pod.uuid
            ExecStart=/usr/lib/coreos/kubelet-wrapper \
              --kubeconfig=/etc/kubernetes/kubeconfig \
              --require-kubeconfig \
              --register-schedulable=true \
              --allow-privileged=true \
              --pod-manifest-path=/etc/kubernetes/manifests \
              --cluster-dns={{ index .Configs "k8s" "dns-service-ip"}} \
              --node-ip={{.Status.PrivateIP}} \
              --cluster-domain=cluster.local \
              --network-plugin=kubenet \
              --anonymous-auth=false \
              --client-ca-file=/etc/kubernetes/ssl/ca.pem \
              --node-labels=master=true \
              --pod-infra-container-image={{ index .Configs "k8s" "pause-img"}}
            ExecStop=-/usr/bin/rkt stop --uuid-file=/var/run/kubelet-pod.uuid
            Restart=always
            RestartSec=10
            User=root
            [Install]
            WantedBy=multi-user.target
      - name: hostname
        filesystem: root
        path: "/etc/hostname"
        permissions: "0600"
        template: |-
          ip-{{ .Status.PrivateIP | replace "." "-" }}.i.k8scn.com
      - name: kubeconfig
        filesystem: root
        path: "/etc/kubernetes/kubeconfig"
        permissions: "0600"
        owner: "root"
        template: |-
          apiVersion: v1
          kind: Config
          clusters:
          - name: local
            cluster:
              server: https://127.0.0.1:443
              certificate-authority-data: {{ index .Secrets "ca" "tls-cert" | printf "%s" | b64enc }}
          users:
          - name: kubelet
            user:
              client-certificate-data: {{ index .Secrets "kubelet" "tls-cert" | printf "%s" | b64enc }}
              client-key-data: {{ index .Secrets "kubelet" "tls-key" | printf "%s" | b64enc }}
          contexts:
          - context:
              cluster: local
              user: kubelet
      - name: etcd.yaml
        filesystem: root
        path: "/etc/kubernetes/manifests/etcd.yaml"
        permissions: "0644"
        owner: "root"
        template: |-
          kind: Pod
          apiVersion: v1
          metadata:
            name: etcd
            namespace: kube-system
            labels:
              component: etcd
              tier: control-plane
          spec:
            volumes:
            - name: certs
              hostPath:
                path: "/etc/ssl/certs"
            - name: etcd
              hostPath:
                path: "/var/lib/etcd"
            - name: k8s
              hostPath:
                path: "/etc/kubernetes"
            containers:
            - name: etcd
              image: registry.aliyuncs.com/tryk8s/etcd-amd64:3.0.14-kubeadm
              command:
              - etcd
              - "--listen-client-urls=http://127.0.0.1:2379"
              - "--advertise-client-urls=http://127.0.0.1:2379"
              - "--data-dir=/var/etcd/data"
              resources:
                requests:
                  cpu: 200m
              volumeMounts:
              - name: certs
                mountPath: "/etc/ssl/certs"
              - name: etcd
                mountPath: "/var/etcd"
              - name: k8s
                readOnly: true
                mountPath: "/etc/kubernetes/"
              livenessProbe:
                httpGet:
                  path: "/health"
                  port: 2379
                  host: 127.0.0.1
                initialDelaySeconds: 15
                timeoutSeconds: 15
                failureThreshold: 8
            hostNetwork: true
      - name: kube-apiserver.yaml
        filesystem: root
        path: "/etc/kubernetes/manifests/kube-apiserver.yaml"
        permissions: "0644"
        owner: "root"
        template: |-
          apiVersion: v1
          kind: Pod
          metadata:
            name: kube-apiserver
            namespace: kube-system
          spec:
            hostNetwork: true
            containers:
            - name: kube-apiserver
              image: {{ index .Configs "k8s" "hyper-kube-img" }}
              command:
              - /hyperkube
              - apiserver
              - --bind-address=0.0.0.0
              - --etcd-servers=http://localhost:2379
              - --allow-privileged=true
              - --service-cluster-ip-range={{ index .Configs "k8s" "service-ip-range" }}
              - --runtime-config=extensions/v1beta1=true,extensions/v1beta1/thirdpartyresources=true
              - --secure-port=443
              - --storage-backend=etcd3
              - --advertise-address={{.Status.PrivateIP}}
              - --admission-control=NamespaceLifecycle,NamespaceExists,LimitRanger,SecurityContextDeny,ServiceAccount,ResourceQuota
              - --tls-cert-file=/etc/kubernetes/ssl/apiserver.pem
              - --tls-private-key-file=/etc/kubernetes/ssl/apiserver-key.pem
              - --service-account-key-file=/etc/kubernetes/ssl/serviceaccount-key.pem
              - --client-ca-file=/etc/kubernetes/ssl/ca.pem
              ports:
              - containerPort: 443
                hostPort: 443
                name: https
              - containerPort: 8080
                hostPort: 8080
                name: local
              volumeMounts:
              - mountPath: /etc/kubernetes/ssl
                name: ssl-certs-kubernetes
                readOnly: true
              - mountPath: /etc/ssl/certs
                name: ssl-certs-host
                readOnly: true
            volumes:
            - hostPath:
                path: /etc/kubernetes/ssl
              name: ssl-certs-kubernetes
            - hostPath:
                path: /usr/share/ca-certificates
              name: ssl-certs-host
      - name: kube-proxy.yaml
        filesystem: root
        path: "/etc/kubernetes/manifests/kube-proxy.yaml"
        permissions: "0644"
        owner: "root"
        template: |-
          apiVersion: v1
          kind: Pod
          metadata:
            name: kube-proxy
            namespace: kube-system
          spec:
            hostNetwork: true
            containers:
            - name: kube-proxy
              image: {{ index .Configs "k8s" "hyper-kube-img" }}
              command:
              - /hyperkube
              - proxy
              - --master=http://127.0.0.1:8080
              - --proxy-mode=iptables
              securityContext:
                privileged: true
              volumeMounts:
              - mountPath: /etc/ssl/certs
                name: ssl-certs-host
                readOnly: true
            volumes:
            - hostPath:
                path: /usr/share/ca-certificates
              name: ssl-certs-host
      - name: kube-controller-manager.yaml
        filesystem: root
        path: "/etc/kubernetes/manifests/kube-controller-manager.yaml"
        permissions: "0644"
        owner: "root"
        template: |-
          apiVersion: v1
          kind: Pod
          metadata:
            name: kube-controller-manager
            namespace: kube-system
          spec:
            hostNetwork: true
            containers:
            - name: kube-controller-manager
              image: {{ index .Configs "k8s" "hyper-kube-img" }}
              command:
              - /hyperkube
              - controller-manager
              - --master=http://127.0.0.1:8080
              - --leader-elect=true
              - --service-account-private-key-file=/etc/kubernetes/ssl/serviceaccount-key.pem
              - --root-ca-file=/etc/kubernetes/ssl/ca.pem
              - --allocate-node-cidrs=true
              - --cluster-cidr={{ index .Configs "k8s" "pod-ip-range" }}
              - --configure-cloud-routes=false
              livenessProbe:
                httpGet:
                  host: 127.0.0.1
                  path: /healthz
                  port: 10252
                initialDelaySeconds: 15
                timeoutSeconds: 1
              volumeMounts:
              - mountPath: /etc/kubernetes/ssl
                name: ssl-certs-kubernetes
                readOnly: true
              - mountPath: /etc/ssl/certs
                name: ssl-certs-host
                readOnly: true
            volumes:
            - hostPath:
                path: /etc/kubernetes/ssl
              name: ssl-certs-kubernetes
            - hostPath:
                path: /usr/share/ca-certificates
              name: ssl-certs-host
      - name: kube-scheduler.yaml
        filesystem: root
        path: "/etc/kubernetes/manifests/kube-scheduler.yaml"
        permissions: "0644"
        owner: "root"
        template: |-
          apiVersion: v1
          kind: Pod
          metadata:
            name: kube-scheduler
            namespace: kube-system
          spec:
            hostNetwork: true
            containers:
            - name: kube-scheduler
              image: {{ index .Configs "k8s" "hyper-kube-img" }}
              command:
              - /hyperkube
              - scheduler
              - --master=http://127.0.0.1:8080
              - --leader-elect=true
              livenessProbe:
                httpGet:
                  host: 127.0.0.1
                  path: /healthz
                  port: 10251
                initialDelaySeconds: 15
                timeoutSeconds: 1
      - name: hostroutes
        filesystem: root
        path: "/srv/kubernetes/manifests/hostroutes-daemonset.yaml"
        permissions: "0644"
        owner: "root"
        content: |-
          apiVersion: extensions/v1beta1
          kind: DaemonSet
          metadata:
            name: hostroutes
            labels:
              app: hostroutes
          spec:
            template:
              metadata:
                name: hostroutes
                labels:
                  app: hostroutes
              spec:
                hostNetwork: true
                containers:
                  - resources:
                      requests:
                        cpu: 0.20
                    securityContext:
                      privileged: true
                    image: kubeup/hostroutes
                    name: hostroutes
                    command: [ "/hostroutes", "--in-cluster" ]
      - name: k8s-addons
        filesystem: root
        path: "/opt/k8s-addons"
        permissions: "0544"
        owner: "root"
        content: |-
          #!/bin/bash -ex
          echo "Waiting for Kubernetes API..."
          until curl --silent "http://127.0.0.1:8080/version"
          do
            sleep 5
          done
          curl --silent -H "Content-Type: application/yaml" -XPOST -d"$(cat /srv/kubernetes/manifests/hostroutes-daemonset.yaml)" "http://127.0.0.1:8080/apis/extensions/v1beta1/namespaces/kube-system/daemonsets"
      - name: ca.pem
        filesystem: root
        path: "/etc/kubernetes/ssl/ca.pem"
        permissions: "0644"
        owner: "root"
        template: |-
          {{ index .Secrets "ca" "tls-cert" | printf "%s" }}
      - name: apiserver.pem
        filesystem: root
        path: "/etc/kubernetes/ssl/apiserver.pem"
        permissions: "0644"
        owner: "root"
        template: |-
          {{ index .Secrets "apiserver" "tls-cert" | printf "%s" }}
      - name: apiserver-key.pem
        filesystem: root
        path: "/etc/kubernetes/ssl/apiserver-key.pem"
        permissions: "0600"
        owner: "root"
        template: |-
          {{ index .Secrets "apiserver" "tls-key" | printf "%s" }}
      - name: kubelet.pem
        filesystem: root
        path: "/etc/kubernetes/ssl/kubelet.pem"
        permissions: "0644"
        owner: "root"
        template: |-
          {{ index .Secrets "kubelet" "tls-cert" | printf "%s" }}
      - name: kubelet-key.pem
        filesystem: root
        path: "/etc/kubernetes/ssl/kubelet-key.pem"
        permissions: "0600"
        owner: "root"
        template: |-
          {{ index .Secrets "kubelet" "tls-key" | printf "%s" }}
      - name: serviceaccount.pem
        filesystem: root
        path: "/etc/kubernetes/ssl/serviceaccount.pem"
        permissions: "0644"
        owner: "root"
        template: |-
          {{ index .Secrets "serviceaccount" "tls-cert" | printf "%s" }}
      - name: serviceaccount-key.pem
        filesystem: root
        path: "/etc/kubernetes/ssl/serviceaccount-key.pem"
        permissions: "0600"
        owner: "root"
        template: |-
          {{ index .Secrets "serviceaccount" "tls-key" | printf "%s" }}
      configs:
      - name: k8s
        data:
          hyper-kube-img: registry.aliyuncs.com/archon/hyperkube-amd64:v1.6.0
          pause-img: registry.aliyuncs.com/archon/pause-amd64:3.0
          kubelet-aci-img: kubeup.com/aci/coreos/hyperkube
          kube-aliyun-img: kubeup/kube-aliyun
          k8s-version: v1.6.0_coreos.0
          service-ip-range: 10.3.0.0/24
          pod-ip-range: 10.2.0.0/16
          dns-service-ip: 10.3.0.10
          k8s-service-ip: 10.3.0.1
      users:
      - name: core
      secrets:
      - name: k8s-ca
      - name: serviceaccount
      - name: apiserver
      - name: kubelet

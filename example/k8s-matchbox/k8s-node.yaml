apiVersion: archon.kubeup.com/v1
kind: InstanceGroup
metadata:
  name: k8s-node
spec:
  replicas: 2
  provisionPolicy: ReservedOnly
  selector:
    matchLabels:
      app: k8s-node
  template:
    metadata:
      annotations:
        matchbox.archon.kubeup.com/extra-boot-args: "root=/dev/sda1"
      labels:
        app: k8s-node
    spec:
      networkName: k8s-net
      os: CoreOSIgnition
      image: 1235.9.0
      files:
      - name: sda
        path: "/coreos/disks/sda"
        content: |-
          device: /dev/sda
          wipe_table: true
          partitions:
          - label: ROOT
      - name: root
        path: "/coreos/filesystems/root"
        content: |-
          name: root
          mount:
            device: "/dev/sda1"
            format: "ext4"
            create:
              force: true
              options:
                - "-LROOT"
      - name: 00-eth0
        path: "/coreos/networkd/00-eth0"
        template: |-
          name: 00-eth0.network
          contents: |
            [Match]
            Name=eth0
            [Network]
            Address={{.Status.PrivateIP}}
      - name: unit-kubelet
        path: "/coreos/systemd/kubelet"
        template: |-
          name: kubelet.service
          enable: true
          contents: |-
            [Service]
            Environment=KUBELET_VERSION={{ index .Configs "k8s" "k8s-version"}}
            Environment=KUBELET_ACI={{ index .Configs "k8s" "kubelet-aci-img"}}
            Environment="RKT_OPTS=--uuid-file-save=/var/run/kubelet-pod.uuid \
              --trust-keys-from-https \
              --volume dns,kind=host,source=/etc/resolv.conf \
              --mount volume=dns,target=/etc/resolv.conf \
              --volume var-log,kind=host,source=/var/log \
              --mount volume=var-log,target=/var/log \
              --volume lib-modules,kind=host,source=/lib/modules \
              --mount volume=lib-modules,target=/lib/modules \
              --volume var-cni,kind=host,source=/var/lib/cni \
              --mount volume=var-cni,target=/var/lib/cni"
            ExecStartPre=/usr/bin/systemctl stop update-engine
            ExecStartPre=/usr/bin/mkdir -p /etc/kubernetes/manifests
            ExecStartPre=/usr/bin/mkdir -p /var/log/containers
            ExecStartPre=/usr/bin/mkdir -p /var/lib/cni
            ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/run/kubelet-pod.uuid
            ExecStart=/usr/lib/coreos/kubelet-wrapper \
              --kubeconfig=/etc/kubernetes/kubeconfig \
              --require-kubeconfig \
              --register-schedulable=true \
              --allow-privileged=true \
              --pod-manifest-path=/etc/kubernetes/manifests \
              --cluster-dns={{ index .Configs "k8s" "dns-service-ip"}} \
              --node-ip={{.Status.PrivateIP}} \
              --cluster-domain=cluster.local \
              --network-plugin=kubenet \
              --node-labels=node=true \
              --enable-controller-attach-detach \
              --pod-infra-container-image={{ index .Configs "k8s" "pause-img"}}
            ExecStop=-/usr/bin/rkt stop --uuid-file=/var/run/kubelet-pod.uuid
            Restart=always
            RestartSec=10
            User=root
            [Install]
            WantedBy=multi-user.target
      - name: hostname
        filesystem: root
        path: "/etc/hostname"
        permissions: "0600"
        template: |-
          ip-{{ .Status.PrivateIP | replace "." "-" }}.i.k8scn.com
      - name: kubeconfig
        filesystem: root
        path: "/etc/kubernetes/kubeconfig"
        permissions: "0600"
        owner: "root"
        template: |-
          apiVersion: v1
          kind: Config
          clusters:
          - name: local
            cluster:
              server: {{ index .Configs "k8s" "api-servers" }}
              certificate-authority-data: {{ index .Secrets "ca" "tls-cert" | printf "%s" | b64enc }}
          users:
          - name: kubelet
            user:
              client-certificate-data: {{ index .Secrets "kubelet" "tls-cert" | printf "%s" | b64enc }}
              client-key-data: {{ index .Secrets "kubelet" "tls-key" | printf "%s" | b64enc }}
          contexts:
          - context:
              cluster: local
              user: kubelet
            name: kubelet-context
          current-context: kubelet-context
      - name: kube-proxy.yaml
        filesystem: root
        path: "/etc/kubernetes/manifests/kube-proxy.yaml"
        permissions: "0644"
        owner: "root"
        template: |-
          apiVersion: v1
          kind: Pod
          metadata:
            name: kube-proxy
            namespace: kube-system
          spec:
            hostNetwork: true
            containers:
            - name: kube-proxy
              image: {{ index .Configs "k8s" "hyper-kube-img" }}
              command:
              - /hyperkube
              - proxy
              - --master={{ index .Configs "k8s" "api-servers" }}
              - --kubeconfig=/etc/kubernetes/kubeconfig
              securityContext:
                privileged: true
              volumeMounts:
              - mountPath: /etc/ssl/certs
                name: ssl-certs-host
                readOnly: true
              - mountPath: /etc/kubernetes/kubeconfig
                name: kubeconfig
                readOnly: true
            volumes:
            - hostPath:
                path: /usr/share/ca-certificates
              name: ssl-certs-host
            - hostPath:
                path: /etc/kubernetes/kubeconfig
              name: kubeconfig
      configs:
      - name: k8s
        data:
          hyper-kube-img: registry.aliyuncs.com/archon/hyperkube-amd64:v1.6.0
          pause-img: registry.aliyuncs.com/archon/pause-amd64:3.0
          kubelet-aci-img: kubeup.com/aci/coreos/hyperkube
          kube-aliyun-img: kubeup/kube-aliyun
          api-servers: https://ip-172-17-8-11.i.k8scn.com:443
          dns-service-ip: 10.3.0.10
          k8s-version: v1.6.0_coreos.0
      users:
      - name: core
      secrets:
      - name: k8s-ca
      - name: kubelet
